/*
 *                            Yeppp! library header
 *                   This file is auto-generated by Peach-Py,
 *        Portable Efficient Assembly Code-generator in Higher-level Python,
 *                    part of the Yeppp! library infrastrure
 * 
 * This file is part of Yeppp! library and licensed under the New BSD license.
 * 
 * Copyright (C) 2010-2012 Marat Dukhan
 * Copyright (C) 2012-2013 Georgia Institute of Technology
 * All rights reserved.
 *  
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Georgia Institute of Technology nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#pragma once

#include <yepPredefines.h>
#include <yepTypes.h>

#ifdef __cplusplus
	extern "C" {
#endif

/** @defgroup yepCore yepCore.h: basic arithmetic operations. */

/**
 * @ingroup yepCore
 * @defgroup yepCore_Add	Addition
 */

/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 8-bit integer elements.
 * @param[in]	x	Pointer to the first addend array of signed 8-bit integer elements.
 * @param[in]	y	Pointer to the second addend array of signed 8-bit integer elements.
 * @param[out]	sum	Pointer to the summand array of signed 8-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V8sV8s_V8s(const Yep8s *YEP_RESTRICT x, const Yep8s *YEP_RESTRICT y, Yep8s *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 16-bit integer elements.
 * @param[in]	x	Pointer to the first addend array of signed 8-bit integer elements.
 * @param[in]	y	Pointer to the second addend array of signed 8-bit integer elements.
 * @param[out]	sum	Pointer to the summand array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V8sV8s_V16s(const Yep8s *YEP_RESTRICT x, const Yep8s *YEP_RESTRICT y, Yep16s *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two unsigned 8-bit integer arrays. Produces an array of unsigned 16-bit integer elements.
 * @param[in]	x	Pointer to the first addend array of unsigned 8-bit integer elements.
 * @param[in]	y	Pointer to the second addend array of unsigned 8-bit integer elements.
 * @param[out]	sum	Pointer to the summand array of unsigned 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V8uV8u_V16u(const Yep8u *YEP_RESTRICT x, const Yep8u *YEP_RESTRICT y, Yep16u *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 16-bit integer elements.
 * @param[in]	x	Pointer to the first addend array of signed 16-bit integer elements.
 * @param[in]	y	Pointer to the second addend array of signed 16-bit integer elements.
 * @param[out]	sum	Pointer to the summand array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V16sV16s_V16s(const Yep16s *YEP_RESTRICT x, const Yep16s *YEP_RESTRICT y, Yep16s *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 32-bit integer elements.
 * @param[in]	x	Pointer to the first addend array of signed 16-bit integer elements.
 * @param[in]	y	Pointer to the second addend array of signed 16-bit integer elements.
 * @param[out]	sum	Pointer to the summand array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V16sV16s_V32s(const Yep16s *YEP_RESTRICT x, const Yep16s *YEP_RESTRICT y, Yep32s *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two unsigned 16-bit integer arrays. Produces an array of unsigned 32-bit integer elements.
 * @param[in]	x	Pointer to the first addend array of unsigned 16-bit integer elements.
 * @param[in]	y	Pointer to the second addend array of unsigned 16-bit integer elements.
 * @param[out]	sum	Pointer to the summand array of unsigned 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V16uV16u_V32u(const Yep16u *YEP_RESTRICT x, const Yep16u *YEP_RESTRICT y, Yep32u *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 32-bit integer elements.
 * @param[in]	x	Pointer to the first addend array of signed 32-bit integer elements.
 * @param[in]	y	Pointer to the second addend array of signed 32-bit integer elements.
 * @param[out]	sum	Pointer to the summand array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V32sV32s_V32s(const Yep32s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, Yep32s *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 64-bit integer elements.
 * @param[in]	x	Pointer to the first addend array of signed 32-bit integer elements.
 * @param[in]	y	Pointer to the second addend array of signed 32-bit integer elements.
 * @param[out]	sum	Pointer to the summand array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V32sV32s_V64s(const Yep32s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, Yep64s *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two unsigned 32-bit integer arrays. Produces an array of unsigned 64-bit integer elements.
 * @param[in]	x	Pointer to the first addend array of unsigned 32-bit integer elements.
 * @param[in]	y	Pointer to the second addend array of unsigned 32-bit integer elements.
 * @param[out]	sum	Pointer to the summand array of unsigned 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V32uV32u_V64u(const Yep32u *YEP_RESTRICT x, const Yep32u *YEP_RESTRICT y, Yep64u *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two signed 64-bit integer arrays. Produces an array of signed 64-bit integer elements.
 * @param[in]	x	Pointer to the first addend array of signed 64-bit integer elements.
 * @param[in]	y	Pointer to the second addend array of signed 64-bit integer elements.
 * @param[out]	sum	Pointer to the summand array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V64sV64s_V64s(const Yep64s *YEP_RESTRICT x, const Yep64s *YEP_RESTRICT y, Yep64s *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two single precision (32-bit) floating-point arrays. Produces an array of single precision (32-bit) floating-point elements.
 * @param[in]	x	Pointer to the first addend array of single precision (32-bit) floating-point elements.
 * @param[in]	y	Pointer to the second addend array of single precision (32-bit) floating-point elements.
 * @param[out]	sum	Pointer to the summand array of single precision (32-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V32fV32f_V32f(const Yep32f *YEP_RESTRICT x, const Yep32f *YEP_RESTRICT y, Yep32f *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two double precision (64-bit) floating-point arrays. Produces an array of double precision (64-bit) floating-point elements.
 * @param[in]	x	Pointer to the first addend array of double precision (64-bit) floating-point elements.
 * @param[in]	y	Pointer to the second addend array of double precision (64-bit) floating-point elements.
 * @param[out]	sum	Pointer to the summand array of double precision (64-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V64fV64f_V64f(const Yep64f *YEP_RESTRICT x, const Yep64f *YEP_RESTRICT y, Yep64f *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to signed 8-bit integer array elements. Produces an array of signed 8-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the addend array of signed 8-bit integer elements.
 * @param[in]	y	The signed 8-bit integer constant to be added.
 * @param[out]	sum	Pointer to the summand array of signed 8-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a sum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V8sS8s_V8s(const Yep8s *YEP_RESTRICT x, Yep8s y, Yep8s *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to signed 8-bit integer array elements. Produces an array of signed 16-bit integer elements.
 * @param[in]	x	Pointer to the addend array of signed 8-bit integer elements.
 * @param[in]	y	The signed 8-bit integer constant to be added.
 * @param[out]	sum	Pointer to the summand array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>SSE2, AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V8sS8s_V16s(const Yep8s *YEP_RESTRICT x, Yep8s y, Yep16s *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to unsigned 8-bit integer array elements. Produces an array of unsigned 16-bit integer elements.
 * @param[in]	x	Pointer to the addend array of unsigned 8-bit integer elements.
 * @param[in]	y	The unsigned 8-bit integer constant to be added.
 * @param[out]	sum	Pointer to the summand array of unsigned 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>SSE2, AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V8uS8u_V16u(const Yep8u *YEP_RESTRICT x, Yep8u y, Yep16u *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to signed 16-bit integer array elements. Produces an array of signed 16-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the addend array of signed 16-bit integer elements.
 * @param[in]	y	The signed 16-bit integer constant to be added.
 * @param[out]	sum	Pointer to the summand array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a sum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V16sS16s_V16s(const Yep16s *YEP_RESTRICT x, Yep16s y, Yep16s *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to signed 16-bit integer array elements. Produces an array of signed 32-bit integer elements.
 * @param[in]	x	Pointer to the addend array of signed 16-bit integer elements.
 * @param[in]	y	The signed 16-bit integer constant to be added.
 * @param[out]	sum	Pointer to the summand array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>SSE2, AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V16sS16s_V32s(const Yep16s *YEP_RESTRICT x, Yep16s y, Yep32s *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to unsigned 16-bit integer array elements. Produces an array of unsigned 32-bit integer elements.
 * @param[in]	x	Pointer to the addend array of unsigned 16-bit integer elements.
 * @param[in]	y	The unsigned 16-bit integer constant to be added.
 * @param[out]	sum	Pointer to the summand array of unsigned 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>SSE2, AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V16uS16u_V32u(const Yep16u *YEP_RESTRICT x, Yep16u y, Yep32u *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to signed 32-bit integer array elements. Produces an array of signed 32-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the addend array of signed 32-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant to be added.
 * @param[out]	sum	Pointer to the summand array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a sum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V32sS32s_V32s(const Yep32s *YEP_RESTRICT x, Yep32s y, Yep32s *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to unsigned 32-bit integer array elements. Produces an array of unsigned 64-bit integer elements.
 * @param[in]	x	Pointer to the addend array of unsigned 32-bit integer elements.
 * @param[in]	y	The unsigned 32-bit integer constant to be added.
 * @param[out]	sum	Pointer to the summand array of unsigned 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>SSE2, AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V32uS32u_V64u(const Yep32u *YEP_RESTRICT x, Yep32u y, Yep64u *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to signed 32-bit integer array elements. Produces an array of signed 64-bit integer elements.
 * @param[in]	x	Pointer to the addend array of signed 32-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant to be added.
 * @param[out]	sum	Pointer to the summand array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>SSE2, AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V32sS32s_V64s(const Yep32s *YEP_RESTRICT x, Yep32s y, Yep64s *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to signed 64-bit integer array elements. Produces an array of signed 64-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the addend array of signed 64-bit integer elements.
 * @param[in]	y	The signed 64-bit integer constant to be added.
 * @param[out]	sum	Pointer to the summand array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a sum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V64sS64s_V64s(const Yep64s *YEP_RESTRICT x, Yep64s y, Yep64s *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to single precision (32-bit) floating-point array elements. Produces an array of single precision (32-bit) floating-point elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the addend array of single precision (32-bit) floating-point elements.
 * @param[in]	y	The single precision (32-bit) floating-point constant to be added.
 * @param[out]	sum	Pointer to the summand array of single precision (32-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a sum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V32fS32f_V32f(const Yep32f *YEP_RESTRICT x, Yep32f y, Yep32f *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to double precision (64-bit) floating-point array elements. Produces an array of double precision (64-bit) floating-point elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the addend array of double precision (64-bit) floating-point elements.
 * @param[in]	y	The double precision (64-bit) floating-point constant to be added.
 * @param[out]	sum	Pointer to the summand array of double precision (64-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a sum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a sum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_V64fS64f_V64f(const Yep64f *YEP_RESTRICT x, Yep64f y, Yep64f *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first addend array of signed 8-bit integer elements.
 * @param[in]	y	Pointer to the second addend array of signed 8-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_IV8sV8s_IV8s(Yep8s *YEP_RESTRICT x, const Yep8s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first addend array of signed 16-bit integer elements.
 * @param[in]	y	Pointer to the second addend array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_IV16sV16s_IV16s(Yep16s *YEP_RESTRICT x, const Yep16s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first addend array of signed 32-bit integer elements.
 * @param[in]	y	Pointer to the second addend array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_IV32sV32s_IV32s(Yep32s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first addend array of signed 64-bit integer elements.
 * @param[in]	y	Pointer to the second addend array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_IV64sV64s_IV64s(Yep64s *YEP_RESTRICT x, const Yep64s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first addend array of single precision (32-bit) floating-point elements.
 * @param[in]	y	Pointer to the second addend array of single precision (32-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_IV32fV32f_IV32f(Yep32f *YEP_RESTRICT x, const Yep32f *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first addend array of double precision (64-bit) floating-point elements.
 * @param[in]	y	Pointer to the second addend array of double precision (64-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_IV64fV64f_IV64f(Yep64f *YEP_RESTRICT x, const Yep64f *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to signed 8-bit integer array elements and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the addend array of signed 8-bit integer elements.
 * @param[in]	y	The signed 8-bit integer constant to be added.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_IV8sS8s_IV8s(Yep8s *YEP_RESTRICT x, Yep8s y, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to signed 16-bit integer array elements and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the addend array of signed 16-bit integer elements.
 * @param[in]	y	The signed 16-bit integer constant to be added.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_IV16sS16s_IV16s(Yep16s *YEP_RESTRICT x, Yep16s y, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to signed 32-bit integer array elements and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the addend array of signed 32-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant to be added.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_IV32sS32s_IV32s(Yep32s *YEP_RESTRICT x, Yep32s y, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to signed 64-bit integer array elements and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the addend array of signed 64-bit integer elements.
 * @param[in]	y	The signed 64-bit integer constant to be added.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_IV64sS64s_IV64s(Yep64s *YEP_RESTRICT x, Yep64s y, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to single precision (32-bit) floating-point array elements and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the addend array of single precision (32-bit) floating-point elements.
 * @param[in]	y	The single precision (32-bit) floating-point constant to be added.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_IV32fS32f_IV32f(Yep32f *YEP_RESTRICT x, Yep32f y, YepSize length);
/**
 * @ingroup	yepCore_Add
 * @brief	Adds a constant to double precision (64-bit) floating-point array elements and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the addend array of double precision (64-bit) floating-point elements.
 * @param[in]	y	The double precision (64-bit) floating-point constant to be added.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Add_IV64fS64f_IV64f(Yep64f *YEP_RESTRICT x, Yep64f y, YepSize length);
/**
 * @ingroup yepCore
 * @defgroup yepCore_Subtract	Subtraction
 */

/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 8-bit integer elements.
 * @param[in]	x	Pointer to the minuend array of signed 8-bit integer elements.
 * @param[in]	y	Pointer to the subtrahend array of signed 8-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of signed 8-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a diff argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V8sV8s_V8s(const Yep8s *YEP_RESTRICT x, const Yep8s *YEP_RESTRICT y, Yep8s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 16-bit integer elements.
 * @param[in]	x	Pointer to the minuend array of signed 8-bit integer elements.
 * @param[in]	y	Pointer to the subtrahend array of signed 8-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a diff argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V8sV8s_V16s(const Yep8s *YEP_RESTRICT x, const Yep8s *YEP_RESTRICT y, Yep16s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two unsigned 8-bit integer arrays. Produces an array of unsigned 16-bit integer elements.
 * @param[in]	x	Pointer to the minuend array of unsigned 8-bit integer elements.
 * @param[in]	y	Pointer to the subtrahend array of unsigned 8-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of unsigned 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a diff argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V8uV8u_V16u(const Yep8u *YEP_RESTRICT x, const Yep8u *YEP_RESTRICT y, Yep16u *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 16-bit integer elements.
 * @param[in]	x	Pointer to the minuend array of signed 16-bit integer elements.
 * @param[in]	y	Pointer to the subtrahend array of signed 16-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a diff argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V16sV16s_V16s(const Yep16s *YEP_RESTRICT x, const Yep16s *YEP_RESTRICT y, Yep16s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 32-bit integer elements.
 * @param[in]	x	Pointer to the minuend array of signed 16-bit integer elements.
 * @param[in]	y	Pointer to the subtrahend array of signed 16-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a diff argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V16sV16s_V32s(const Yep16s *YEP_RESTRICT x, const Yep16s *YEP_RESTRICT y, Yep32s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two unsigned 16-bit integer arrays. Produces an array of unsigned 32-bit integer elements.
 * @param[in]	x	Pointer to the minuend array of unsigned 16-bit integer elements.
 * @param[in]	y	Pointer to the subtrahend array of unsigned 16-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of unsigned 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a diff argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V16uV16u_V32u(const Yep16u *YEP_RESTRICT x, const Yep16u *YEP_RESTRICT y, Yep32u *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 32-bit integer elements.
 * @param[in]	x	Pointer to the minuend array of signed 32-bit integer elements.
 * @param[in]	y	Pointer to the subtrahend array of signed 32-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a diff argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V32sV32s_V32s(const Yep32s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, Yep32s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 64-bit integer elements.
 * @param[in]	x	Pointer to the minuend array of signed 32-bit integer elements.
 * @param[in]	y	Pointer to the subtrahend array of signed 32-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a diff argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V32sV32s_V64s(const Yep32s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, Yep64s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two unsigned 32-bit integer arrays. Produces an array of unsigned 64-bit integer elements.
 * @param[in]	x	Pointer to the minuend array of unsigned 32-bit integer elements.
 * @param[in]	y	Pointer to the subtrahend array of unsigned 32-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of unsigned 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a diff argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V32uV32u_V64u(const Yep32u *YEP_RESTRICT x, const Yep32u *YEP_RESTRICT y, Yep64u *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two signed 64-bit integer arrays. Produces an array of signed 64-bit integer elements.
 * @param[in]	x	Pointer to the minuend array of signed 64-bit integer elements.
 * @param[in]	y	Pointer to the subtrahend array of signed 64-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a diff argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V64sV64s_V64s(const Yep64s *YEP_RESTRICT x, const Yep64s *YEP_RESTRICT y, Yep64s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two single precision (32-bit) floating-point arrays. Produces an array of single precision (32-bit) floating-point elements.
 * @param[in]	x	Pointer to the minuend array of single precision (32-bit) floating-point elements.
 * @param[in]	y	Pointer to the subtrahend array of single precision (32-bit) floating-point elements.
 * @param[out]	diff	Pointer to the difference array of single precision (32-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a diff argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V32fV32f_V32f(const Yep32f *YEP_RESTRICT x, const Yep32f *YEP_RESTRICT y, Yep32f *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two double precision (64-bit) floating-point arrays. Produces an array of double precision (64-bit) floating-point elements.
 * @param[in]	x	Pointer to the minuend array of double precision (64-bit) floating-point elements.
 * @param[in]	y	Pointer to the subtrahend array of double precision (64-bit) floating-point elements.
 * @param[out]	diff	Pointer to the difference array of double precision (64-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a diff argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V64fV64f_V64f(const Yep64f *YEP_RESTRICT x, const Yep64f *YEP_RESTRICT y, Yep64f *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from signed 8-bit integer array elements. Produces an array of signed 8-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of signed 8-bit integer elements.
 * @param[in]	y	The signed 8-bit integer constant to be subtracted.
 * @param[out]	diff	Pointer to the difference array of signed 8-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V8sS8s_V8s(const Yep8s *YEP_RESTRICT x, Yep8s y, Yep8s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from signed 8-bit integer array elements. Produces an array of signed 16-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of signed 8-bit integer elements.
 * @param[in]	y	The signed 8-bit integer constant to be subtracted.
 * @param[out]	diff	Pointer to the difference array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V8sS8s_V16s(const Yep8s *YEP_RESTRICT x, Yep8s y, Yep16s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from unsigned 8-bit integer array elements. Produces an array of unsigned 16-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of unsigned 8-bit integer elements.
 * @param[in]	y	The unsigned 8-bit integer constant to be subtracted.
 * @param[out]	diff	Pointer to the difference array of unsigned 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V8uS8u_V16u(const Yep8u *YEP_RESTRICT x, Yep8u y, Yep16u *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from signed 16-bit integer array elements. Produces an array of signed 16-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of signed 16-bit integer elements.
 * @param[in]	y	The signed 16-bit integer constant to be subtracted.
 * @param[out]	diff	Pointer to the difference array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V16sS16s_V16s(const Yep16s *YEP_RESTRICT x, Yep16s y, Yep16s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from signed 16-bit integer array elements. Produces an array of signed 32-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of signed 16-bit integer elements.
 * @param[in]	y	The signed 16-bit integer constant to be subtracted.
 * @param[out]	diff	Pointer to the difference array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V16sS16s_V32s(const Yep16s *YEP_RESTRICT x, Yep16s y, Yep32s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from unsigned 16-bit integer array elements. Produces an array of unsigned 32-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of unsigned 16-bit integer elements.
 * @param[in]	y	The unsigned 16-bit integer constant to be subtracted.
 * @param[out]	diff	Pointer to the difference array of unsigned 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V16uS16u_V32u(const Yep16u *YEP_RESTRICT x, Yep16u y, Yep32u *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from signed 32-bit integer array elements. Produces an array of signed 32-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of signed 32-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant to be subtracted.
 * @param[out]	diff	Pointer to the difference array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V32sS32s_V32s(const Yep32s *YEP_RESTRICT x, Yep32s y, Yep32s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from signed 32-bit integer array elements. Produces an array of signed 64-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of signed 32-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant to be subtracted.
 * @param[out]	diff	Pointer to the difference array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V32sS32s_V64s(const Yep32s *YEP_RESTRICT x, Yep32s y, Yep64s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from unsigned 32-bit integer array elements. Produces an array of unsigned 64-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of unsigned 32-bit integer elements.
 * @param[in]	y	The unsigned 32-bit integer constant to be subtracted.
 * @param[out]	diff	Pointer to the difference array of unsigned 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V32uS32u_V64u(const Yep32u *YEP_RESTRICT x, Yep32u y, Yep64u *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from signed 64-bit integer array elements. Produces an array of signed 64-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of signed 64-bit integer elements.
 * @param[in]	y	The signed 64-bit integer constant to be subtracted.
 * @param[out]	diff	Pointer to the difference array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V64sS64s_V64s(const Yep64s *YEP_RESTRICT x, Yep64s y, Yep64s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from single precision (32-bit) floating-point array elements. Produces an array of single precision (32-bit) floating-point elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of single precision (32-bit) floating-point elements.
 * @param[in]	y	The single precision (32-bit) floating-point constant to be subtracted.
 * @param[out]	diff	Pointer to the difference array of single precision (32-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V32fS32f_V32f(const Yep32f *YEP_RESTRICT x, Yep32f y, Yep32f *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from double precision (64-bit) floating-point array elements. Produces an array of double precision (64-bit) floating-point elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of double precision (64-bit) floating-point elements.
 * @param[in]	y	The double precision (64-bit) floating-point constant to be subtracted.
 * @param[out]	diff	Pointer to the difference array of double precision (64-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V64fS64f_V64f(const Yep64f *YEP_RESTRICT x, Yep64f y, Yep64f *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts signed 8-bit integer array elements from a constant. Produces an array of signed 8-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The signed 8-bit integer constant to be subtracted from.
 * @param[in]	y	Pointer to the subtrahend array of signed 8-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of signed 8-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a y and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S8sV8s_V8s(Yep8s x, const Yep8s *YEP_RESTRICT y, Yep8s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts signed 8-bit integer array elements from a constant. Produces an array of signed 16-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The signed 8-bit integer constant to be subtracted from.
 * @param[in]	y	Pointer to the subtrahend array of signed 8-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a y and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S8sV8s_V16s(Yep8s x, const Yep8s *YEP_RESTRICT y, Yep16s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts unsigned 8-bit integer array elements from a constant. Produces an array of unsigned 16-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The unsigned 8-bit integer constant to be subtracted from.
 * @param[in]	y	Pointer to the subtrahend array of unsigned 8-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of unsigned 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a y and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S8uV8u_V16u(Yep8u x, const Yep8u *YEP_RESTRICT y, Yep16u *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts signed 16-bit integer array elements from a constant. Produces an array of signed 16-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The signed 16-bit integer constant to be subtracted from.
 * @param[in]	y	Pointer to the subtrahend array of signed 16-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a y and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S16sV16s_V16s(Yep16s x, const Yep16s *YEP_RESTRICT y, Yep16s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts signed 16-bit integer array elements from a constant. Produces an array of signed 32-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The signed 16-bit integer constant to be subtracted from.
 * @param[in]	y	Pointer to the subtrahend array of signed 16-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a y and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S16sV16s_V32s(Yep16s x, const Yep16s *YEP_RESTRICT y, Yep32s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts unsigned 16-bit integer array elements from a constant. Produces an array of unsigned 32-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The unsigned 16-bit integer constant to be subtracted from.
 * @param[in]	y	Pointer to the subtrahend array of unsigned 16-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of unsigned 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a y and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S16uV16u_V32u(Yep16u x, const Yep16u *YEP_RESTRICT y, Yep32u *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts signed 32-bit integer array elements from a constant. Produces an array of signed 32-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The signed 32-bit integer constant to be subtracted from.
 * @param[in]	y	Pointer to the subtrahend array of signed 32-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a y and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S32sV32s_V32s(Yep32s x, const Yep32s *YEP_RESTRICT y, Yep32s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts signed 32-bit integer array elements from a constant. Produces an array of signed 64-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The signed 32-bit integer constant to be subtracted from.
 * @param[in]	y	Pointer to the subtrahend array of signed 32-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a y and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S32sV32s_V64s(Yep32s x, const Yep32s *YEP_RESTRICT y, Yep64s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts unsigned 32-bit integer array elements from a constant. Produces an array of unsigned 64-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The unsigned 32-bit integer constant to be subtracted from.
 * @param[in]	y	Pointer to the subtrahend array of unsigned 32-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of unsigned 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a y and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S32uV32u_V64u(Yep32u x, const Yep32u *YEP_RESTRICT y, Yep64u *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts signed 64-bit integer array elements from a constant. Produces an array of signed 64-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The signed 64-bit integer constant to be subtracted from.
 * @param[in]	y	Pointer to the subtrahend array of signed 64-bit integer elements.
 * @param[out]	diff	Pointer to the difference array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a y and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S64sV64s_V64s(Yep64s x, const Yep64s *YEP_RESTRICT y, Yep64s *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts single precision (32-bit) floating-point array elements from a constant. Produces an array of single precision (32-bit) floating-point elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The single precision (32-bit) floating-point constant to be subtracted from.
 * @param[in]	y	Pointer to the subtrahend array of single precision (32-bit) floating-point elements.
 * @param[out]	diff	Pointer to the difference array of single precision (32-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a y and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S32fV32f_V32f(Yep32f x, const Yep32f *YEP_RESTRICT y, Yep32f *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts double precision (64-bit) floating-point array elements from a constant. Produces an array of double precision (64-bit) floating-point elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The double precision (64-bit) floating-point constant to be subtracted from.
 * @param[in]	y	Pointer to the subtrahend array of double precision (64-bit) floating-point elements.
 * @param[out]	diff	Pointer to the difference array of double precision (64-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a y and @a diff.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y or @a diff argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y or @a diff argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S64fV64f_V64f(Yep64f x, const Yep64f *YEP_RESTRICT y, Yep64f *YEP_RESTRICT diff, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the minuend array of signed 8-bit integer elements.
 * @param[in]	y	Pointer to the subtrahend array of signed 8-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_IV8sV8s_IV8s(Yep8s *YEP_RESTRICT x, const Yep8s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the minuend array of signed 16-bit integer elements.
 * @param[in]	y	Pointer to the subtrahend array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_IV16sV16s_IV16s(Yep16s *YEP_RESTRICT x, const Yep16s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the minuend array of signed 32-bit integer elements.
 * @param[in]	y	Pointer to the subtrahend array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_IV32sV32s_IV32s(Yep32s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the minuend array of signed 64-bit integer elements.
 * @param[in]	y	Pointer to the subtrahend array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_IV64sV64s_IV64s(Yep64s *YEP_RESTRICT x, const Yep64s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the minuend array of single precision (32-bit) floating-point elements.
 * @param[in]	y	Pointer to the subtrahend array of single precision (32-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_IV32fV32f_IV32f(Yep32f *YEP_RESTRICT x, const Yep32f *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the minuend array of double precision (64-bit) floating-point elements.
 * @param[in]	y	Pointer to the subtrahend array of double precision (64-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_IV64fV64f_IV64f(Yep64f *YEP_RESTRICT x, const Yep64f *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two signed 8-bit integer arrays and writes the result to the second array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of signed 8-bit integer elements.
 * @param[in,out]	y	Pointer to the subtrahend array of signed 8-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V8sIV8s_IV8s(const Yep8s *YEP_RESTRICT x, Yep8s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two signed 16-bit integer arrays and writes the result to the second array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of signed 16-bit integer elements.
 * @param[in,out]	y	Pointer to the subtrahend array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V16sIV16s_IV16s(const Yep16s *YEP_RESTRICT x, Yep16s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two signed 32-bit integer arrays and writes the result to the second array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of signed 32-bit integer elements.
 * @param[in,out]	y	Pointer to the subtrahend array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V32sIV32s_IV32s(const Yep32s *YEP_RESTRICT x, Yep32s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two signed 64-bit integer arrays and writes the result to the second array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of signed 64-bit integer elements.
 * @param[in,out]	y	Pointer to the subtrahend array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V64sIV64s_IV64s(const Yep64s *YEP_RESTRICT x, Yep64s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the second array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of single precision (32-bit) floating-point elements.
 * @param[in,out]	y	Pointer to the subtrahend array of single precision (32-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V32fIV32f_IV32f(const Yep32f *YEP_RESTRICT x, Yep32f *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the second array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the minuend array of double precision (64-bit) floating-point elements.
 * @param[in,out]	y	Pointer to the subtrahend array of double precision (64-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_V64fIV64f_IV64f(const Yep64f *YEP_RESTRICT x, Yep64f *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from signed 8-bit integer array elements and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the minuend array of signed 8-bit integer elements.
 * @param[in]	y	The signed 8-bit integer constant to be subtracted.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_IV8sS8s_IV8s(Yep8s *YEP_RESTRICT x, Yep8s y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from signed 16-bit integer array elements and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the minuend array of signed 16-bit integer elements.
 * @param[in]	y	The signed 16-bit integer constant to be subtracted.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_IV16sS16s_IV16s(Yep16s *YEP_RESTRICT x, Yep16s y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from signed 32-bit integer array elements and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the minuend array of signed 32-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant to be subtracted.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_IV32sS32s_IV32s(Yep32s *YEP_RESTRICT x, Yep32s y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from signed 64-bit integer array elements and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the minuend array of signed 64-bit integer elements.
 * @param[in]	y	The signed 64-bit integer constant to be subtracted.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_IV64sS64s_IV64s(Yep64s *YEP_RESTRICT x, Yep64s y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from single precision (32-bit) floating-point array elements and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the minuend array of single precision (32-bit) floating-point elements.
 * @param[in]	y	The single precision (32-bit) floating-point constant to be subtracted.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_IV32fS32f_IV32f(Yep32f *YEP_RESTRICT x, Yep32f y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts a constant from double precision (64-bit) floating-point array elements and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the minuend array of double precision (64-bit) floating-point elements.
 * @param[in]	y	The double precision (64-bit) floating-point constant to be subtracted.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_IV64fS64f_IV64f(Yep64f *YEP_RESTRICT x, Yep64f y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts signed 8-bit integer array elements from a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The signed 8-bit integer constant to be subtracted from.
 * @param[in,out]	y	Pointer to the subtrahend array of signed 8-bit integer elements.
 * @param[in]	length	Length of the array specified by @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S8sIV8s_IV8s(Yep8s x, Yep8s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts signed 16-bit integer array elements from a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The signed 16-bit integer constant to be subtracted from.
 * @param[in,out]	y	Pointer to the subtrahend array of signed 16-bit integer elements.
 * @param[in]	length	Length of the array specified by @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S16sIV16s_IV16s(Yep16s x, Yep16s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts signed 32-bit integer array elements from a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The signed 32-bit integer constant to be subtracted from.
 * @param[in,out]	y	Pointer to the subtrahend array of signed 32-bit integer elements.
 * @param[in]	length	Length of the array specified by @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S32sIV32s_IV32s(Yep32s x, Yep32s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts signed 64-bit integer array elements from a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The signed 64-bit integer constant to be subtracted from.
 * @param[in,out]	y	Pointer to the subtrahend array of signed 64-bit integer elements.
 * @param[in]	length	Length of the array specified by @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S64sIV64s_IV64s(Yep64s x, Yep64s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts single precision (32-bit) floating-point array elements from a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The single precision (32-bit) floating-point constant to be subtracted from.
 * @param[in,out]	y	Pointer to the subtrahend array of single precision (32-bit) floating-point elements.
 * @param[in]	length	Length of the array specified by @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S32fIV32f_IV32f(Yep32f x, Yep32f *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Subtract
 * @brief	Subtracts double precision (64-bit) floating-point array elements from a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	The double precision (64-bit) floating-point constant to be subtracted from.
 * @param[in,out]	y	Pointer to the subtrahend array of double precision (64-bit) floating-point elements.
 * @param[in]	length	Length of the array specified by @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Subtract_S64fIV64f_IV64f(Yep64f x, Yep64f *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup yepCore
 * @defgroup yepCore_Negate	Negation
 */

/**
 * @ingroup	yepCore_Negate
 * @brief	Negates elements in signed 8-bit integer array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the array of signed 8-bit integer elements to be negated.
 * @param[out]	y	Pointer to the signed 8-bit integer array to store negated elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Negate_V8s_V8s(const Yep8s *YEP_RESTRICT x, Yep8s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Negate
 * @brief	Negates elements in signed 16-bit integer array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the array of signed 16-bit integer elements to be negated.
 * @param[out]	y	Pointer to the signed 16-bit integer array to store negated elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Negate_V16s_V16s(const Yep16s *YEP_RESTRICT x, Yep16s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Negate
 * @brief	Negates elements in signed 32-bit integer array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the array of signed 32-bit integer elements to be negated.
 * @param[out]	y	Pointer to the signed 32-bit integer array to store negated elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Negate_V32s_V32s(const Yep32s *YEP_RESTRICT x, Yep32s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Negate
 * @brief	Negates elements in signed 64-bit integer array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the array of signed 64-bit integer elements to be negated.
 * @param[out]	y	Pointer to the signed 64-bit integer array to store negated elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Negate_V64s_V64s(const Yep64s *YEP_RESTRICT x, Yep64s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Negate
 * @brief	Negates elements in single precision (32-bit) floating-point array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the array of single precision (32-bit) floating-point elements to be negated.
 * @param[out]	y	Pointer to the single precision (32-bit) floating-point array to store negated elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Negate_V32f_V32f(const Yep32f *YEP_RESTRICT x, Yep32f *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Negate
 * @brief	Negates elements in double precision (64-bit) floating-point array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the array of double precision (64-bit) floating-point elements to be negated.
 * @param[out]	y	Pointer to the double precision (64-bit) floating-point array to store negated elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Negate_V64f_V64f(const Yep64f *YEP_RESTRICT x, Yep64f *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Negate
 * @brief	Negates elements in signed 8-bit integer array and writes the results to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	v	Pointer to the array of signed 8-bit integer elements to be negated.
 * @param[in]	length	Length of the array specified by @a v.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Negate_IV8s_IV8s(Yep8s *YEP_RESTRICT v, YepSize length);
/**
 * @ingroup	yepCore_Negate
 * @brief	Negates elements in signed 16-bit integer array and writes the results to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	v	Pointer to the array of signed 16-bit integer elements to be negated.
 * @param[in]	length	Length of the array specified by @a v.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Negate_IV16s_IV16s(Yep16s *YEP_RESTRICT v, YepSize length);
/**
 * @ingroup	yepCore_Negate
 * @brief	Negates elements in signed 32-bit integer array and writes the results to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	v	Pointer to the array of signed 32-bit integer elements to be negated.
 * @param[in]	length	Length of the array specified by @a v.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Negate_IV32s_IV32s(Yep32s *YEP_RESTRICT v, YepSize length);
/**
 * @ingroup	yepCore_Negate
 * @brief	Negates elements in signed 64-bit integer array and writes the results to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	v	Pointer to the array of signed 64-bit integer elements to be negated.
 * @param[in]	length	Length of the array specified by @a v.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Negate_IV64s_IV64s(Yep64s *YEP_RESTRICT v, YepSize length);
/**
 * @ingroup	yepCore_Negate
 * @brief	Negates elements in single precision (32-bit) floating-point array and writes the results to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	v	Pointer to the array of single precision (32-bit) floating-point elements to be negated.
 * @param[in]	length	Length of the array specified by @a v.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Negate_IV32f_IV32f(Yep32f *YEP_RESTRICT v, YepSize length);
/**
 * @ingroup	yepCore_Negate
 * @brief	Negates elements in double precision (64-bit) floating-point array and writes the results to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	v	Pointer to the array of double precision (64-bit) floating-point elements to be negated.
 * @param[in]	length	Length of the array specified by @a v.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Negate_IV64f_IV64f(Yep64f *YEP_RESTRICT v, YepSize length);
/**
 * @ingroup yepCore
 * @defgroup yepCore_Multiply	Multiplication
 */

/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiples corresponding elements in two signed 8-bit integer arrays, producing an array of signed 8-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first factor array of signed 8-bit integer elements.
 * @param[in]	y	Pointer to the second factor array of signed 8-bit integer elements.
 * @param[out]	product	Pointer to the product array of signed 8-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a product argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V8sV8s_V8s(const Yep8s *YEP_RESTRICT x, const Yep8s *YEP_RESTRICT y, Yep8s *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiples corresponding elements in two signed 8-bit integer arrays, producing an array of signed 16-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first factor array of signed 8-bit integer elements.
 * @param[in]	y	Pointer to the second factor array of signed 8-bit integer elements.
 * @param[out]	product	Pointer to the product array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a product argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V8sV8s_V16s(const Yep8s *YEP_RESTRICT x, const Yep8s *YEP_RESTRICT y, Yep16s *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiples corresponding elements in two unsigned 8-bit integer arrays, producing an array of unsigned 16-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first factor array of unsigned 8-bit integer elements.
 * @param[in]	y	Pointer to the second factor array of unsigned 8-bit integer elements.
 * @param[out]	product	Pointer to the product array of unsigned 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a product argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V8uV8u_V16u(const Yep8u *YEP_RESTRICT x, const Yep8u *YEP_RESTRICT y, Yep16u *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiples corresponding elements in two signed 16-bit integer arrays, producing an array of signed 16-bit integer elements.
 * @param[in]	x	Pointer to the first factor array of signed 16-bit integer elements.
 * @param[in]	y	Pointer to the second factor array of signed 16-bit integer elements.
 * @param[out]	product	Pointer to the product array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a product argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V16sV16s_V16s(const Yep16s *YEP_RESTRICT x, const Yep16s *YEP_RESTRICT y, Yep16s *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiples corresponding elements in two signed 16-bit integer arrays, producing an array of signed 32-bit integer elements.
 * @param[in]	x	Pointer to the first factor array of signed 16-bit integer elements.
 * @param[in]	y	Pointer to the second factor array of signed 16-bit integer elements.
 * @param[out]	product	Pointer to the product array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a product argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V16sV16s_V32s(const Yep16s *YEP_RESTRICT x, const Yep16s *YEP_RESTRICT y, Yep32s *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiples corresponding elements in two unsigned 16-bit integer arrays, producing an array of unsigned 32-bit integer elements.
 * @param[in]	x	Pointer to the first factor array of unsigned 16-bit integer elements.
 * @param[in]	y	Pointer to the second factor array of unsigned 16-bit integer elements.
 * @param[out]	product	Pointer to the product array of unsigned 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a product argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V16uV16u_V32u(const Yep16u *YEP_RESTRICT x, const Yep16u *YEP_RESTRICT y, Yep32u *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiples corresponding elements in two signed 32-bit integer arrays, producing an array of signed 32-bit integer elements.
 * @param[in]	x	Pointer to the first factor array of signed 32-bit integer elements.
 * @param[in]	y	Pointer to the second factor array of signed 32-bit integer elements.
 * @param[out]	product	Pointer to the product array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a product argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V32sV32s_V32s(const Yep32s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, Yep32s *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiples corresponding elements in two signed 32-bit integer arrays, producing an array of signed 64-bit integer elements.
 * @param[in]	x	Pointer to the first factor array of signed 32-bit integer elements.
 * @param[in]	y	Pointer to the second factor array of signed 32-bit integer elements.
 * @param[out]	product	Pointer to the product array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a product argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V32sV32s_V64s(const Yep32s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, Yep64s *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiples corresponding elements in two unsigned 32-bit integer arrays, producing an array of unsigned 64-bit integer elements.
 * @param[in]	x	Pointer to the first factor array of unsigned 32-bit integer elements.
 * @param[in]	y	Pointer to the second factor array of unsigned 32-bit integer elements.
 * @param[out]	product	Pointer to the product array of unsigned 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a product argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V32uV32u_V64u(const Yep32u *YEP_RESTRICT x, const Yep32u *YEP_RESTRICT y, Yep64u *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiples corresponding elements in two signed 64-bit integer arrays, producing an array of signed 64-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first factor array of signed 64-bit integer elements.
 * @param[in]	y	Pointer to the second factor array of signed 64-bit integer elements.
 * @param[out]	product	Pointer to the product array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a product argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V64sV64s_V64s(const Yep64s *YEP_RESTRICT x, const Yep64s *YEP_RESTRICT y, Yep64s *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiples corresponding elements in two single precision (32-bit) floating-point arrays, producing an array of single precision (32-bit) floating-point elements.
 * @param[in]	x	Pointer to the first factor array of single precision (32-bit) floating-point elements.
 * @param[in]	y	Pointer to the second factor array of single precision (32-bit) floating-point elements.
 * @param[out]	product	Pointer to the product array of single precision (32-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a product argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V32fV32f_V32f(const Yep32f *YEP_RESTRICT x, const Yep32f *YEP_RESTRICT y, Yep32f *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiples corresponding elements in two double precision (64-bit) floating-point arrays, producing an array of double precision (64-bit) floating-point elements.
 * @param[in]	x	Pointer to the first factor array of double precision (64-bit) floating-point elements.
 * @param[in]	y	Pointer to the second factor array of double precision (64-bit) floating-point elements.
 * @param[out]	product	Pointer to the product array of double precision (64-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a product argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V64fV64f_V64f(const Yep64f *YEP_RESTRICT x, const Yep64f *YEP_RESTRICT y, Yep64f *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies signed 8-bit integer array elements by a constant. Produces an array of signed 8-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the factor array of signed 8-bit integer elements.
 * @param[in]	y	The signed 8-bit integer constant to be multiplied by.
 * @param[out]	product	Pointer to the product array of signed 8-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a product argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V8sS8s_V8s(const Yep8s *YEP_RESTRICT x, Yep8s y, Yep8s *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies signed 8-bit integer array elements by a constant. Produces an array of signed 16-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the factor array of signed 8-bit integer elements.
 * @param[in]	y	The signed 8-bit integer constant to be multiplied by.
 * @param[out]	product	Pointer to the product array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a product argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V8sS8s_V16s(const Yep8s *YEP_RESTRICT x, Yep8s y, Yep16s *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies unsigned 8-bit integer array elements by a constant. Produces an array of unsigned 16-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the factor array of unsigned 8-bit integer elements.
 * @param[in]	y	The unsigned 8-bit integer constant to be multiplied by.
 * @param[out]	product	Pointer to the product array of unsigned 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a product argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V8uS8u_V16u(const Yep8u *YEP_RESTRICT x, Yep8u y, Yep16u *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies signed 16-bit integer array elements by a constant. Produces an array of signed 16-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the factor array of signed 16-bit integer elements.
 * @param[in]	y	The signed 16-bit integer constant to be multiplied by.
 * @param[out]	product	Pointer to the product array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a product argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V16sS16s_V16s(const Yep16s *YEP_RESTRICT x, Yep16s y, Yep16s *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies signed 16-bit integer array elements by a constant. Produces an array of signed 32-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the factor array of signed 16-bit integer elements.
 * @param[in]	y	The signed 16-bit integer constant to be multiplied by.
 * @param[out]	product	Pointer to the product array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a product argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V16sS16s_V32s(const Yep16s *YEP_RESTRICT x, Yep16s y, Yep32s *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies unsigned 16-bit integer array elements by a constant. Produces an array of unsigned 32-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the factor array of unsigned 16-bit integer elements.
 * @param[in]	y	The unsigned 16-bit integer constant to be multiplied by.
 * @param[out]	product	Pointer to the product array of unsigned 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a product argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V16uS16u_V32u(const Yep16u *YEP_RESTRICT x, Yep16u y, Yep32u *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies signed 32-bit integer array elements by a constant. Produces an array of signed 32-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the factor array of signed 32-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant to be multiplied by.
 * @param[out]	product	Pointer to the product array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a product argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V32sS32s_V32s(const Yep32s *YEP_RESTRICT x, Yep32s y, Yep32s *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies signed 32-bit integer array elements by a constant. Produces an array of signed 64-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the factor array of signed 32-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant to be multiplied by.
 * @param[out]	product	Pointer to the product array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a product argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V32sS32s_V64s(const Yep32s *YEP_RESTRICT x, Yep32s y, Yep64s *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies unsigned 32-bit integer array elements by a constant. Produces an array of unsigned 64-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the factor array of unsigned 32-bit integer elements.
 * @param[in]	y	The unsigned 32-bit integer constant to be multiplied by.
 * @param[out]	product	Pointer to the product array of unsigned 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a product argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V32uS32u_V64u(const Yep32u *YEP_RESTRICT x, Yep32u y, Yep64u *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies signed 64-bit integer array elements by a constant. Produces an array of signed 64-bit integer elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the factor array of signed 64-bit integer elements.
 * @param[in]	y	The signed 64-bit integer constant to be multiplied by.
 * @param[out]	product	Pointer to the product array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a product argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V64sS64s_V64s(const Yep64s *YEP_RESTRICT x, Yep64s y, Yep64s *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies single precision (32-bit) floating-point array elements by a constant. Produces an array of single precision (32-bit) floating-point elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the factor array of single precision (32-bit) floating-point elements.
 * @param[in]	y	The single precision (32-bit) floating-point constant to be multiplied by.
 * @param[out]	product	Pointer to the product array of single precision (32-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a product argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V32fS32f_V32f(const Yep32f *YEP_RESTRICT x, Yep32f y, Yep32f *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies double precision (64-bit) floating-point array elements by a constant. Produces an array of double precision (64-bit) floating-point elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the factor array of double precision (64-bit) floating-point elements.
 * @param[in]	y	The double precision (64-bit) floating-point constant to be multiplied by.
 * @param[out]	product	Pointer to the product array of double precision (64-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a product.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a product argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a product argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_V64fS64f_V64f(const Yep64f *YEP_RESTRICT x, Yep64f y, Yep64f *YEP_RESTRICT product, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first factor array of signed 8-bit integer elements.
 * @param[in]	y	Pointer to the second factor array of signed 8-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_IV8sV8s_IV8s(Yep8s *YEP_RESTRICT x, const Yep8s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first factor array of signed 16-bit integer elements.
 * @param[in]	y	Pointer to the second factor array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_IV16sV16s_IV16s(Yep16s *YEP_RESTRICT x, const Yep16s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first factor array of signed 32-bit integer elements.
 * @param[in]	y	Pointer to the second factor array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_IV32sV32s_IV32s(Yep32s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first factor array of signed 64-bit integer elements.
 * @param[in]	y	Pointer to the second factor array of signed 64-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_IV64sV64s_IV64s(Yep64s *YEP_RESTRICT x, const Yep64s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first factor array of single precision (32-bit) floating-point elements.
 * @param[in]	y	Pointer to the second factor array of single precision (32-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_IV32fV32f_IV32f(Yep32f *YEP_RESTRICT x, const Yep32f *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first factor array of double precision (64-bit) floating-point elements.
 * @param[in]	y	Pointer to the second factor array of double precision (64-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_IV64fV64f_IV64f(Yep64f *YEP_RESTRICT x, const Yep64f *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies signed 8-bit integer array elements by a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the factor array of signed 8-bit integer elements.
 * @param[in]	y	The signed 8-bit integer constant factor.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_IV8sS8s_IV8s(Yep8s *YEP_RESTRICT x, Yep8s y, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies signed 16-bit integer array elements by a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the factor array of signed 16-bit integer elements.
 * @param[in]	y	The signed 16-bit integer constant factor.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_IV16sS16s_IV16s(Yep16s *YEP_RESTRICT x, Yep16s y, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies signed 32-bit integer array elements by a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the factor array of signed 32-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant factor.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_IV32sS32s_IV32s(Yep32s *YEP_RESTRICT x, Yep32s y, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies signed 64-bit integer array elements by a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the factor array of signed 64-bit integer elements.
 * @param[in]	y	The signed 64-bit integer constant factor.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_IV64sS64s_IV64s(Yep64s *YEP_RESTRICT x, Yep64s y, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies single precision (32-bit) floating-point array elements by a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the factor array of single precision (32-bit) floating-point elements.
 * @param[in]	y	The single precision (32-bit) floating-point constant factor.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_IV32fS32f_IV32f(Yep32f *YEP_RESTRICT x, Yep32f y, YepSize length);
/**
 * @ingroup	yepCore_Multiply
 * @brief	Multiplies double precision (64-bit) floating-point array elements by a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the factor array of double precision (64-bit) floating-point elements.
 * @param[in]	y	The double precision (64-bit) floating-point constant factor.
 * @param[in]	length	Length of the array specified by @a x.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Multiply_IV64fS64f_IV64f(Yep64f *YEP_RESTRICT x, Yep64f y, YepSize length);
/**
 * @ingroup yepCore
 * @defgroup yepCore_Min	Minimum
 */

/**
 * @ingroup	yepCore_Min
 * @brief	Computes the minimum of signed 8-bit integer array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose minimum will be computed.
 * @param[out]	minimum	Pointer to the variable where the minimum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a minimum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V8s_S8s(const Yep8s *YEP_RESTRICT v, Yep8s *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes the minimum of unsigned 8-bit integer array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose minimum will be computed.
 * @param[out]	minimum	Pointer to the variable where the minimum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a minimum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V8u_S8u(const Yep8u *YEP_RESTRICT v, Yep8u *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes the minimum of signed 16-bit integer array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose minimum will be computed.
 * @param[out]	minimum	Pointer to the variable where the minimum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a minimum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V16s_S16s(const Yep16s *YEP_RESTRICT v, Yep16s *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes the minimum of unsigned 16-bit integer array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose minimum will be computed.
 * @param[out]	minimum	Pointer to the variable where the minimum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a minimum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V16u_S16u(const Yep16u *YEP_RESTRICT v, Yep16u *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes the minimum of signed 32-bit integer array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose minimum will be computed.
 * @param[out]	minimum	Pointer to the variable where the minimum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a minimum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V32s_S32s(const Yep32s *YEP_RESTRICT v, Yep32s *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes the minimum of unsigned 32-bit integer array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose minimum will be computed.
 * @param[out]	minimum	Pointer to the variable where the minimum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a minimum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V32u_S32u(const Yep32u *YEP_RESTRICT v, Yep32u *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes the minimum of signed 64-bit integer array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose minimum will be computed.
 * @param[out]	minimum	Pointer to the variable where the minimum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a minimum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V64s_S64s(const Yep64s *YEP_RESTRICT v, Yep64s *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes the minimum of unsigned 64-bit integer array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose minimum will be computed.
 * @param[out]	minimum	Pointer to the variable where the minimum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a minimum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V64u_S64u(const Yep64u *YEP_RESTRICT v, Yep64u *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes the minimum of single precision (32-bit) floating-point array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose minimum will be computed.
 * @param[out]	minimum	Pointer to the variable where the minimum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a minimum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V32f_S32f(const Yep32f *YEP_RESTRICT v, Yep32f *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes the minimum of double precision (64-bit) floating-point array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose minimum will be computed.
 * @param[out]	minimum	Pointer to the variable where the minimum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a minimum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V64f_S64f(const Yep64f *YEP_RESTRICT v, Yep64f *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two signed 8-bit integer arrays.
 * @param[in]	x	Pointer to the first array of signed 8-bit integer elements.
 * @param[in]	y	Pointer to the second array of signed 8-bit integer elements.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a minimum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V8sV8s_V8s(const Yep8s *YEP_RESTRICT x, const Yep8s *YEP_RESTRICT y, Yep8s *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two unsigned 8-bit integer arrays.
 * @param[in]	x	Pointer to the first array of unsigned 8-bit integer elements.
 * @param[in]	y	Pointer to the second array of unsigned 8-bit integer elements.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a minimum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V8uV8u_V8u(const Yep8u *YEP_RESTRICT x, const Yep8u *YEP_RESTRICT y, Yep8u *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two signed 16-bit integer arrays.
 * @param[in]	x	Pointer to the first array of signed 16-bit integer elements.
 * @param[in]	y	Pointer to the second array of signed 16-bit integer elements.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a minimum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V16sV16s_V16s(const Yep16s *YEP_RESTRICT x, const Yep16s *YEP_RESTRICT y, Yep16s *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two unsigned 16-bit integer arrays.
 * @param[in]	x	Pointer to the first array of unsigned 16-bit integer elements.
 * @param[in]	y	Pointer to the second array of unsigned 16-bit integer elements.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a minimum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V16uV16u_V16u(const Yep16u *YEP_RESTRICT x, const Yep16u *YEP_RESTRICT y, Yep16u *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two signed 32-bit integer arrays.
 * @param[in]	x	Pointer to the first array of signed 32-bit integer elements.
 * @param[in]	y	Pointer to the second array of signed 32-bit integer elements.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a minimum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V32sV32s_V32s(const Yep32s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, Yep32s *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two unsigned 32-bit integer arrays.
 * @param[in]	x	Pointer to the first array of unsigned 32-bit integer elements.
 * @param[in]	y	Pointer to the second array of unsigned 32-bit integer elements.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a minimum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V32uV32u_V32u(const Yep32u *YEP_RESTRICT x, const Yep32u *YEP_RESTRICT y, Yep32u *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two signed 64-bit integer arrays.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of signed 64-bit integer elements.
 * @param[in]	y	Pointer to the second array of signed 32-bit integer elements.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a minimum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V64sV32s_V64s(const Yep64s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, Yep64s *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two unsigned 64-bit integer arrays.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of unsigned 64-bit integer elements.
 * @param[in]	y	Pointer to the second array of unsigned 32-bit integer elements.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a minimum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V64uV32u_V64u(const Yep64u *YEP_RESTRICT x, const Yep32u *YEP_RESTRICT y, Yep64u *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two single precision (32-bit) floating-point arrays.
 * @param[in]	x	Pointer to the first array of single precision (32-bit) floating-point elements.
 * @param[in]	y	Pointer to the second array of single precision (32-bit) floating-point elements.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a minimum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V32fV32f_V32f(const Yep32f *YEP_RESTRICT x, const Yep32f *YEP_RESTRICT y, Yep32f *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two double precision (64-bit) floating-point arrays.
 * @param[in]	x	Pointer to the first array of double precision (64-bit) floating-point elements.
 * @param[in]	y	Pointer to the second array of double precision (64-bit) floating-point elements.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a minimum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V64fV64f_V64f(const Yep64f *YEP_RESTRICT x, const Yep64f *YEP_RESTRICT y, Yep64f *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of signed 8-bit integer array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of signed 8-bit integer elements.
 * @param[in]	y	The signed 8-bit integer constant.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a minimum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V8sS8s_V8s(const Yep8s *YEP_RESTRICT x, Yep8s y, Yep8s *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of unsigned 8-bit integer array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of unsigned 8-bit integer elements.
 * @param[in]	y	The unsigned 8-bit integer constant.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a minimum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V8uS8u_V8u(const Yep8u *YEP_RESTRICT x, Yep8u y, Yep8u *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of signed 16-bit integer array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of signed 16-bit integer elements.
 * @param[in]	y	The signed 16-bit integer constant.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a minimum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V16sS16s_V16s(const Yep16s *YEP_RESTRICT x, Yep16s y, Yep16s *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of unsigned 16-bit integer array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of unsigned 16-bit integer elements.
 * @param[in]	y	The unsigned 16-bit integer constant.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a minimum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V16uS16u_V16u(const Yep16u *YEP_RESTRICT x, Yep16u y, Yep16u *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of signed 32-bit integer array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of signed 32-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a minimum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V32sS32s_V32s(const Yep32s *YEP_RESTRICT x, Yep32s y, Yep32s *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of unsigned 32-bit integer array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of unsigned 32-bit integer elements.
 * @param[in]	y	The unsigned 32-bit integer constant.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a minimum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V32uS32u_V32u(const Yep32u *YEP_RESTRICT x, Yep32u y, Yep32u *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of signed 64-bit integer array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of signed 64-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a minimum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V64sS32s_V64s(const Yep64s *YEP_RESTRICT x, Yep32s y, Yep64s *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of unsigned 64-bit integer array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of unsigned 64-bit integer elements.
 * @param[in]	y	The unsigned 32-bit integer constant.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a minimum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V64uS32u_V64u(const Yep64u *YEP_RESTRICT x, Yep32u y, Yep64u *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of single precision (32-bit) floating-point array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of single precision (32-bit) floating-point elements.
 * @param[in]	y	The single precision (32-bit) floating-point constant.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a minimum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V32fS32f_V32f(const Yep32f *YEP_RESTRICT x, Yep32f y, Yep32f *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of double precision (64-bit) floating-point array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of double precision (64-bit) floating-point elements.
 * @param[in]	y	The double precision (64-bit) floating-point constant.
 * @param[out]	minimum	Pointer to the array of pairwise minimum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a minimum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a minimum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_V64fS64f_V64f(const Yep64f *YEP_RESTRICT x, Yep64f y, Yep64f *YEP_RESTRICT minimum, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of signed 8-bit integer elements.
 * @param[in]	y	Pointer to the second array of signed 8-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV8sV8s_IV8s(Yep8s *YEP_RESTRICT x, const Yep8s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two unsigned 8-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of unsigned 8-bit integer elements.
 * @param[in]	y	Pointer to the second array of unsigned 8-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV8uV8u_IV8u(Yep8u *YEP_RESTRICT x, const Yep8u *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of signed 16-bit integer elements.
 * @param[in]	y	Pointer to the second array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV16sV16s_IV16s(Yep16s *YEP_RESTRICT x, const Yep16s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two unsigned 16-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of unsigned 16-bit integer elements.
 * @param[in]	y	Pointer to the second array of unsigned 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV16uV16u_IV16u(Yep16u *YEP_RESTRICT x, const Yep16u *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of signed 32-bit integer elements.
 * @param[in]	y	Pointer to the second array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV32sV32s_IV32s(Yep32s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two unsigned 32-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of unsigned 32-bit integer elements.
 * @param[in]	y	Pointer to the second array of unsigned 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV32uV32u_IV32u(Yep32u *YEP_RESTRICT x, const Yep32u *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of signed 64-bit integer elements.
 * @param[in]	y	Pointer to the second array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV64sV32s_IV64s(Yep64s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two unsigned 64-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of unsigned 64-bit integer elements.
 * @param[in]	y	Pointer to the second array of unsigned 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV64uV32u_IV64u(Yep64u *YEP_RESTRICT x, const Yep32u *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of single precision (32-bit) floating-point elements.
 * @param[in]	y	Pointer to the second array of single precision (32-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV32fV32f_IV32f(Yep32f *YEP_RESTRICT x, const Yep32f *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of double precision (64-bit) floating-point elements.
 * @param[in]	y	Pointer to the second array of double precision (64-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV64fV64f_IV64f(Yep64f *YEP_RESTRICT x, const Yep64f *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of signed 8-bit integer array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of signed 8-bit integer elements.
 * @param[in]	y	The signed 8-bit integer constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV8sS8s_IV8s(Yep8s *YEP_RESTRICT x, Yep8s y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of unsigned 8-bit integer array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of unsigned 8-bit integer elements.
 * @param[in]	y	The unsigned 8-bit integer constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV8uS8u_IV8u(Yep8u *YEP_RESTRICT x, Yep8u y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of signed 16-bit integer array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of signed 16-bit integer elements.
 * @param[in]	y	The signed 16-bit integer constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV16sS16s_IV16s(Yep16s *YEP_RESTRICT x, Yep16s y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of unsigned 16-bit integer array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of unsigned 16-bit integer elements.
 * @param[in]	y	The unsigned 16-bit integer constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV16uS16u_IV16u(Yep16u *YEP_RESTRICT x, Yep16u y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of signed 32-bit integer array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of signed 32-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV32sS32s_IV32s(Yep32s *YEP_RESTRICT x, Yep32s y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of unsigned 32-bit integer array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of unsigned 32-bit integer elements.
 * @param[in]	y	The unsigned 32-bit integer constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV32uS32u_IV32u(Yep32u *YEP_RESTRICT x, Yep32u y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of signed 64-bit integer array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of signed 64-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV64sS32s_IV64s(Yep64s *YEP_RESTRICT x, Yep32s y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of unsigned 64-bit integer array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of unsigned 64-bit integer elements.
 * @param[in]	y	The unsigned 32-bit integer constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV64uS32u_IV64u(Yep64u *YEP_RESTRICT x, Yep32u y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of single precision (32-bit) floating-point array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of single precision (32-bit) floating-point elements.
 * @param[in]	y	The single precision (32-bit) floating-point constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV32fS32f_IV32f(Yep32f *YEP_RESTRICT x, Yep32f y, YepSize length);
/**
 * @ingroup	yepCore_Min
 * @brief	Computes pairwise minima of double precision (64-bit) floating-point array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of double precision (64-bit) floating-point elements.
 * @param[in]	y	The double precision (64-bit) floating-point constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Min_IV64fS64f_IV64f(Yep64f *YEP_RESTRICT x, Yep64f y, YepSize length);
/**
 * @ingroup yepCore
 * @defgroup yepCore_Max	Maximum
 */

/**
 * @ingroup	yepCore_Max
 * @brief	Computes the maximum of signed 8-bit integer array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose maximum will be computed.
 * @param[out]	maximum	Pointer to the variable where the maximum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a maximum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V8s_S8s(const Yep8s *YEP_RESTRICT v, Yep8s *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes the maximum of unsigned 8-bit integer array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose maximum will be computed.
 * @param[out]	maximum	Pointer to the variable where the maximum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a maximum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V8u_S8u(const Yep8u *YEP_RESTRICT v, Yep8u *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes the maximum of signed 16-bit integer array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose maximum will be computed.
 * @param[out]	maximum	Pointer to the variable where the maximum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a maximum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V16s_S16s(const Yep16s *YEP_RESTRICT v, Yep16s *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes the maximum of unsigned 16-bit integer array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose maximum will be computed.
 * @param[out]	maximum	Pointer to the variable where the maximum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a maximum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V16u_S16u(const Yep16u *YEP_RESTRICT v, Yep16u *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes the maximum of signed 32-bit integer array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose maximum will be computed.
 * @param[out]	maximum	Pointer to the variable where the maximum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a maximum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V32s_S32s(const Yep32s *YEP_RESTRICT v, Yep32s *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes the maximum of unsigned 32-bit integer array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose maximum will be computed.
 * @param[out]	maximum	Pointer to the variable where the maximum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a maximum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V32u_S32u(const Yep32u *YEP_RESTRICT v, Yep32u *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes the maximum of signed 64-bit integer array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose maximum will be computed.
 * @param[out]	maximum	Pointer to the variable where the maximum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a maximum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V64s_S64s(const Yep64s *YEP_RESTRICT v, Yep64s *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes the maximum of unsigned 64-bit integer array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose maximum will be computed.
 * @param[out]	maximum	Pointer to the variable where the maximum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a maximum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V64u_S64u(const Yep64u *YEP_RESTRICT v, Yep64u *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes the maximum of single precision (32-bit) floating-point array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose maximum will be computed.
 * @param[out]	maximum	Pointer to the variable where the maximum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a maximum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V32f_S32f(const Yep32f *YEP_RESTRICT v, Yep32f *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes the maximum of double precision (64-bit) floating-point array elements.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	v	Pointer to the array of elements whose maximum will be computed.
 * @param[out]	maximum	Pointer to the variable where the maximum will be stored.
 * @param[in]	length	Length of the array specified by @a v. Must be non-zero.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a maximum argument is not naturally aligned.
 * @retval	#YepStatusInvalidArgument	@a length argument is zero.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V64f_S64f(const Yep64f *YEP_RESTRICT v, Yep64f *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two signed 8-bit integer arrays.
 * @param[in]	x	Pointer to the first array of signed 8-bit integer elements.
 * @param[in]	y	Pointer to the second array of signed 8-bit integer elements.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a maximum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V8sV8s_V8s(const Yep8s *YEP_RESTRICT x, const Yep8s *YEP_RESTRICT y, Yep8s *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two unsigned 8-bit integer arrays.
 * @param[in]	x	Pointer to the first array of unsigned 8-bit integer elements.
 * @param[in]	y	Pointer to the second array of unsigned 8-bit integer elements.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a maximum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V8uV8u_V8u(const Yep8u *YEP_RESTRICT x, const Yep8u *YEP_RESTRICT y, Yep8u *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two signed 16-bit integer arrays.
 * @param[in]	x	Pointer to the first array of signed 16-bit integer elements.
 * @param[in]	y	Pointer to the second array of signed 16-bit integer elements.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a maximum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V16sV16s_V16s(const Yep16s *YEP_RESTRICT x, const Yep16s *YEP_RESTRICT y, Yep16s *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two unsigned 16-bit integer arrays.
 * @param[in]	x	Pointer to the first array of unsigned 16-bit integer elements.
 * @param[in]	y	Pointer to the second array of unsigned 16-bit integer elements.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a maximum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V16uV16u_V16u(const Yep16u *YEP_RESTRICT x, const Yep16u *YEP_RESTRICT y, Yep16u *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two signed 32-bit integer arrays.
 * @param[in]	x	Pointer to the first array of signed 32-bit integer elements.
 * @param[in]	y	Pointer to the second array of signed 32-bit integer elements.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a maximum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V32sV32s_V32s(const Yep32s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, Yep32s *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two unsigned 32-bit integer arrays.
 * @param[in]	x	Pointer to the first array of unsigned 32-bit integer elements.
 * @param[in]	y	Pointer to the second array of unsigned 32-bit integer elements.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a maximum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V32uV32u_V32u(const Yep32u *YEP_RESTRICT x, const Yep32u *YEP_RESTRICT y, Yep32u *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two signed 64-bit integer arrays.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of signed 64-bit integer elements.
 * @param[in]	y	Pointer to the second array of signed 32-bit integer elements.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a maximum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V64sV32s_V64s(const Yep64s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, Yep64s *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two unsigned 64-bit integer arrays.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of unsigned 64-bit integer elements.
 * @param[in]	y	Pointer to the second array of unsigned 32-bit integer elements.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a maximum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V64uV32u_V64u(const Yep64u *YEP_RESTRICT x, const Yep32u *YEP_RESTRICT y, Yep64u *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two single precision (32-bit) floating-point arrays.
 * @param[in]	x	Pointer to the first array of single precision (32-bit) floating-point elements.
 * @param[in]	y	Pointer to the second array of single precision (32-bit) floating-point elements.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a maximum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V32fV32f_V32f(const Yep32f *YEP_RESTRICT x, const Yep32f *YEP_RESTRICT y, Yep32f *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two double precision (64-bit) floating-point arrays.
 * @param[in]	x	Pointer to the first array of double precision (64-bit) floating-point elements.
 * @param[in]	y	Pointer to the second array of double precision (64-bit) floating-point elements.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a maximum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V64fV64f_V64f(const Yep64f *YEP_RESTRICT x, const Yep64f *YEP_RESTRICT y, Yep64f *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of signed 8-bit integer array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of signed 8-bit integer elements.
 * @param[in]	y	The signed 8-bit integer constant.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a maximum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V8sS8s_V8s(const Yep8s *YEP_RESTRICT x, Yep8s y, Yep8s *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of unsigned 8-bit integer array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of unsigned 8-bit integer elements.
 * @param[in]	y	The unsigned 8-bit integer constant.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a maximum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V8uS8u_V8u(const Yep8u *YEP_RESTRICT x, Yep8u y, Yep8u *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of signed 16-bit integer array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of signed 16-bit integer elements.
 * @param[in]	y	The signed 16-bit integer constant.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a maximum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V16sS16s_V16s(const Yep16s *YEP_RESTRICT x, Yep16s y, Yep16s *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of unsigned 16-bit integer array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of unsigned 16-bit integer elements.
 * @param[in]	y	The unsigned 16-bit integer constant.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a maximum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V16uS16u_V16u(const Yep16u *YEP_RESTRICT x, Yep16u y, Yep16u *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of signed 32-bit integer array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of signed 32-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a maximum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V32sS32s_V32s(const Yep32s *YEP_RESTRICT x, Yep32s y, Yep32s *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of unsigned 32-bit integer array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of unsigned 32-bit integer elements.
 * @param[in]	y	The unsigned 32-bit integer constant.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a maximum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V32uS32u_V32u(const Yep32u *YEP_RESTRICT x, Yep32u y, Yep32u *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of signed 64-bit integer array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of signed 64-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a maximum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V64sS32s_V64s(const Yep64s *YEP_RESTRICT x, Yep32s y, Yep64s *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of unsigned 64-bit integer array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of unsigned 64-bit integer elements.
 * @param[in]	y	The unsigned 32-bit integer constant.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a maximum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V64uS32u_V64u(const Yep64u *YEP_RESTRICT x, Yep32u y, Yep64u *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of single precision (32-bit) floating-point array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of single precision (32-bit) floating-point elements.
 * @param[in]	y	The single precision (32-bit) floating-point constant.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a maximum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V32fS32f_V32f(const Yep32f *YEP_RESTRICT x, Yep32f y, Yep32f *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of double precision (64-bit) floating-point array elements and a constant.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in]	x	Pointer to the first array of double precision (64-bit) floating-point elements.
 * @param[in]	y	The double precision (64-bit) floating-point constant.
 * @param[out]	maximum	Pointer to the array of pairwise maximum elements.
 * @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a maximum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a maximum argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_V64fS64f_V64f(const Yep64f *YEP_RESTRICT x, Yep64f y, Yep64f *YEP_RESTRICT maximum, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of signed 8-bit integer elements.
 * @param[in]	y	Pointer to the second array of signed 8-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV8sV8s_IV8s(Yep8s *YEP_RESTRICT x, const Yep8s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two unsigned 8-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of unsigned 8-bit integer elements.
 * @param[in]	y	Pointer to the second array of unsigned 8-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV8uV8u_IV8u(Yep8u *YEP_RESTRICT x, const Yep8u *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of signed 16-bit integer elements.
 * @param[in]	y	Pointer to the second array of signed 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV16sV16s_IV16s(Yep16s *YEP_RESTRICT x, const Yep16s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two unsigned 16-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of unsigned 16-bit integer elements.
 * @param[in]	y	Pointer to the second array of unsigned 16-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV16uV16u_IV16u(Yep16u *YEP_RESTRICT x, const Yep16u *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of signed 32-bit integer elements.
 * @param[in]	y	Pointer to the second array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV32sV32s_IV32s(Yep32s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two unsigned 32-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of unsigned 32-bit integer elements.
 * @param[in]	y	Pointer to the second array of unsigned 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV32uV32u_IV32u(Yep32u *YEP_RESTRICT x, const Yep32u *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of signed 64-bit integer elements.
 * @param[in]	y	Pointer to the second array of signed 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV64sV32s_IV64s(Yep64s *YEP_RESTRICT x, const Yep32s *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two unsigned 64-bit integer arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of unsigned 64-bit integer elements.
 * @param[in]	y	Pointer to the second array of unsigned 32-bit integer elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV64uV32u_IV64u(Yep64u *YEP_RESTRICT x, const Yep32u *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of single precision (32-bit) floating-point elements.
 * @param[in]	y	Pointer to the second array of single precision (32-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV32fV32f_IV32f(Yep32f *YEP_RESTRICT x, const Yep32f *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the first array of double precision (64-bit) floating-point elements.
 * @param[in]	y	Pointer to the second array of double precision (64-bit) floating-point elements.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x or @a y argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x or @a y argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV64fV64f_IV64f(Yep64f *YEP_RESTRICT x, const Yep64f *YEP_RESTRICT y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of signed 8-bit integer array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of signed 8-bit integer elements.
 * @param[in]	y	The signed 8-bit integer constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV8sS8s_IV8s(Yep8s *YEP_RESTRICT x, Yep8s y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of unsigned 8-bit integer array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of unsigned 8-bit integer elements.
 * @param[in]	y	The unsigned 8-bit integer constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV8uS8u_IV8u(Yep8u *YEP_RESTRICT x, Yep8u y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of signed 16-bit integer array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of signed 16-bit integer elements.
 * @param[in]	y	The signed 16-bit integer constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV16sS16s_IV16s(Yep16s *YEP_RESTRICT x, Yep16s y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of unsigned 16-bit integer array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of unsigned 16-bit integer elements.
 * @param[in]	y	The unsigned 16-bit integer constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV16uS16u_IV16u(Yep16u *YEP_RESTRICT x, Yep16u y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of signed 32-bit integer array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of signed 32-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV32sS32s_IV32s(Yep32s *YEP_RESTRICT x, Yep32s y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of unsigned 32-bit integer array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of unsigned 32-bit integer elements.
 * @param[in]	y	The unsigned 32-bit integer constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV32uS32u_IV32u(Yep32u *YEP_RESTRICT x, Yep32u y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of signed 64-bit integer array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of signed 64-bit integer elements.
 * @param[in]	y	The signed 32-bit integer constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV64sS32s_IV64s(Yep64s *YEP_RESTRICT x, Yep32s y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of unsigned 64-bit integer array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of unsigned 64-bit integer elements.
 * @param[in]	y	The unsigned 32-bit integer constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV64uS32u_IV64u(Yep64u *YEP_RESTRICT x, Yep32u y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of single precision (32-bit) floating-point array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of single precision (32-bit) floating-point elements.
 * @param[in]	y	The single precision (32-bit) floating-point constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV32fS32f_IV32f(Yep32f *YEP_RESTRICT x, Yep32f y, YepSize length);
/**
 * @ingroup	yepCore_Max
 * @brief	Computes pairwise maxima of double precision (64-bit) floating-point array elements and a constant and writes the result to the same array.
 * @warning	This version of @Yeppp does not include optimized implementations for this function
 * @param[in,out]	x	Pointer to the array of double precision (64-bit) floating-point elements.
 * @param[in]	y	The double precision (64-bit) floating-point constant.
 * @param[in]	length	Length of the arrays specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x argument is not naturally aligned.
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Max_IV64fS64f_IV64f(Yep64f *YEP_RESTRICT x, Yep64f y, YepSize length);
/**
 * @ingroup yepCore
 * @defgroup yepCore_Sum	Sum
 */

/**
 * @ingroup	yepCore_Sum
 * @brief	Computes the sum of single precision (32-bit) floating-point array elements.
 * @param[in]	v	Pointer to the array of elements which will be summed up.
 * @param[out]	sum	Pointer to the variable where the sum will be stored.
 * @param[in]	length	Length of the array specified by @a v. If @a length is zero, the computed sum will be 0.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE, SSE3</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Sum_V32f_S32f(const Yep32f *YEP_RESTRICT v, Yep32f *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup	yepCore_Sum
 * @brief	Computes the sum of double precision (64-bit) floating-point array elements.
 * @param[in]	v	Pointer to the array of elements which will be summed up.
 * @param[out]	sum	Pointer to the variable where the sum will be stored.
 * @param[in]	length	Length of the array specified by @a v. If @a length is zero, the computed sum will be 0.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a sum argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a sum argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE, SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_Sum_V64f_S64f(const Yep64f *YEP_RESTRICT v, Yep64f *YEP_RESTRICT sum, YepSize length);
/**
 * @ingroup yepCore
 * @defgroup yepCore_SumAbs	Sum of absolute values
 */

/**
 * @ingroup	yepCore_SumAbs
 * @brief	Computes the sum of absolute values of single precision (32-bit) floating-point array elements.
 * @param[in]	v	Pointer to the array of elements whose absolute values will be summed up.
 * @param[out]	sumAbs	Pointer to the variable where the sum of absolute values will be stored.
 * @param[in]	length	Length of the array specified by @a v. If @a length is zero, the computed sum will be 0.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a sumAbs argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a sumAbs argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE, SSE2, SSE3</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_SumAbs_V32f_S32f(const Yep32f *YEP_RESTRICT v, Yep32f *YEP_RESTRICT sumAbs, YepSize length);
/**
 * @ingroup	yepCore_SumAbs
 * @brief	Computes the sum of absolute values of double precision (64-bit) floating-point array elements.
 * @param[in]	v	Pointer to the array of elements whose absolute values will be summed up.
 * @param[out]	sumAbs	Pointer to the variable where the sum of absolute values will be stored.
 * @param[in]	length	Length of the array specified by @a v. If @a length is zero, the computed sum will be 0.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a sumAbs argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a sumAbs argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE, SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_SumAbs_V64f_S64f(const Yep64f *YEP_RESTRICT v, Yep64f *YEP_RESTRICT sumAbs, YepSize length);
/**
 * @ingroup yepCore
 * @defgroup yepCore_SumSquares	Sum of squares (squared L2 norm)
 */

/**
 * @ingroup	yepCore_SumSquares
 * @brief	Computes the sum of squares of single precision (32-bit) floating-point array elements.
 * @param[in]	v	Pointer to the array of elements which will be squared (without write-back) and summed up.
 * @param[out]	sumSquares	Pointer to the variable where the sum of squares will be stored.
 * @param[in]	length	Length of the array specified by @a v. If @a length is zero, the computed sum of squares will be 0.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a sumSquares argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a sumSquares argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE, SSE3</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, FMA3</td></tr>
 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX, FMA4</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_SumSquares_V32f_S32f(const Yep32f *YEP_RESTRICT v, Yep32f *YEP_RESTRICT sumSquares, YepSize length);
/**
 * @ingroup	yepCore_SumSquares
 * @brief	Computes the sum of squares of double precision (64-bit) floating-point array elements.
 * @param[in]	v	Pointer to the array of elements which will be squared (without write-back) and summed up.
 * @param[out]	sumSquares	Pointer to the variable where the sum of squares will be stored.
 * @param[in]	length	Length of the array specified by @a v. If @a length is zero, the computed sum of squares will be 0.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a v or @a sumSquares argument is null.
 * @retval	#YepStatusMisalignedPointer	@a v or @a sumSquares argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE, SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, FMA3</td></tr>
 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX, FMA4</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_SumSquares_V64f_S64f(const Yep64f *YEP_RESTRICT v, Yep64f *YEP_RESTRICT sumSquares, YepSize length);
/**
 * @ingroup yepCore
 * @defgroup yepCore_DotProduct	Dot product
 */

/**
 * @ingroup	yepCore_DotProduct
 * @brief	Computes the dot product of two vectors of single precision (32-bit) floating-point elements.
 * @param[in]	x	Pointer to the first vector of elements.
 * @param[in]	y	Pointer to the second vector of elements.
 * @param[out]	dotProduct	Pointer to the variable where the dot product value will be stored.
 * @param[in]	length	Length of the vectors specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a dotProduct argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a dotProduct argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE, SSE3</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, FMA3</td></tr>
 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX, FMA4</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_DotProduct_V32fV32f_S32f(const Yep32f *YEP_RESTRICT x, const Yep32f *YEP_RESTRICT y, Yep32f *YEP_RESTRICT dotProduct, YepSize length);
/**
 * @ingroup	yepCore_DotProduct
 * @brief	Computes the dot product of two vectors of double precision (64-bit) floating-point elements.
 * @param[in]	x	Pointer to the first vector of elements.
 * @param[in]	y	Pointer to the second vector of elements.
 * @param[out]	dotProduct	Pointer to the variable where the dot product value will be stored.
 * @param[in]	length	Length of the vectors specified by @a x and @a y.
 * @retval	#YepStatusOk	The computation finished successfully.
 * @retval	#YepStatusNullPointer	@a x, @a y or @a dotProduct argument is null.
 * @retval	#YepStatusMisalignedPointer	@a x, @a y or @a dotProduct argument is not naturally aligned.
 * @par	Optimized implementations
 *     		<table>
 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE, SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, FMA3</td></tr>
 *     			<tr><td>x86-64</td><td>Intel Bonnell</td><td>SSE, SSE2</td></tr>
 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX, FMA4</td></tr>
 *     		</table>
 */
YEP_PUBLIC_SYMBOL enum YepStatus YEPABI yepCore_DotProduct_V64fV64f_S64f(const Yep64f *YEP_RESTRICT x, const Yep64f *YEP_RESTRICT y, Yep64f *YEP_RESTRICT dotProduct, YepSize length);
#ifdef __cplusplus
	} // extern "C"
#endif