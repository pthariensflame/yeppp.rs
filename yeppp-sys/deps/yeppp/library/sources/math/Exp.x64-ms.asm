;                       Yeppp! library implementation
;                   This file is auto-generated by Peach-Py,
;        Portable Efficient Assembly Code-generator in Higher-level Python,
;                  part of the Yeppp! library infrastructure
; This file is part of Yeppp! library and licensed under the New BSD license.
; See LICENSE.txt for the full text of the license.

section .rdata$q rdata align=32
_yepMath_Exp_V64f_V64f_Bobcat_constants:
	.c0: DQ 0x4338000000000000
	.c1: DQ 0x3FF71547652B82FE
	.c2: DQ 0xBFE62E42FEFA3800
	.c3: DQ 0xBD2EF35793C76730
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c5: DQ 0xC020000000000000, 0xC020000000000000
	.c6: DQ 0x3E5AE9043CA87A40
	.c7: DQ 0x3E928A284098D813
	.c8: DQ 0x3EC71DE71651CE7A
	.c9: DQ 0x3EFA019A6AC02A7D
	.c10: DQ 0x3F2A01A017EEB164
	.c11: DQ 0x3F56C16C17F2BF99
	.c12: DQ 0x3F811111111173CA
	.c13: DQ 0x3FA5555555552115
	.c14: DQ 0x3FC5555555555540
	.c15: DQ 0x3FE0000000000005
	.c16: DQ 0x40862E42FEFA39EF
	.c17: DQ 0x7FF0000000000000
	.c18: DQ 0xC0874910D52D3051
	ALIGN 16
	.c19: DQ 0x3FF71547652B82FE, 0x3FF71547652B82FE
	.c20: DQ 0x4338000000000000, 0x4338000000000000
	.c21: DQ 0xBFE62E42FEFA3800, 0xBFE62E42FEFA3800
	.c22: DQ 0xBD2EF35793C76730, 0xBD2EF35793C76730
	.c23: DQ 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40
	.c24: DQ 0x3E928A284098D813, 0x3E928A284098D813
	.c25: DQ 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A
	.c26: DQ 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D
	.c27: DQ 0x3F2A01A017EEB164, 0x3F2A01A017EEB164
	.c28: DQ 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99
	.c29: DQ 0x3F811111111173CA, 0x3F811111111173CA
	.c30: DQ 0x3FA5555555552115, 0x3FA5555555552115
	.c31: DQ 0x3FC5555555555540, 0x3FC5555555555540
	.c32: DQ 0x3FE0000000000005, 0x3FE0000000000005
	.c33: DQ 0x40862E42FEFA39EF, 0x40862E42FEFA39EF
	.c34: DQ 0x7FF0000000000000, 0x7FF0000000000000
	.c35: DQ 0xC0874910D52D3051, 0xC0874910D52D3051


section .text$q code align=16
global _yepMath_Exp_V64f_V64f_Bobcat
_yepMath_Exp_V64f_V64f_Bobcat:
	.ENTRY:
	SUB rsp, 200
	MOVAPS [byte rsp + 64], xmm6
	MOVAPS [byte rsp + 80], xmm7
	MOVAPS [byte rsp + 96], xmm8
	MOVAPS [byte rsp + 112], xmm9
	MOVAPS [dword rsp + 128], xmm10
	MOVAPS [dword rsp + 144], xmm11
	MOVAPS [dword rsp + 160], xmm12
	MOVAPS [dword rsp + 176], xmm13
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 15
	JZ .source_16b_aligned
	.source_16b_misaligned:
	MOVSD xmm4, [rcx]
	MOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c0]
	MOVSD xmm3, xmm4
	MULSD xmm3, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c1]
	ADDSD xmm3, xmm5
	MOVDQA xmm2, xmm3
	PSLLQ xmm2, 52
	SUBSD xmm3, xmm5
	MOVSD xmm5, xmm3
	MULSD xmm5, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c2]
	ADDSD xmm5, xmm4
	MULSD xmm3, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c3]
	ADDSD xmm5, xmm3
	MOVDQA xmm3, xmm2
	PMINSW xmm3,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c4]
	PMAXSW xmm3,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c5]
	PSUBD xmm2, xmm3
	MOVDQA xmm1,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c4]
	PADDD xmm3, xmm1
	PADDD xmm2, xmm1
	MOVSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c6]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c7]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c8]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c9]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c10]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c11]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c12]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c13]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c14]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c15]
	MULSD xmm1, xmm5
	MULSD xmm1, xmm5
	ADDSD xmm1, xmm5
	MULSD xmm1, xmm3
	ADDSD xmm1, xmm3
	MULSD xmm1, xmm2
	MOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c16]
	CMPLESD xmm5, xmm4
	MOVSD xmm3, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c17]
	ANDPS xmm3, xmm5
	ANDNPS xmm5, xmm1
	ORPS xmm5, xmm3
	CMPLTSD xmm4, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c18]
	ANDNPD xmm4, xmm5
	MOVSD [rdx], xmm4
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 15
	JNZ .source_16b_misaligned
	.source_16b_aligned:
	SUB r8, 8
	JB .process_restore
	align 32
	.process_batch_fast:
	MOVAPD xmm4, [rcx]
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c19]
	MULPD xmm4, xmm5
	MOVAPD xmm3,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c20]
	ADDPD xmm4, xmm3
	MOV rax, 13872817421961305113
	MOVAPD xmm2, [byte rcx + 16]
	MULPD xmm2, xmm5
	ADDPD xmm2, xmm3
	MOV r10, 4649451482093607590
	MOVAPD xmm1, [byte rcx + 32]
	MULPD xmm1, xmm5
	ADDPD xmm1, xmm3
	MOV r11, [rcx]
	MOVAPD xmm0, [byte rcx + 48]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm3
	CMP r11, rax
	MOVDQA xmm5,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c4]
	MOVDQA xmm6, xmm4
	PSLLQ xmm6, 52
	PADDD xmm6, xmm5
	SUBPD xmm4, xmm3
	CMOVA r11, r10
	MOVDQA xmm7, xmm2
	PSLLQ xmm7, 52
	PADDD xmm7, xmm5
	SUBPD xmm2, xmm3
	CMP r11, r10
	MOVDQA xmm8, xmm1
	PSLLQ xmm8, 52
	PADDD xmm8, xmm5
	SUBPD xmm1, xmm3
	JGE .process_batch_full
	MOVDQA xmm9, xmm0
	PSLLQ xmm9, 52
	PADDD xmm9, xmm5
	SUBPD xmm0, xmm3
	MOV r11, [byte rcx + 8]
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c21]
	MOVAPS xmm3, xmm4
	MULPD xmm3, xmm5
	ADDPD xmm3, [rcx]
	MOVAPS xmm10, xmm2
	MULPD xmm10, xmm5
	ADDPD xmm10, [byte rcx + 16]
	MOVAPS xmm11, xmm1
	MULPD xmm11, xmm5
	ADDPD xmm11, [byte rcx + 32]
	MOVAPS xmm12, xmm0
	MULPD xmm12, xmm5
	ADDPD xmm12, [byte rcx + 48]
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c22]
	MULPD xmm4, xmm5
	ADDPD xmm3, xmm4
	CMP r11, rax
	MULPD xmm2, xmm5
	ADDPD xmm10, xmm2
	CMOVA r11, r10
	MULPD xmm1, xmm5
	ADDPD xmm11, xmm1
	CMP r11, r10
	MULPD xmm0, xmm5
	ADDPD xmm12, xmm0
	JGE .process_batch_full
	MOVAPS xmm4,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c23]
	MOVAPS xmm5, xmm4
	MULPD xmm5, xmm3
	MOVAPD xmm2,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c24]
	ADDPD xmm5, xmm2
	MOVAPS xmm1, xmm4
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm2
	MOVAPS xmm0, xmm4
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm2
	MOV r11, [byte rcx + 16]
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm2
	MOVAPD xmm2,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c25]
	MULPD xmm5, xmm3
	ADDPD xmm5, xmm2
	CMP r11, rax
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm2
	CMOVA r11, r10
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm2
	CMP r11, r10
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm2
	JGE .process_batch_full
	MOVAPD xmm2,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c26]
	MULPD xmm5, xmm3
	ADDPD xmm5, xmm2
	MOV r11, [byte rcx + 24]
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm2
	CMP r11, rax
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm2
	CMOVA r11, r10
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm2
	CMP r11, r10
	MOVAPD xmm2,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c27]
	MULPD xmm5, xmm3
	ADDPD xmm5, xmm2
	JGE .process_batch_full
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm2
	MOV r11, [byte rcx + 32]
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm2
	CMP r11, rax
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm2
	CMOVA r11, r10
	MOVAPD xmm2,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c28]
	MULPD xmm5, xmm3
	ADDPD xmm5, xmm2
	CMP r11, r10
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm2
	JGE .process_batch_full
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm2
	MOV r11, [byte rcx + 40]
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm2
	CMP r11, rax
	MOVAPD xmm2,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c29]
	MULPD xmm5, xmm3
	ADDPD xmm5, xmm2
	CMOVA r11, r10
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm2
	CMP r11, r10
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm2
	JGE .process_batch_full
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm2
	MOV r11, [byte rcx + 48]
	MOVAPD xmm2,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c30]
	MULPD xmm5, xmm3
	ADDPD xmm5, xmm2
	CMP r11, rax
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm2
	CMOVA r11, r10
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm2
	CMP r11, r10
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm2
	JGE .process_batch_full
	MOVAPD xmm2,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c31]
	MULPD xmm5, xmm3
	ADDPD xmm5, xmm2
	MOV r11, [byte rcx + 56]
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm2
	CMP r11, rax
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm2
	CMOVA r11, r10
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm2
	CMP r11, r10
	MOVAPD xmm2,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c32]
	MULPD xmm5, xmm3
	ADDPD xmm5, xmm2
	JGE .process_batch_full
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm2
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm2
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm3
	MULPD xmm1, xmm10
	MULPD xmm0, xmm11
	MULPD xmm4, xmm12
	MULPD xmm5, xmm3
	ADDPD xmm5, xmm3
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm10
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm11
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm12
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm6
	MOVUPS [rdx], xmm5
	MULPD xmm1, xmm7
	ADDPD xmm1, xmm7
	MOVUPS [byte rdx + 16], xmm1
	MULPD xmm0, xmm8
	ADDPD xmm0, xmm8
	MOVUPS [byte rdx + 32], xmm0
	MULPD xmm4, xmm9
	ADDPD xmm4, xmm9
	MOVUPS [byte rdx + 48], xmm4
	.process_batch_increment:
	ADD rcx, 64
	ADD rdx, 64
	SUB r8, 8
	JAE .process_batch_fast
	.process_restore:
	ADD r8, 8
	JZ .return_ok
	.process_single:
	MOVSD xmm4, [rcx]
	MOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c0]
	MOVSD xmm3, xmm4
	MULSD xmm3, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c1]
	ADDSD xmm3, xmm5
	MOVDQA xmm2, xmm3
	PSLLQ xmm2, 52
	SUBSD xmm3, xmm5
	MOVSD xmm5, xmm3
	MULSD xmm5, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c2]
	ADDSD xmm5, xmm4
	MULSD xmm3, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c3]
	ADDSD xmm5, xmm3
	MOVDQA xmm3, xmm2
	PMINSW xmm3,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c4]
	PMAXSW xmm3,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c5]
	PSUBD xmm2, xmm3
	MOVDQA xmm1,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c4]
	PADDD xmm3, xmm1
	PADDD xmm2, xmm1
	MOVSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c6]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c7]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c8]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c9]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c10]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c11]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c12]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c13]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c14]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c15]
	MULSD xmm1, xmm5
	MULSD xmm1, xmm5
	ADDSD xmm1, xmm5
	MULSD xmm1, xmm3
	ADDSD xmm1, xmm3
	MULSD xmm1, xmm2
	MOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c16]
	CMPLESD xmm5, xmm4
	MOVSD xmm3, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c17]
	ANDPS xmm3, xmm5
	ANDNPS xmm5, xmm1
	ORPS xmm5, xmm3
	CMPLTSD xmm4, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c18]
	ANDNPD xmm4, xmm5
	MOVSD [rdx], xmm4
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	MOVAPS xmm6, [byte rsp + 64]
	MOVAPS xmm7, [byte rsp + 80]
	MOVAPS xmm8, [byte rsp + 96]
	MOVAPS xmm9, [byte rsp + 112]
	MOVAPS xmm10, [dword rsp + 128]
	MOVAPS xmm11, [dword rsp + 144]
	MOVAPS xmm12, [dword rsp + 160]
	MOVAPS xmm13, [dword rsp + 176]
	ADD rsp, 200
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	MOVAPD xmm4, [rcx]
	MOVAPD xmm5, xmm4
	MOVAPD xmm3,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c19]
	MULPD xmm5, xmm3
	MOVAPD xmm2,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c20]
	ADDPD xmm5, xmm2
	MOVAPD xmm1, [byte rcx + 16]
	MOVAPD xmm0, xmm1
	MULPD xmm0, xmm3
	ADDPD xmm0, xmm2
	MOVAPD xmm6, [byte rcx + 32]
	MOVAPD xmm7, xmm6
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm2
	MOVAPD xmm8, [byte rcx + 48]
	MOVAPD xmm9, xmm8
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm2
	MOVDQA xmm3, xmm5
	PSLLQ xmm3, 52
	SUBPD xmm5, xmm2
	MOVDQA xmm10, xmm0
	PSLLQ xmm10, 52
	SUBPD xmm0, xmm2
	MOVDQA xmm11, xmm7
	PSLLQ xmm11, 52
	SUBPD xmm7, xmm2
	MOVDQA xmm12, xmm9
	PSLLQ xmm12, 52
	SUBPD xmm9, xmm2
	MOVAPS xmm2, xmm5
	MOVAPD xmm13,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c21]
	MULPD xmm2, xmm13
	ADDPD xmm2, xmm4
	MOVAPD xmm4,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c22]
	MULPD xmm5, xmm4
	ADDPD xmm2, xmm5
	MOVAPS xmm5, xmm0
	MULPD xmm5, xmm13
	ADDPD xmm5, xmm1
	MULPD xmm0, xmm4
	ADDPD xmm5, xmm0
	MOVAPS xmm1, xmm7
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm6
	MULPD xmm7, xmm4
	ADDPD xmm1, xmm7
	MOVAPS xmm0, xmm9
	MULPD xmm0, xmm13
	ADDPD xmm0, xmm8
	MULPD xmm9, xmm4
	ADDPD xmm0, xmm9
	MOVDQA xmm4,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c4]
	MOVAPD xmm6, xmm3
	PMINSW xmm6, xmm4
	MOVDQA xmm7,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c5]
	PMAXSW xmm6, xmm7
	PSUBD xmm3, xmm6
	MOVDQA xmm8,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c4]
	PADDD xmm6, xmm8
	MOVDQA   [rsp], xmm6
	PADDD xmm3, xmm8
	MOVAPD xmm6, xmm10
	PMINSW xmm6, xmm4
	PMAXSW xmm6, xmm7
	PSUBD xmm10, xmm6
	PADDD xmm6, xmm8
	MOVDQA   [rsp + 16], xmm6
	PADDD xmm10, xmm8
	MOVAPD xmm6, xmm11
	PMINSW xmm6, xmm4
	PMAXSW xmm6, xmm7
	PSUBD xmm11, xmm6
	PADDD xmm6, xmm8
	MOVDQA   [rsp + 32], xmm6
	PADDD xmm11, xmm8
	MOVAPD xmm6, xmm12
	PMINSW xmm6, xmm4
	PMAXSW xmm6, xmm7
	PSUBD xmm12, xmm6
	PADDD xmm6, xmm8
	MOVDQA   [rsp + 48], xmm6
	PADDD xmm12, xmm8
	MOVAPS xmm4,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c23]
	MOVAPD xmm6,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c24]
	MOVAPS xmm7, xmm4
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm6
	MOVAPS xmm8, xmm4
	MULPD xmm8, xmm5
	ADDPD xmm8, xmm6
	MOVAPS xmm9, xmm4
	MULPD xmm9, xmm1
	ADDPD xmm9, xmm6
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm6
	MOVAPD xmm6,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c25]
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm6
	MULPD xmm8, xmm5
	ADDPD xmm8, xmm6
	MULPD xmm9, xmm1
	ADDPD xmm9, xmm6
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm6
	MOVAPD xmm6,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c26]
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm6
	MULPD xmm8, xmm5
	ADDPD xmm8, xmm6
	MULPD xmm9, xmm1
	ADDPD xmm9, xmm6
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm6
	MOVAPD xmm6,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c27]
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm6
	MULPD xmm8, xmm5
	ADDPD xmm8, xmm6
	MULPD xmm9, xmm1
	ADDPD xmm9, xmm6
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm6
	MOVAPD xmm6,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c28]
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm6
	MULPD xmm8, xmm5
	ADDPD xmm8, xmm6
	MULPD xmm9, xmm1
	ADDPD xmm9, xmm6
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm6
	MOVAPD xmm6,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c29]
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm6
	MULPD xmm8, xmm5
	ADDPD xmm8, xmm6
	MULPD xmm9, xmm1
	ADDPD xmm9, xmm6
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm6
	MOVAPD xmm6,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c30]
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm6
	MULPD xmm8, xmm5
	ADDPD xmm8, xmm6
	MULPD xmm9, xmm1
	ADDPD xmm9, xmm6
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm6
	MOVAPD xmm6,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c31]
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm6
	MULPD xmm8, xmm5
	ADDPD xmm8, xmm6
	MULPD xmm9, xmm1
	ADDPD xmm9, xmm6
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm6
	MOVAPD xmm6,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c32]
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm6
	MULPD xmm8, xmm5
	ADDPD xmm8, xmm6
	MULPD xmm9, xmm1
	ADDPD xmm9, xmm6
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm6
	MULPD xmm7, xmm2
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm2
	MULPD xmm8, xmm5
	MULPD xmm8, xmm5
	ADDPD xmm8, xmm5
	MULPD xmm9, xmm1
	MULPD xmm9, xmm1
	ADDPD xmm9, xmm1
	MULPD xmm4, xmm0
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm0
	MOVAPS xmm5,   [rsp]
	MULPD xmm7, xmm5
	ADDPD xmm7, xmm5
	MOVAPS xmm5,   [rsp + 16]
	MULPD xmm8, xmm5
	ADDPD xmm8, xmm5
	MOVAPS xmm5,   [rsp + 32]
	MULPD xmm9, xmm5
	ADDPD xmm9, xmm5
	MOVAPS xmm5,   [rsp + 48]
	MULPD xmm4, xmm5
	ADDPD xmm4, xmm5
	MULPD xmm7, xmm3
	MULPD xmm8, xmm10
	MULPD xmm9, xmm11
	MULPD xmm4, xmm12
	MOVAPS xmm5, [rcx]
	MOVAPD xmm3,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c33]
	MOVAPS xmm2, xmm3
	CMPLEPD xmm2, xmm5
	MOVAPS xmm1,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c34]
	ANDPS xmm1, xmm2
	ANDNPS xmm2, xmm7
	ORPS xmm2, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c35]
	CMPLTPD xmm5, xmm1
	ANDNPD xmm5, xmm2
	MOVUPS [rdx], xmm5
	MOVAPS xmm5, [byte rcx + 16]
	MOVAPS xmm2, xmm3
	CMPLEPD xmm2, xmm5
	MOVAPS xmm0,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c34]
	ANDPS xmm0, xmm2
	ANDNPS xmm2, xmm8
	ORPS xmm2, xmm0
	CMPLTPD xmm5, xmm1
	ANDNPD xmm5, xmm2
	MOVUPS [byte rdx + 16], xmm5
	MOVAPS xmm5, [byte rcx + 32]
	MOVAPS xmm2, xmm3
	CMPLEPD xmm2, xmm5
	MOVAPS xmm0,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c34]
	ANDPS xmm0, xmm2
	ANDNPS xmm2, xmm9
	ORPS xmm2, xmm0
	CMPLTPD xmm5, xmm1
	ANDNPD xmm5, xmm2
	MOVUPS [byte rdx + 32], xmm5
	MOVAPS xmm5, [byte rcx + 48]
	CMPLEPD xmm3, xmm5
	MOVAPS xmm2,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c34]
	ANDPS xmm2, xmm3
	ANDNPS xmm3, xmm4
	ORPS xmm3, xmm2
	CMPLTPD xmm5, xmm1
	ANDNPD xmm5, xmm3
	MOVUPS [byte rdx + 48], xmm5
	JMP .process_batch_increment

section .rdata$m rdata align=32
_yepMath_Exp_V64f_V64f_K10_constants:
	.c0: DQ 0x4338000000000000
	.c1: DQ 0x3FF71547652B82FE
	.c2: DQ 0xBFE62E42FEFA3800
	.c3: DQ 0xBD2EF35793C76730
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c5: DQ 0xC020000000000000, 0xC020000000000000
	.c6: DQ 0x3E5AE9043CA87A40
	.c7: DQ 0x3E928A284098D813
	.c8: DQ 0x3EC71DE71651CE7A
	.c9: DQ 0x3EFA019A6AC02A7D
	.c10: DQ 0x3F2A01A017EEB164
	.c11: DQ 0x3F56C16C17F2BF99
	.c12: DQ 0x3F811111111173CA
	.c13: DQ 0x3FA5555555552115
	.c14: DQ 0x3FC5555555555540
	.c15: DQ 0x3FE0000000000005
	.c16: DQ 0x40862E42FEFA39EF
	.c17: DQ 0x7FF0000000000000
	.c18: DQ 0xC0874910D52D3051
	ALIGN 16
	.c19: DQ 0x3FF71547652B82FE, 0x3FF71547652B82FE
	.c20: DQ 0x4338000000000000, 0x4338000000000000
	.c21: DQ 0xBFE62E42FEFA3800, 0xBFE62E42FEFA3800
	.c22: DQ 0xBD2EF35793C76730, 0xBD2EF35793C76730
	.c23: DQ 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40
	.c24: DQ 0x3E928A284098D813, 0x3E928A284098D813
	.c25: DQ 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A
	.c26: DQ 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D
	.c27: DQ 0x3F2A01A017EEB164, 0x3F2A01A017EEB164
	.c28: DQ 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99
	.c29: DQ 0x3F811111111173CA, 0x3F811111111173CA
	.c30: DQ 0x3FA5555555552115, 0x3FA5555555552115
	.c31: DQ 0x3FC5555555555540, 0x3FC5555555555540
	.c32: DQ 0x3FE0000000000005, 0x3FE0000000000005
	.c33: DQ 0x40862E42FEFA39EF, 0x40862E42FEFA39EF
	.c34: DQ 0x7FF0000000000000, 0x7FF0000000000000
	.c35: DQ 0xC0874910D52D3051, 0xC0874910D52D3051


section .text$m code align=16
global _yepMath_Exp_V64f_V64f_K10
_yepMath_Exp_V64f_V64f_K10:
	.ENTRY:
	SUB rsp, 616
	MOVAPS [dword rsp + 448], xmm6
	MOVAPS [dword rsp + 464], xmm7
	MOVAPS [dword rsp + 480], xmm8
	MOVAPS [dword rsp + 496], xmm9
	MOVAPS [dword rsp + 512], xmm10
	MOVAPS [dword rsp + 528], xmm11
	MOVAPS [dword rsp + 544], xmm12
	MOVAPS [dword rsp + 560], xmm13
	MOVAPS [dword rsp + 576], xmm14
	MOVAPS [dword rsp + 592], xmm15
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 15
	JZ .source_16b_aligned
	.source_16b_misaligned:
	MOVSD xmm4, [rcx]
	MOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_K10_constants.c0]
	MOVAPS xmm3, xmm4
	MULSD xmm3, [rel _yepMath_Exp_V64f_V64f_K10_constants.c1]
	ADDSD xmm3, xmm5
	MOVDQA xmm2, xmm3
	PSLLQ xmm2, 52
	SUBSD xmm3, xmm5
	MOVAPS xmm5, xmm3
	MULSD xmm5, [rel _yepMath_Exp_V64f_V64f_K10_constants.c2]
	ADDSD xmm5, xmm4
	MULSD xmm3, [rel _yepMath_Exp_V64f_V64f_K10_constants.c3]
	ADDSD xmm5, xmm3
	MOVDQA xmm3, xmm2
	PMINSW xmm3,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c4]
	PMAXSW xmm3,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c5]
	PSUBD xmm2, xmm3
	MOVDQA xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c4]
	PADDD xmm3, xmm1
	PADDD xmm2, xmm1
	MOVSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c6]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c7]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c8]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c9]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c10]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c11]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c12]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c13]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c14]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c15]
	MULSD xmm1, xmm5
	MULSD xmm1, xmm5
	ADDSD xmm1, xmm5
	MULSD xmm1, xmm3
	ADDSD xmm1, xmm3
	MULSD xmm1, xmm2
	MOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_K10_constants.c16]
	CMPLESD xmm5, xmm4
	MOVSD xmm3, [rel _yepMath_Exp_V64f_V64f_K10_constants.c17]
	ANDPS xmm3, xmm5
	ANDNPS xmm5, xmm1
	ORPS xmm5, xmm3
	CMPLTSD xmm4, [rel _yepMath_Exp_V64f_V64f_K10_constants.c18]
	ANDNPD xmm4, xmm5
	MOVSD [rdx], xmm4
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 15
	JNZ .source_16b_misaligned
	.source_16b_aligned:
	SUB r8, 16
	JB .process_restore
	align 32
	.process_batch_fast:
	MOVAPD xmm4, [rcx]
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c19]
	MULPD xmm4, xmm5
	MOVAPD xmm3,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c20]
	ADDPD xmm4, xmm3
	MOV rax, 13872817421961305113
	MOV r10, 4649451482093607590
	MOVAPD xmm2, [byte rcx + 16]
	MULPD xmm2, xmm5
	ADDPD xmm2, xmm3
	MOV r11, [rcx]
	CMP r11, rax
	MOVAPD xmm1, [byte rcx + 32]
	MULPD xmm1, xmm5
	ADDPD xmm1, xmm3
	CMOVA r11, r10
	CMP r11, r10
	MOVAPD xmm0, [byte rcx + 48]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm3
	JGE .process_batch_full
	MOV r11, [byte rcx + 8]
	MOVAPD xmm6, [byte rcx + 64]
	MULPD xmm6, xmm5
	ADDPD xmm6, xmm3
	CMP r11, rax
	CMOVA r11, r10
	MOVAPD xmm7, [byte rcx + 80]
	MULPD xmm7, xmm5
	ADDPD xmm7, xmm3
	CMP r11, r10
	JGE .process_batch_full
	MOVAPD xmm8, [byte rcx + 96]
	MULPD xmm8, xmm5
	ADDPD xmm8, xmm3
	MOV r11, [byte rcx + 16]
	CMP r11, rax
	MOVAPD xmm9, [byte rcx + 112]
	MULPD xmm9, xmm5
	ADDPD xmm9, xmm3
	CMOVA r11, r10
	CMP r11, r10
	MOVDQA xmm5,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c4]
	MOVDQA xmm10, xmm4
	PSLLQ xmm10, 52
	PADDD xmm10, xmm5
	MOVDQA   [rsp], xmm10
	SUBPD xmm4, xmm3
	JGE .process_batch_full
	MOVDQA xmm10, xmm2
	PSLLQ xmm10, 52
	PADDD xmm10, xmm5
	MOVDQA   [rsp + 16], xmm10
	SUBPD xmm2, xmm3
	MOV r11, [byte rcx + 24]
	MOVDQA xmm10, xmm1
	PSLLQ xmm10, 52
	PADDD xmm10, xmm5
	MOVDQA   [rsp + 32], xmm10
	SUBPD xmm1, xmm3
	CMP r11, rax
	MOVDQA xmm10, xmm0
	PSLLQ xmm10, 52
	PADDD xmm10, xmm5
	MOVDQA   [rsp + 48], xmm10
	SUBPD xmm0, xmm3
	CMOVA r11, r10
	MOVDQA xmm10, xmm6
	PSLLQ xmm10, 52
	PADDD xmm10, xmm5
	MOVDQA   [rsp + 64], xmm10
	SUBPD xmm6, xmm3
	CMP r11, r10
	MOVDQA xmm10, xmm7
	PSLLQ xmm10, 52
	PADDD xmm10, xmm5
	MOVDQA   [rsp + 80], xmm10
	SUBPD xmm7, xmm3
	JGE .process_batch_full
	MOVDQA xmm10, xmm8
	PSLLQ xmm10, 52
	PADDD xmm10, xmm5
	MOVDQA   [rsp + 96], xmm10
	SUBPD xmm8, xmm3
	MOV r11, [byte rcx + 32]
	MOVDQA xmm10, xmm9
	PSLLQ xmm10, 52
	PADDD xmm10, xmm5
	MOVDQA   [rsp + 112], xmm10
	SUBPD xmm9, xmm3
	CMP r11, rax
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	MOVAPS xmm3, xmm4
	MULPD xmm3, xmm5
	ADDPD xmm3, [rcx]
	MOVAPS xmm10, xmm2
	MULPD xmm10, xmm5
	ADDPD xmm10, [byte rcx + 16]
	MOVAPS xmm11, xmm1
	MULPD xmm11, xmm5
	ADDPD xmm11, [byte rcx + 32]
	MOVAPS xmm12, xmm0
	MULPD xmm12, xmm5
	ADDPD xmm12, [byte rcx + 48]
	MOVAPS xmm13, xmm6
	MULPD xmm13, xmm5
	ADDPD xmm13, [byte rcx + 64]
	MOVAPS xmm14, xmm7
	MULPD xmm14, xmm5
	ADDPD xmm14, [byte rcx + 80]
	MOVAPS xmm15, xmm8
	MULPD xmm15, xmm5
	ADDPD xmm15, [byte rcx + 96]
	MOVAPS   [rsp + 128], xmm15
	MOVAPS xmm15, xmm9
	MULPD xmm15, xmm5
	ADDPD xmm15, [byte rcx + 112]
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	MULPD xmm4, xmm5
	ADDPD xmm3, xmm4
	CMOVA r11, r10
	MULPD xmm2, xmm5
	ADDPD xmm10, xmm2
	CMP r11, r10
	MULPD xmm1, xmm5
	ADDPD xmm11, xmm1
	JGE .process_batch_full
	MULPD xmm0, xmm5
	ADDPD xmm12, xmm0
	MOV r11, [byte rcx + 40]
	MOVAPS xmm4,   [rsp + 128]
	MULPD xmm6, xmm5
	ADDPD xmm13, xmm6
	CMP r11, rax
	MULPD xmm7, xmm5
	ADDPD xmm14, xmm7
	CMOVA r11, r10
	MULPD xmm8, xmm5
	ADDPD xmm4, xmm8
	MOVAPS   [rsp + 128], xmm4
	MULPD xmm9, xmm5
	ADDPD xmm15, xmm9
	MOVAPS   [rsp + 144], xmm15
	MOVAPS xmm4,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c23]
	MOVAPS xmm5,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c24]
	CMP r11, r10
	MOVAPS xmm2, xmm4
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	MOVAPS xmm1, xmm4
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	MOVAPS xmm0, xmm4
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	MOVAPS xmm6, xmm4
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	MOVAPS xmm7, xmm4
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	MOVAPS xmm8, xmm4
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	MOVAPS xmm9, xmm4
	MULPD xmm9,   [rsp + 128]
	ADDPD xmm9, xmm5
	JGE .process_batch_full
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm5
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c25]
	MOV r11, [byte rcx + 48]
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	CMP r11, rax
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	CMOVA r11, r10
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	CMP r11, r10
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	JGE .process_batch_full
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	MOV r11, [byte rcx + 56]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	MOVAPS xmm15,   [rsp + 128]
	MULPD xmm9, xmm15
	ADDPD xmm9, xmm5
	MOVAPS xmm15,   [rsp + 144]
	MULPD xmm4, xmm15
	ADDPD xmm4, xmm5
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c26]
	CMP r11, rax
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	CMOVA r11, r10
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	CMP r11, r10
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	JGE .process_batch_full
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	MOV r11, [byte rcx + 64]
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	CMP r11, rax
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	MOVAPS xmm15,   [rsp + 128]
	MULPD xmm9, xmm15
	ADDPD xmm9, xmm5
	MOVAPS xmm15,   [rsp + 144]
	MULPD xmm4, xmm15
	ADDPD xmm4, xmm5
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c27]
	CMOVA r11, r10
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	CMP r11, r10
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	JGE .process_batch_full
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	MOV r11, [byte rcx + 72]
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	CMP r11, rax
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	CMOVA r11, r10
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	MOVAPS xmm15,   [rsp + 128]
	MULPD xmm9, xmm15
	ADDPD xmm9, xmm5
	MOVAPS xmm15,   [rsp + 144]
	MULPD xmm4, xmm15
	ADDPD xmm4, xmm5
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c28]
	CMP r11, r10
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	JGE .process_batch_full
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	MOV r11, [byte rcx + 80]
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	CMP r11, rax
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	CMOVA r11, r10
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	CMP r11, r10
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	MOVAPS xmm15,   [rsp + 128]
	MULPD xmm9, xmm15
	ADDPD xmm9, xmm5
	MOVAPS xmm15,   [rsp + 144]
	MULPD xmm4, xmm15
	ADDPD xmm4, xmm5
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c29]
	JGE .process_batch_full
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	MOV r11, [byte rcx + 88]
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	CMP r11, rax
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	CMOVA r11, r10
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	CMP r11, r10
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	JGE .process_batch_full
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	MOVAPS xmm15,   [rsp + 128]
	MULPD xmm9, xmm15
	ADDPD xmm9, xmm5
	MOVAPS xmm15,   [rsp + 144]
	MULPD xmm4, xmm15
	ADDPD xmm4, xmm5
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c30]
	MOV r11, [byte rcx + 96]
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	CMP r11, rax
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	CMOVA r11, r10
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	CMP r11, r10
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	JGE .process_batch_full
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	MOV r11, [byte rcx + 104]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	MOVAPS xmm15,   [rsp + 128]
	MULPD xmm9, xmm15
	ADDPD xmm9, xmm5
	MOVAPS xmm15,   [rsp + 144]
	MULPD xmm4, xmm15
	ADDPD xmm4, xmm5
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c31]
	CMP r11, rax
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	CMOVA r11, r10
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	CMP r11, r10
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	JGE .process_batch_full
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	MOV r11, [byte rcx + 112]
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	CMP r11, rax
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	MOVAPS xmm15,   [rsp + 128]
	MULPD xmm9, xmm15
	ADDPD xmm9, xmm5
	MOVAPS xmm15,   [rsp + 144]
	MULPD xmm4, xmm15
	ADDPD xmm4, xmm5
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c32]
	CMOVA r11, r10
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	CMP r11, r10
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	JGE .process_batch_full
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	MOV r11, [byte rcx + 120]
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	CMP r11, rax
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	CMOVA r11, r10
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	MOVAPS xmm15,   [rsp + 128]
	MULPD xmm9, xmm15
	ADDPD xmm9, xmm5
	MOVAPS xmm15,   [rsp + 144]
	MULPD xmm4, xmm15
	ADDPD xmm4, xmm5
	MULPD xmm2, xmm3
	CMP r11, r10
	MULPD xmm1, xmm10
	JGE .process_batch_full
	MULPD xmm0, xmm11
	MULPD xmm6, xmm12
	MULPD xmm7, xmm13
	MULPD xmm8, xmm14
	MOVAPS xmm5,   [rsp + 128]
	MULPD xmm9, xmm5
	MOVAPS xmm15,   [rsp + 144]
	MULPD xmm4, xmm15
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm10
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm11
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm12
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm13
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm14
	MULPD xmm9, xmm5
	ADDPD xmm9, xmm5
	MULPD xmm4, xmm15
	ADDPD xmm4, xmm15
	MOVAPS xmm5,   [rsp]
	MULPD xmm2, xmm5
	ADDPD xmm2, xmm5
	MOVUPS [rdx], xmm2
	MOVAPS xmm5,   [rsp + 16]
	MULPD xmm1, xmm5
	ADDPD xmm1, xmm5
	MOVUPS [byte rdx + 16], xmm1
	MOVAPS xmm5,   [rsp + 32]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm5
	MOVUPS [byte rdx + 32], xmm0
	MOVAPS xmm5,   [rsp + 48]
	MULPD xmm6, xmm5
	ADDPD xmm6, xmm5
	MOVUPS [byte rdx + 48], xmm6
	MOVAPS xmm5,   [rsp + 64]
	MULPD xmm7, xmm5
	ADDPD xmm7, xmm5
	MOVUPS [byte rdx + 64], xmm7
	MOVAPS xmm5,   [rsp + 80]
	MULPD xmm8, xmm5
	ADDPD xmm8, xmm5
	MOVUPS [byte rdx + 80], xmm8
	MOVAPS xmm5,   [rsp + 96]
	MULPD xmm9, xmm5
	ADDPD xmm9, xmm5
	MOVUPS [byte rdx + 96], xmm9
	MOVAPS xmm5,   [rsp + 112]
	MULPD xmm4, xmm5
	ADDPD xmm4, xmm5
	MOVUPS [byte rdx + 112], xmm4
	.process_batch_increment:
	ADD rcx, 128
	ADD rdx, 128
	SUB r8, 16
	JAE .process_batch_fast
	.process_restore:
	ADD r8, 16
	JZ .return_ok
	.process_single:
	MOVSD xmm4, [rcx]
	MOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_K10_constants.c0]
	MOVAPS xmm3, xmm4
	MULSD xmm3, [rel _yepMath_Exp_V64f_V64f_K10_constants.c1]
	ADDSD xmm3, xmm5
	MOVDQA xmm2, xmm3
	PSLLQ xmm2, 52
	SUBSD xmm3, xmm5
	MOVAPS xmm5, xmm3
	MULSD xmm5, [rel _yepMath_Exp_V64f_V64f_K10_constants.c2]
	ADDSD xmm5, xmm4
	MULSD xmm3, [rel _yepMath_Exp_V64f_V64f_K10_constants.c3]
	ADDSD xmm5, xmm3
	MOVDQA xmm3, xmm2
	PMINSW xmm3,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c4]
	PMAXSW xmm3,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c5]
	PSUBD xmm2, xmm3
	MOVDQA xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c4]
	PADDD xmm3, xmm1
	PADDD xmm2, xmm1
	MOVSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c6]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c7]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c8]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c9]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c10]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c11]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c12]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c13]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c14]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_K10_constants.c15]
	MULSD xmm1, xmm5
	MULSD xmm1, xmm5
	ADDSD xmm1, xmm5
	MULSD xmm1, xmm3
	ADDSD xmm1, xmm3
	MULSD xmm1, xmm2
	MOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_K10_constants.c16]
	CMPLESD xmm5, xmm4
	MOVSD xmm3, [rel _yepMath_Exp_V64f_V64f_K10_constants.c17]
	ANDPS xmm3, xmm5
	ANDNPS xmm5, xmm1
	ORPS xmm5, xmm3
	CMPLTSD xmm4, [rel _yepMath_Exp_V64f_V64f_K10_constants.c18]
	ANDNPD xmm4, xmm5
	MOVSD [rdx], xmm4
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	MOVAPS xmm6, [dword rsp + 448]
	MOVAPS xmm7, [dword rsp + 464]
	MOVAPS xmm8, [dword rsp + 480]
	MOVAPS xmm9, [dword rsp + 496]
	MOVAPS xmm10, [dword rsp + 512]
	MOVAPS xmm11, [dword rsp + 528]
	MOVAPS xmm12, [dword rsp + 544]
	MOVAPS xmm13, [dword rsp + 560]
	MOVAPS xmm14, [dword rsp + 576]
	MOVAPS xmm15, [dword rsp + 592]
	ADD rsp, 616
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	MOVAPD xmm4, [rcx]
	MOVAPD xmm5, xmm4
	MOVAPD xmm3,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c19]
	MULPD xmm5, xmm3
	MOVAPD xmm2,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c20]
	ADDPD xmm5, xmm2
	MOVDQA xmm1, xmm5
	PSLLQ xmm1, 52
	SUBPD xmm5, xmm2
	MOVAPS xmm0, xmm5
	MULPD xmm0,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	ADDPD xmm0, xmm4
	MULPD xmm5,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	ADDPD xmm0, xmm5
	MOVDQA xmm4,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c4]
	MOVAPD xmm5, xmm1
	PMINSW xmm5, xmm4
	MOVDQA xmm6,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c5]
	PMAXSW xmm5, xmm6
	PSUBD xmm1, xmm5
	MOVDQA xmm7,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c4]
	PADDD xmm5, xmm7
	MOVDQA   [rsp + 160], xmm5
	PADDD xmm1, xmm7
	MOVDQA   [rsp + 176], xmm1
	MOVAPD xmm5, [byte rcx + 16]
	MOVAPD xmm1, xmm5
	MULPD xmm1, xmm3
	ADDPD xmm1, xmm2
	MOVDQA xmm8, xmm1
	PSLLQ xmm8, 52
	SUBPD xmm1, xmm2
	MOVAPS xmm9, xmm1
	MULPD xmm9,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	ADDPD xmm9, xmm5
	MULPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	ADDPD xmm9, xmm1
	MOVAPD xmm5, xmm8
	PMINSW xmm5, xmm4
	PMAXSW xmm5, xmm6
	PSUBD xmm8, xmm5
	PADDD xmm5, xmm7
	MOVDQA   [rsp + 192], xmm5
	PADDD xmm8, xmm7
	MOVDQA   [rsp + 208], xmm8
	MOVAPD xmm5, [byte rcx + 32]
	MOVAPD xmm1, xmm5
	MULPD xmm1, xmm3
	ADDPD xmm1, xmm2
	MOVDQA xmm8, xmm1
	PSLLQ xmm8, 52
	SUBPD xmm1, xmm2
	MOVAPS xmm10, xmm1
	MULPD xmm10,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	ADDPD xmm10, xmm5
	MULPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	ADDPD xmm10, xmm1
	MOVAPD xmm5, xmm8
	PMINSW xmm5, xmm4
	PMAXSW xmm5, xmm6
	PSUBD xmm8, xmm5
	PADDD xmm5, xmm7
	MOVDQA   [rsp + 224], xmm5
	PADDD xmm8, xmm7
	MOVDQA   [rsp + 240], xmm8
	MOVAPD xmm5, [byte rcx + 48]
	MOVAPD xmm1, xmm5
	MULPD xmm1, xmm3
	ADDPD xmm1, xmm2
	MOVDQA xmm8, xmm1
	PSLLQ xmm8, 52
	SUBPD xmm1, xmm2
	MOVAPS xmm11, xmm1
	MULPD xmm11,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	ADDPD xmm11, xmm5
	MULPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	ADDPD xmm11, xmm1
	MOVAPD xmm5, xmm8
	PMINSW xmm5, xmm4
	PMAXSW xmm5, xmm6
	PSUBD xmm8, xmm5
	PADDD xmm5, xmm7
	MOVDQA   [rsp + 256], xmm5
	PADDD xmm8, xmm7
	MOVDQA   [rsp + 272], xmm8
	MOVAPD xmm5, [byte rcx + 64]
	MOVAPD xmm1, xmm5
	MULPD xmm1, xmm3
	ADDPD xmm1, xmm2
	MOVDQA xmm8, xmm1
	PSLLQ xmm8, 52
	SUBPD xmm1, xmm2
	MOVAPS xmm12, xmm1
	MULPD xmm12,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	ADDPD xmm12, xmm5
	MULPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	ADDPD xmm12, xmm1
	MOVAPD xmm5, xmm8
	PMINSW xmm5, xmm4
	PMAXSW xmm5, xmm6
	PSUBD xmm8, xmm5
	PADDD xmm5, xmm7
	MOVDQA   [rsp + 288], xmm5
	PADDD xmm8, xmm7
	MOVDQA   [rsp + 304], xmm8
	MOVAPD xmm5, [byte rcx + 80]
	MOVAPD xmm1, xmm5
	MULPD xmm1, xmm3
	ADDPD xmm1, xmm2
	MOVDQA xmm8, xmm1
	PSLLQ xmm8, 52
	SUBPD xmm1, xmm2
	MOVAPS xmm13, xmm1
	MULPD xmm13,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	ADDPD xmm13, xmm5
	MULPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	ADDPD xmm13, xmm1
	MOVAPD xmm5, xmm8
	PMINSW xmm5, xmm4
	PMAXSW xmm5, xmm6
	PSUBD xmm8, xmm5
	PADDD xmm5, xmm7
	MOVDQA   [rsp + 320], xmm5
	PADDD xmm8, xmm7
	MOVDQA   [rsp + 336], xmm8
	MOVAPD xmm5, [byte rcx + 96]
	MOVAPD xmm1, xmm5
	MULPD xmm1, xmm3
	ADDPD xmm1, xmm2
	MOVDQA xmm8, xmm1
	PSLLQ xmm8, 52
	SUBPD xmm1, xmm2
	MOVAPS xmm14, xmm1
	MULPD xmm14,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	ADDPD xmm14, xmm5
	MULPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	ADDPD xmm14, xmm1
	MOVAPS   [rsp + 352], xmm14
	MOVAPD xmm5, xmm8
	PMINSW xmm5, xmm4
	PMAXSW xmm5, xmm6
	PSUBD xmm8, xmm5
	PADDD xmm5, xmm7
	MOVDQA   [rsp + 368], xmm5
	PADDD xmm8, xmm7
	MOVDQA   [rsp + 384], xmm8
	MOVAPD xmm5, [byte rcx + 112]
	MOVAPD xmm1, xmm5
	MULPD xmm1, xmm3
	ADDPD xmm1, xmm2
	MOVDQA xmm3, xmm1
	PSLLQ xmm3, 52
	SUBPD xmm1, xmm2
	MOVAPS xmm2, xmm1
	MULPD xmm2,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	ADDPD xmm2, xmm5
	MULPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	ADDPD xmm2, xmm1
	MOVAPS   [rsp + 400], xmm2
	MOVAPD xmm5, xmm3
	PMINSW xmm5, xmm4
	PMAXSW xmm5, xmm6
	PSUBD xmm3, xmm5
	PADDD xmm5, xmm7
	MOVDQA   [rsp + 416], xmm5
	PADDD xmm3, xmm7
	MOVDQA   [rsp + 432], xmm3
	MOVAPS xmm4,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c23]
	MOVAPS xmm5, xmm4
	MOVAPS xmm3, xmm4
	MOVAPS xmm2, xmm4
	MOVAPS xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c23]
	MOVAPS xmm6, xmm1
	MOVAPS xmm7, xmm1
	MOVAPS xmm8, xmm1
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c24]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c25]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c26]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c27]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c28]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c29]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c30]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c31]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c32]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MULPD xmm4, xmm0
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm0
	MULPD xmm5, xmm9
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm9
	MULPD xmm3, xmm10
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm10
	MULPD xmm2, xmm11
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm11
	MULPD xmm1, xmm12
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm12
	MULPD xmm6, xmm13
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm13
	MOVAPS xmm0,   [rsp + 352]
	MULPD xmm7, xmm0
	MULPD xmm7, xmm0
	ADDPD xmm7, xmm0
	MOVAPS xmm0,   [rsp + 400]
	MULPD xmm8, xmm0
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm0
	MOVAPS xmm0,   [rsp + 160]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm0
	MOVAPS xmm0,   [rsp + 192]
	MULPD xmm5, xmm0
	ADDPD xmm5, xmm0
	MOVAPS xmm0,   [rsp + 224]
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm0
	MOVAPS xmm0,   [rsp + 256]
	MULPD xmm2, xmm0
	ADDPD xmm2, xmm0
	MOVAPS xmm0,   [rsp + 288]
	MULPD xmm1, xmm0
	ADDPD xmm1, xmm0
	MOVAPS xmm0,   [rsp + 320]
	MULPD xmm6, xmm0
	ADDPD xmm6, xmm0
	MOVAPS xmm0,   [rsp + 368]
	MULPD xmm7, xmm0
	ADDPD xmm7, xmm0
	MOVAPS xmm0,   [rsp + 416]
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm0
	MULPD xmm4,   [rsp + 176]
	MULPD xmm5,   [rsp + 208]
	MULPD xmm3,   [rsp + 240]
	MULPD xmm2,   [rsp + 272]
	MULPD xmm1,   [rsp + 304]
	MULPD xmm6,   [rsp + 336]
	MULPD xmm7,   [rsp + 384]
	MULPD xmm8,   [rsp + 432]
	MOVAPS xmm0, [rcx]
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c33]
	MOVAPS xmm10, xmm9
	CMPLEPD xmm10, xmm0
	MOVAPS xmm11,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c34]
	ANDPS xmm11, xmm10
	ANDNPS xmm10, xmm4
	ORPS xmm10, xmm11
	MOVAPD xmm4,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c35]
	CMPLTPD xmm0, xmm4
	ANDNPD xmm0, xmm10
	MOVUPS [rdx], xmm0
	MOVAPS xmm0, [byte rcx + 16]
	MOVAPS xmm10, xmm9
	CMPLEPD xmm10, xmm0
	MOVAPS xmm11,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c34]
	ANDPS xmm11, xmm10
	ANDNPS xmm10, xmm5
	ORPS xmm10, xmm11
	CMPLTPD xmm0, xmm4
	ANDNPD xmm0, xmm10
	MOVUPS [byte rdx + 16], xmm0
	MOVAPS xmm5, [byte rcx + 32]
	MOVAPS xmm0, xmm9
	CMPLEPD xmm0, xmm5
	MOVAPS xmm10,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c34]
	ANDPS xmm10, xmm0
	ANDNPS xmm0, xmm3
	ORPS xmm0, xmm10
	CMPLTPD xmm5, xmm4
	ANDNPD xmm5, xmm0
	MOVUPS [byte rdx + 32], xmm5
	MOVAPS xmm5, [byte rcx + 48]
	MOVAPS xmm3, xmm9
	CMPLEPD xmm3, xmm5
	MOVAPS xmm0,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c34]
	ANDPS xmm0, xmm3
	ANDNPS xmm3, xmm2
	ORPS xmm3, xmm0
	CMPLTPD xmm5, xmm4
	ANDNPD xmm5, xmm3
	MOVUPS [byte rdx + 48], xmm5
	MOVAPS xmm5, [byte rcx + 64]
	MOVAPS xmm3, xmm9
	CMPLEPD xmm3, xmm5
	MOVAPS xmm2,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c34]
	ANDPS xmm2, xmm3
	ANDNPS xmm3, xmm1
	ORPS xmm3, xmm2
	CMPLTPD xmm5, xmm4
	ANDNPD xmm5, xmm3
	MOVUPS [byte rdx + 64], xmm5
	MOVAPS xmm5, [byte rcx + 80]
	MOVAPS xmm3, xmm9
	CMPLEPD xmm3, xmm5
	MOVAPS xmm2,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c34]
	ANDPS xmm2, xmm3
	ANDNPS xmm3, xmm6
	ORPS xmm3, xmm2
	CMPLTPD xmm5, xmm4
	ANDNPD xmm5, xmm3
	MOVUPS [byte rdx + 80], xmm5
	MOVAPS xmm5, [byte rcx + 96]
	MOVAPS xmm3, xmm9
	CMPLEPD xmm3, xmm5
	MOVAPS xmm2,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c34]
	ANDPS xmm2, xmm3
	ANDNPS xmm3, xmm7
	ORPS xmm3, xmm2
	CMPLTPD xmm5, xmm4
	ANDNPD xmm5, xmm3
	MOVUPS [byte rdx + 96], xmm5
	MOVAPS xmm5, [byte rcx + 112]
	MOVAPS xmm3, xmm9
	CMPLEPD xmm3, xmm5
	MOVAPS xmm2,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c34]
	ANDPS xmm2, xmm3
	ANDNPS xmm3, xmm8
	ORPS xmm3, xmm2
	CMPLTPD xmm5, xmm4
	ANDNPD xmm5, xmm3
	MOVUPS [byte rdx + 112], xmm5
	JMP .process_batch_increment

section .rdata$e rdata align=32
_yepMath_Exp_V64f_V64f_Nehalem_constants:
	.c0: DQ 0x4338000000000000
	.c1: DQ 0x3FF71547652B82FE
	.c2: DQ 0xBFE62E42FEFA3800
	.c3: DQ 0xBD2EF35793C76730
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c5: DQ 0xC020000000000000, 0xC020000000000000
	.c6: DQ 0x3E5AE9043CA87A40
	.c7: DQ 0x3E928A284098D813
	.c8: DQ 0x3EC71DE71651CE7A
	.c9: DQ 0x3EFA019A6AC02A7D
	.c10: DQ 0x3F2A01A017EEB164
	.c11: DQ 0x3F56C16C17F2BF99
	.c12: DQ 0x3F811111111173CA
	.c13: DQ 0x3FA5555555552115
	.c14: DQ 0x3FC5555555555540
	.c15: DQ 0x3FE0000000000005
	.c16: DQ 0x40862E42FEFA39EF
	.c18: DQ 0xC0874910D52D3051
	.c17: DQ 0x7FF0000000000000, 0x7FF0000000000000
	.c19: DQ 0x3FF71547652B82FE, 0x3FF71547652B82FE
	.c20: DQ 0x4338000000000000, 0x4338000000000000
	.c21: DQ 0xBFE62E42FEFA3800, 0xBFE62E42FEFA3800
	.c22: DQ 0xBD2EF35793C76730, 0xBD2EF35793C76730
	.c23: DQ 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40
	.c24: DQ 0x3E928A284098D813, 0x3E928A284098D813
	.c25: DQ 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A
	.c26: DQ 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D
	.c27: DQ 0x3F2A01A017EEB164, 0x3F2A01A017EEB164
	.c28: DQ 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99
	.c29: DQ 0x3F811111111173CA, 0x3F811111111173CA
	.c30: DQ 0x3FA5555555552115, 0x3FA5555555552115
	.c31: DQ 0x3FC5555555555540, 0x3FC5555555555540
	.c32: DQ 0x3FE0000000000005, 0x3FE0000000000005
	.c33: DQ 0x40862E42FEFA39EF, 0x40862E42FEFA39EF
	.c34: DQ 0xC0874910D52D3051, 0xC0874910D52D3051


section .text$e code align=16
global _yepMath_Exp_V64f_V64f_Nehalem
_yepMath_Exp_V64f_V64f_Nehalem:
	.ENTRY:
	SUB rsp, 616
	MOVAPS [dword rsp + 448], xmm6
	MOVAPS [dword rsp + 464], xmm7
	MOVAPS [dword rsp + 480], xmm8
	MOVAPS [dword rsp + 496], xmm9
	MOVAPS [dword rsp + 512], xmm10
	MOVAPS [dword rsp + 528], xmm11
	MOVAPS [dword rsp + 544], xmm12
	MOVAPS [dword rsp + 560], xmm13
	MOVAPS [dword rsp + 576], xmm14
	MOVAPS [dword rsp + 592], xmm15
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 15
	JZ .source_16b_aligned
	.source_16b_misaligned:
	MOVSD xmm4, [rcx]
	MOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c0]
	MOVAPS xmm3, xmm4
	MULSD xmm3, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c1]
	ADDSD xmm3, xmm5
	MOVDQA xmm2, xmm3
	PSLLQ xmm2, 52
	SUBSD xmm3, xmm5
	MOVAPS xmm5, xmm3
	MULSD xmm5, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c2]
	ADDSD xmm5, xmm4
	MULSD xmm3, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c3]
	ADDSD xmm5, xmm3
	MOVDQA xmm3, xmm2
	PMINSW xmm3,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c4]
	PMAXSW xmm3,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c5]
	PSUBD xmm2, xmm3
	MOVDQA xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c4]
	PADDD xmm3, xmm1
	PADDD xmm2, xmm1
	MOVSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c6]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c7]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c8]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c9]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c10]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c11]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c12]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c13]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c14]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c15]
	MULSD xmm1, xmm5
	MULSD xmm1, xmm5
	ADDSD xmm1, xmm5
	MULSD xmm1, xmm3
	ADDSD xmm1, xmm3
	MULSD xmm1, xmm2
	MOVSD xmm0, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c16]
	CMPLESD xmm0, xmm4
	BLENDVPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c17], xmm0
	CMPLTSD xmm4, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c18]
	ANDNPD xmm4, xmm1
	MOVSD [rdx], xmm4
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 15
	JNZ .source_16b_misaligned
	.source_16b_aligned:
	SUB r8, 16
	JB .process_restore
	align 32
	.process_batch_fast:
	MOVAPD xmm4, [rcx]
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c19]
	MULPD xmm4, xmm5
	MOVAPD xmm3,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c20]
	ADDPD xmm4, xmm3
	MOVAPD xmm2, [byte rcx + 16]
	MULPD xmm2, xmm5
	ADDPD xmm2, xmm3
	MOVAPD xmm1, [byte rcx + 32]
	MULPD xmm1, xmm5
	ADDPD xmm1, xmm3
	MOVAPD xmm0, [byte rcx + 48]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm3
	MOVAPD xmm6, [byte rcx + 64]
	MULPD xmm6, xmm5
	ADDPD xmm6, xmm3
	MOVAPD xmm7, [byte rcx + 80]
	MULPD xmm7, xmm5
	ADDPD xmm7, xmm3
	MOVAPD xmm8, [byte rcx + 96]
	MULPD xmm8, xmm5
	ADDPD xmm8, xmm3
	MOVAPD xmm9, [byte rcx + 112]
	MULPD xmm9, xmm5
	ADDPD xmm9, xmm3
	MOVDQA xmm5,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c4]
	MOVDQA xmm10, xmm4
	PSLLQ xmm10, 52
	PADDD xmm10, xmm5
	MOVDQA   [rsp], xmm10
	SUBPD xmm4, xmm3
	MOV rax, 13872817421961305113
	MOVDQA xmm10, xmm2
	PSLLQ xmm10, 52
	PADDD xmm10, xmm5
	MOVDQA   [rsp + 16], xmm10
	SUBPD xmm2, xmm3
	MOV r10, 4649451482093607591
	MOVDQA xmm10, xmm1
	PSLLQ xmm10, 52
	PADDD xmm10, xmm5
	MOVDQA   [rsp + 32], xmm10
	SUBPD xmm1, xmm3
	MOV r11, [rcx]
	MOVDQA xmm10, xmm0
	PSLLQ xmm10, 52
	PADDD xmm10, xmm5
	MOVDQA   [rsp + 48], xmm10
	SUBPD xmm0, xmm3
	CMP r11, rax
	JA .process_batch_full
	MOVDQA xmm10, xmm6
	PSLLQ xmm10, 52
	PADDD xmm10, xmm5
	MOVDQA   [rsp + 64], xmm10
	SUBPD xmm6, xmm3
	CMP r11, r10
	JG .process_batch_full
	MOVDQA xmm10, xmm7
	PSLLQ xmm10, 52
	PADDD xmm10, xmm5
	MOVDQA   [rsp + 80], xmm10
	SUBPD xmm7, xmm3
	MOV r11, [byte rcx + 8]
	MOVDQA xmm10, xmm8
	PSLLQ xmm10, 52
	PADDD xmm10, xmm5
	MOVDQA   [rsp + 96], xmm10
	SUBPD xmm8, xmm3
	CMP r11, rax
	JA .process_batch_full
	MOVDQA xmm10, xmm9
	PSLLQ xmm10, 52
	PADDD xmm10, xmm5
	MOVDQA   [rsp + 112], xmm10
	SUBPD xmm9, xmm3
	CMP r11, r10
	JG .process_batch_full
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	MOVAPS xmm3, xmm4
	MULPD xmm3, xmm5
	ADDPD xmm3, [rcx]
	MOVAPS xmm10, xmm2
	MULPD xmm10, xmm5
	ADDPD xmm10, [byte rcx + 16]
	MOVAPS xmm11, xmm1
	MULPD xmm11, xmm5
	ADDPD xmm11, [byte rcx + 32]
	MOVAPS xmm12, xmm0
	MULPD xmm12, xmm5
	ADDPD xmm12, [byte rcx + 48]
	MOVAPS xmm13, xmm6
	MULPD xmm13, xmm5
	ADDPD xmm13, [byte rcx + 64]
	MOVAPS xmm14, xmm7
	MULPD xmm14, xmm5
	ADDPD xmm14, [byte rcx + 80]
	MOVAPS xmm15, xmm8
	MULPD xmm15, xmm5
	ADDPD xmm15, [byte rcx + 96]
	MOVAPS   [rsp + 128], xmm15
	MOVAPS xmm15, xmm9
	MULPD xmm15, xmm5
	ADDPD xmm15, [byte rcx + 112]
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	MULPD xmm4, xmm5
	ADDPD xmm3, xmm4
	MOV r11, [byte rcx + 16]
	MULPD xmm2, xmm5
	ADDPD xmm10, xmm2
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm1, xmm5
	ADDPD xmm11, xmm1
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm0, xmm5
	ADDPD xmm12, xmm0
	MOV r11, [byte rcx + 24]
	MOVAPS xmm4,   [rsp + 128]
	MULPD xmm6, xmm5
	ADDPD xmm13, xmm6
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm7, xmm5
	ADDPD xmm14, xmm7
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm8, xmm5
	ADDPD xmm4, xmm8
	MOVAPS   [rsp + 128], xmm4
	MULPD xmm9, xmm5
	ADDPD xmm15, xmm9
	MOVAPS   [rsp + 144], xmm15
	MOVAPS xmm4,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c23]
	MOVAPS xmm5,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c24]
	MOVAPS xmm2, xmm4
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	MOVAPS xmm1, xmm4
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	MOVAPS xmm0, xmm4
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	MOVAPS xmm6, xmm4
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	MOVAPS xmm7, xmm4
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	MOVAPS xmm8, xmm4
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	MOVAPS xmm9, xmm4
	MULPD xmm9,   [rsp + 128]
	ADDPD xmm9, xmm5
	MOV r11, [byte rcx + 32]
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm5
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c25]
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	MOV r11, [byte rcx + 40]
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	MOV r11, [byte rcx + 48]
	MULPD xmm9,   [rsp + 128]
	ADDPD xmm9, xmm5
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm5
	CMP r11, r10
	JG .process_batch_full
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c26]
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	MOV r11, [byte rcx + 56]
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	MOV r11, [byte rcx + 64]
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm9,   [rsp + 128]
	ADDPD xmm9, xmm5
	MOV r11, [byte rcx + 72]
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm5
	CMP r11, rax
	JA .process_batch_full
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c27]
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	MOV r11, [byte rcx + 80]
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	MOV r11, [byte rcx + 88]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm9,   [rsp + 128]
	ADDPD xmm9, xmm5
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm5
	MOV r11, [byte rcx + 96]
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c28]
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	MOV r11, [byte rcx + 104]
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	MOV r11, [byte rcx + 112]
	MULPD xmm9,   [rsp + 128]
	ADDPD xmm9, xmm5
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm5
	CMP r11, r10
	JG .process_batch_full
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c29]
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	MOV r11, [byte rcx + 120]
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	MULPD xmm9,   [rsp + 128]
	ADDPD xmm9, xmm5
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm5
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c30]
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	MULPD xmm9,   [rsp + 128]
	ADDPD xmm9, xmm5
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm5
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c31]
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	MULPD xmm9,   [rsp + 128]
	ADDPD xmm9, xmm5
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm5
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c32]
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm5
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm5
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm5
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm5
	MULPD xmm9,   [rsp + 128]
	ADDPD xmm9, xmm5
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm5
	MULPD xmm2, xmm3
	MULPD xmm2, xmm3
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm10
	MULPD xmm1, xmm10
	ADDPD xmm1, xmm10
	MULPD xmm0, xmm11
	MULPD xmm0, xmm11
	ADDPD xmm0, xmm11
	MULPD xmm6, xmm12
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm12
	MULPD xmm7, xmm13
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm13
	MULPD xmm8, xmm14
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm14
	MOVAPS xmm5,   [rsp + 128]
	MULPD xmm9, xmm5
	MULPD xmm9, xmm5
	ADDPD xmm9, xmm5
	MOVAPS xmm5,   [rsp + 144]
	MULPD xmm4, xmm5
	MULPD xmm4, xmm5
	ADDPD xmm4, xmm5
	MOVAPS xmm5,   [rsp]
	MULPD xmm2, xmm5
	ADDPD xmm2, xmm5
	MOVUPS [rdx], xmm2
	MOVAPS xmm5,   [rsp + 16]
	MULPD xmm1, xmm5
	ADDPD xmm1, xmm5
	MOVUPS [byte rdx + 16], xmm1
	MOVAPS xmm5,   [rsp + 32]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm5
	MOVUPS [byte rdx + 32], xmm0
	MOVAPS xmm5,   [rsp + 48]
	MULPD xmm6, xmm5
	ADDPD xmm6, xmm5
	MOVUPS [byte rdx + 48], xmm6
	MOVAPS xmm5,   [rsp + 64]
	MULPD xmm7, xmm5
	ADDPD xmm7, xmm5
	MOVUPS [byte rdx + 64], xmm7
	MOVAPS xmm5,   [rsp + 80]
	MULPD xmm8, xmm5
	ADDPD xmm8, xmm5
	MOVUPS [byte rdx + 80], xmm8
	MOVAPS xmm5,   [rsp + 96]
	MULPD xmm9, xmm5
	ADDPD xmm9, xmm5
	MOVUPS [byte rdx + 96], xmm9
	MOVAPS xmm5,   [rsp + 112]
	MULPD xmm4, xmm5
	ADDPD xmm4, xmm5
	MOVUPS [byte rdx + 112], xmm4
	.process_batch_increment:
	ADD rcx, 128
	ADD rdx, 128
	SUB r8, 16
	JAE .process_batch_fast
	.process_restore:
	ADD r8, 16
	JZ .return_ok
	.process_single:
	MOVSD xmm4, [rcx]
	MOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c0]
	MOVAPS xmm3, xmm4
	MULSD xmm3, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c1]
	ADDSD xmm3, xmm5
	MOVDQA xmm2, xmm3
	PSLLQ xmm2, 52
	SUBSD xmm3, xmm5
	MOVAPS xmm5, xmm3
	MULSD xmm5, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c2]
	ADDSD xmm5, xmm4
	MULSD xmm3, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c3]
	ADDSD xmm5, xmm3
	MOVDQA xmm3, xmm2
	PMINSW xmm3,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c4]
	PMAXSW xmm3,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c5]
	PSUBD xmm2, xmm3
	MOVDQA xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c4]
	PADDD xmm3, xmm1
	PADDD xmm2, xmm1
	MOVSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c6]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c7]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c8]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c9]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c10]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c11]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c12]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c13]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c14]
	MULSD xmm1, xmm5
	ADDSD xmm1, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c15]
	MULSD xmm1, xmm5
	MULSD xmm1, xmm5
	ADDSD xmm1, xmm5
	MULSD xmm1, xmm3
	ADDSD xmm1, xmm3
	MULSD xmm1, xmm2
	MOVSD xmm0, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c16]
	CMPLESD xmm0, xmm4
	BLENDVPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c17], xmm0
	CMPLTSD xmm4, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c18]
	ANDNPD xmm4, xmm1
	MOVSD [rdx], xmm4
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	MOVAPS xmm6, [dword rsp + 448]
	MOVAPS xmm7, [dword rsp + 464]
	MOVAPS xmm8, [dword rsp + 480]
	MOVAPS xmm9, [dword rsp + 496]
	MOVAPS xmm10, [dword rsp + 512]
	MOVAPS xmm11, [dword rsp + 528]
	MOVAPS xmm12, [dword rsp + 544]
	MOVAPS xmm13, [dword rsp + 560]
	MOVAPS xmm14, [dword rsp + 576]
	MOVAPS xmm15, [dword rsp + 592]
	ADD rsp, 616
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	MOVAPD xmm4, [rcx]
	MOVAPD xmm5, xmm4
	MOVAPD xmm3,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c19]
	MULPD xmm5, xmm3
	MOVAPD xmm2,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c20]
	ADDPD xmm5, xmm2
	MOVDQA xmm1, xmm5
	PSLLQ xmm1, 52
	SUBPD xmm5, xmm2
	MOVAPS xmm0, xmm5
	MULPD xmm0,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	ADDPD xmm0, xmm4
	MULPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	ADDPD xmm0, xmm5
	MOVDQA xmm4,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c4]
	MOVAPD xmm5, xmm1
	PMINSW xmm5, xmm4
	MOVDQA xmm6,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c5]
	PMAXSW xmm5, xmm6
	PSUBD xmm1, xmm5
	MOVDQA xmm7,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c4]
	PADDD xmm5, xmm7
	MOVDQA   [rsp + 160], xmm5
	PADDD xmm1, xmm7
	MOVDQA   [rsp + 176], xmm1
	MOVAPD xmm5, [byte rcx + 16]
	MOVAPD xmm1, xmm5
	MULPD xmm1, xmm3
	ADDPD xmm1, xmm2
	MOVDQA xmm8, xmm1
	PSLLQ xmm8, 52
	SUBPD xmm1, xmm2
	MOVAPS xmm9, xmm1
	MULPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	ADDPD xmm9, xmm5
	MULPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	ADDPD xmm9, xmm1
	MOVAPD xmm5, xmm8
	PMINSW xmm5, xmm4
	PMAXSW xmm5, xmm6
	PSUBD xmm8, xmm5
	PADDD xmm5, xmm7
	MOVDQA   [rsp + 192], xmm5
	PADDD xmm8, xmm7
	MOVDQA   [rsp + 208], xmm8
	MOVAPD xmm5, [byte rcx + 32]
	MOVAPD xmm1, xmm5
	MULPD xmm1, xmm3
	ADDPD xmm1, xmm2
	MOVDQA xmm8, xmm1
	PSLLQ xmm8, 52
	SUBPD xmm1, xmm2
	MOVAPS xmm10, xmm1
	MULPD xmm10,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	ADDPD xmm10, xmm5
	MULPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	ADDPD xmm10, xmm1
	MOVAPD xmm5, xmm8
	PMINSW xmm5, xmm4
	PMAXSW xmm5, xmm6
	PSUBD xmm8, xmm5
	PADDD xmm5, xmm7
	MOVDQA   [rsp + 224], xmm5
	PADDD xmm8, xmm7
	MOVDQA   [rsp + 240], xmm8
	MOVAPD xmm5, [byte rcx + 48]
	MOVAPD xmm1, xmm5
	MULPD xmm1, xmm3
	ADDPD xmm1, xmm2
	MOVDQA xmm8, xmm1
	PSLLQ xmm8, 52
	SUBPD xmm1, xmm2
	MOVAPS xmm11, xmm1
	MULPD xmm11,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	ADDPD xmm11, xmm5
	MULPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	ADDPD xmm11, xmm1
	MOVAPD xmm5, xmm8
	PMINSW xmm5, xmm4
	PMAXSW xmm5, xmm6
	PSUBD xmm8, xmm5
	PADDD xmm5, xmm7
	MOVDQA   [rsp + 256], xmm5
	PADDD xmm8, xmm7
	MOVDQA   [rsp + 272], xmm8
	MOVAPD xmm5, [byte rcx + 64]
	MOVAPD xmm1, xmm5
	MULPD xmm1, xmm3
	ADDPD xmm1, xmm2
	MOVDQA xmm8, xmm1
	PSLLQ xmm8, 52
	SUBPD xmm1, xmm2
	MOVAPS xmm12, xmm1
	MULPD xmm12,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	ADDPD xmm12, xmm5
	MULPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	ADDPD xmm12, xmm1
	MOVAPD xmm5, xmm8
	PMINSW xmm5, xmm4
	PMAXSW xmm5, xmm6
	PSUBD xmm8, xmm5
	PADDD xmm5, xmm7
	MOVDQA   [rsp + 288], xmm5
	PADDD xmm8, xmm7
	MOVDQA   [rsp + 304], xmm8
	MOVAPD xmm5, [byte rcx + 80]
	MOVAPD xmm1, xmm5
	MULPD xmm1, xmm3
	ADDPD xmm1, xmm2
	MOVDQA xmm8, xmm1
	PSLLQ xmm8, 52
	SUBPD xmm1, xmm2
	MOVAPS xmm13, xmm1
	MULPD xmm13,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	ADDPD xmm13, xmm5
	MULPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	ADDPD xmm13, xmm1
	MOVAPD xmm5, xmm8
	PMINSW xmm5, xmm4
	PMAXSW xmm5, xmm6
	PSUBD xmm8, xmm5
	PADDD xmm5, xmm7
	MOVDQA   [rsp + 320], xmm5
	PADDD xmm8, xmm7
	MOVDQA   [rsp + 336], xmm8
	MOVAPD xmm5, [byte rcx + 96]
	MOVAPD xmm1, xmm5
	MULPD xmm1, xmm3
	ADDPD xmm1, xmm2
	MOVDQA xmm8, xmm1
	PSLLQ xmm8, 52
	SUBPD xmm1, xmm2
	MOVAPS xmm14, xmm1
	MULPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	ADDPD xmm14, xmm5
	MULPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	ADDPD xmm14, xmm1
	MOVAPS   [rsp + 352], xmm14
	MOVAPD xmm5, xmm8
	PMINSW xmm5, xmm4
	PMAXSW xmm5, xmm6
	PSUBD xmm8, xmm5
	PADDD xmm5, xmm7
	MOVDQA   [rsp + 368], xmm5
	PADDD xmm8, xmm7
	MOVDQA   [rsp + 384], xmm8
	MOVAPD xmm5, [byte rcx + 112]
	MOVAPD xmm1, xmm5
	MULPD xmm1, xmm3
	ADDPD xmm1, xmm2
	MOVDQA xmm3, xmm1
	PSLLQ xmm3, 52
	SUBPD xmm1, xmm2
	MOVAPS xmm2, xmm1
	MULPD xmm2,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	ADDPD xmm2, xmm5
	MULPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	ADDPD xmm2, xmm1
	MOVAPS   [rsp + 400], xmm2
	MOVAPD xmm5, xmm3
	PMINSW xmm5, xmm4
	PMAXSW xmm5, xmm6
	PSUBD xmm3, xmm5
	PADDD xmm5, xmm7
	MOVDQA   [rsp + 416], xmm5
	PADDD xmm3, xmm7
	MOVDQA   [rsp + 432], xmm3
	MOVAPS xmm4,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c23]
	MOVAPS xmm5, xmm4
	MOVAPS xmm3, xmm4
	MOVAPS xmm2, xmm4
	MOVAPS xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c23]
	MOVAPS xmm6, xmm1
	MOVAPS xmm7, xmm1
	MOVAPS xmm8, xmm1
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c24]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c25]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c26]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c27]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c28]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c29]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c30]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c31]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c32]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm14
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm14
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm14
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm14
	MULPD xmm7,   [rsp + 352]
	ADDPD xmm7, xmm14
	MULPD xmm8,   [rsp + 400]
	ADDPD xmm8, xmm14
	MULPD xmm4, xmm0
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm0
	MULPD xmm5, xmm9
	MULPD xmm5, xmm9
	ADDPD xmm5, xmm9
	MULPD xmm3, xmm10
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm10
	MULPD xmm2, xmm11
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm11
	MULPD xmm1, xmm12
	MULPD xmm1, xmm12
	ADDPD xmm1, xmm12
	MULPD xmm6, xmm13
	MULPD xmm6, xmm13
	ADDPD xmm6, xmm13
	MOVAPS xmm0,   [rsp + 352]
	MULPD xmm7, xmm0
	MULPD xmm7, xmm0
	ADDPD xmm7, xmm0
	MOVAPS xmm0,   [rsp + 400]
	MULPD xmm8, xmm0
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm0
	MOVAPS xmm0,   [rsp + 160]
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm0
	MOVAPS xmm0,   [rsp + 192]
	MULPD xmm5, xmm0
	ADDPD xmm5, xmm0
	MOVAPS xmm0,   [rsp + 224]
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm0
	MOVAPS xmm0,   [rsp + 256]
	MULPD xmm2, xmm0
	ADDPD xmm2, xmm0
	MOVAPS xmm0,   [rsp + 288]
	MULPD xmm1, xmm0
	ADDPD xmm1, xmm0
	MOVAPS xmm0,   [rsp + 320]
	MULPD xmm6, xmm0
	ADDPD xmm6, xmm0
	MOVAPS xmm0,   [rsp + 368]
	MULPD xmm7, xmm0
	ADDPD xmm7, xmm0
	MOVAPS xmm0,   [rsp + 416]
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm0
	MULPD xmm4,   [rsp + 176]
	MULPD xmm5,   [rsp + 208]
	MULPD xmm3,   [rsp + 240]
	MULPD xmm2,   [rsp + 272]
	MULPD xmm1,   [rsp + 304]
	MULPD xmm6,   [rsp + 336]
	MULPD xmm7,   [rsp + 384]
	MULPD xmm8,   [rsp + 432]
	MOVAPS xmm9, [rcx]
	MOVAPD xmm10,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c33]
	MOVAPS xmm0, xmm10
	CMPLEPD xmm0, xmm9
	MOVAPD xmm11,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c17]
	BLENDVPD xmm4, xmm11, xmm0
	MOVAPD xmm12,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c34]
	CMPLTPD xmm9, xmm12
	ANDNPD xmm9, xmm4
	MOVUPS [rdx], xmm9
	MOVAPS xmm4, [byte rcx + 16]
	MOVAPS xmm0, xmm10
	CMPLEPD xmm0, xmm4
	BLENDVPD xmm5, xmm11, xmm0
	CMPLTPD xmm4, xmm12
	ANDNPD xmm4, xmm5
	MOVUPS [byte rdx + 16], xmm4
	MOVAPS xmm4, [byte rcx + 32]
	MOVAPS xmm0, xmm10
	CMPLEPD xmm0, xmm4
	BLENDVPD xmm3, xmm11, xmm0
	CMPLTPD xmm4, xmm12
	ANDNPD xmm4, xmm3
	MOVUPS [byte rdx + 32], xmm4
	MOVAPS xmm4, [byte rcx + 48]
	MOVAPS xmm0, xmm10
	CMPLEPD xmm0, xmm4
	BLENDVPD xmm2, xmm11, xmm0
	CMPLTPD xmm4, xmm12
	ANDNPD xmm4, xmm2
	MOVUPS [byte rdx + 48], xmm4
	MOVAPS xmm4, [byte rcx + 64]
	MOVAPS xmm0, xmm10
	CMPLEPD xmm0, xmm4
	BLENDVPD xmm1, xmm11, xmm0
	CMPLTPD xmm4, xmm12
	ANDNPD xmm4, xmm1
	MOVUPS [byte rdx + 64], xmm4
	MOVAPS xmm4, [byte rcx + 80]
	MOVAPS xmm0, xmm10
	CMPLEPD xmm0, xmm4
	BLENDVPD xmm6, xmm11, xmm0
	CMPLTPD xmm4, xmm12
	ANDNPD xmm4, xmm6
	MOVUPS [byte rdx + 80], xmm4
	MOVAPS xmm4, [byte rcx + 96]
	MOVAPS xmm0, xmm10
	CMPLEPD xmm0, xmm4
	BLENDVPD xmm7, xmm11, xmm0
	CMPLTPD xmm4, xmm12
	ANDNPD xmm4, xmm7
	MOVUPS [byte rdx + 96], xmm4
	MOVAPS xmm4, [byte rcx + 112]
	MOVAPS xmm0, xmm10
	CMPLEPD xmm0, xmm4
	BLENDVPD xmm8, xmm11, xmm0
	CMPLTPD xmm4, xmm12
	ANDNPD xmm4, xmm8
	MOVUPS [byte rdx + 112], xmm4
	JMP .process_batch_increment

section .rdata$f rdata align=32
_yepMath_Exp_V64f_V64f_SandyBridge_constants:
	.c0: DQ 0x4338000000000000
	.c1: DQ 0x3FF71547652B82FE
	.c2: DQ 0xBFE62E42FEFA3800
	.c3: DQ 0xBD2EF35793C76730
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c5: DQ 0xC020000000000000, 0xC020000000000000
	.c6: DQ 0x3E5AE9043CA87A40
	.c7: DQ 0x3E928A284098D813
	.c8: DQ 0x3EC71DE71651CE7A
	.c9: DQ 0x3EFA019A6AC02A7D
	.c10: DQ 0x3F2A01A017EEB164
	.c11: DQ 0x3F56C16C17F2BF99
	.c12: DQ 0x3F811111111173CA
	.c13: DQ 0x3FA5555555552115
	.c14: DQ 0x3FC5555555555540
	.c15: DQ 0x3FE0000000000005
	.c16: DQ 0xC0874910D52D3051
	.c17: DQ 0x40862E42FEFA39EF
	.c18: DQ 0x7FF0000000000000, 0x7FF0000000000000
	ALIGN 32
	.c19: DQ 0xC08625F1A5DA9C19, 0xC08625F1A5DA9C19, 0xC08625F1A5DA9C19, 0xC08625F1A5DA9C19
	.c20: DQ 0x40862B7D369A5AA7, 0x40862B7D369A5AA7, 0x40862B7D369A5AA7, 0x40862B7D369A5AA7
	.c21: DQ 0x3FF71547652B82FE, 0x3FF71547652B82FE, 0x3FF71547652B82FE, 0x3FF71547652B82FE
	.c22: DQ 0x4338000000000000, 0x4338000000000000, 0x4338000000000000, 0x4338000000000000
	.c23: DQ 0xBFE62E42FEFA3800, 0xBFE62E42FEFA3800, 0xBFE62E42FEFA3800, 0xBFE62E42FEFA3800
	.c24: DQ 0xBD2EF35793C76730, 0xBD2EF35793C76730, 0xBD2EF35793C76730, 0xBD2EF35793C76730
	.c25: DQ 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40
	.c26: DQ 0x3E928A284098D813, 0x3E928A284098D813, 0x3E928A284098D813, 0x3E928A284098D813
	.c27: DQ 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A
	.c28: DQ 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D
	.c29: DQ 0x3F2A01A017EEB164, 0x3F2A01A017EEB164, 0x3F2A01A017EEB164, 0x3F2A01A017EEB164
	.c30: DQ 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99
	.c31: DQ 0x3F811111111173CA, 0x3F811111111173CA, 0x3F811111111173CA, 0x3F811111111173CA
	.c32: DQ 0x3FA5555555552115, 0x3FA5555555552115, 0x3FA5555555552115, 0x3FA5555555552115
	.c33: DQ 0x3FC5555555555540, 0x3FC5555555555540, 0x3FC5555555555540, 0x3FC5555555555540
	.c34: DQ 0x3FE0000000000005, 0x3FE0000000000005, 0x3FE0000000000005, 0x3FE0000000000005
	.c35: DQ 0xC0874910D52D3051, 0xC0874910D52D3051, 0xC0874910D52D3051, 0xC0874910D52D3051
	.c36: DQ 0x40862E42FEFA39EF, 0x40862E42FEFA39EF, 0x40862E42FEFA39EF, 0x40862E42FEFA39EF
	.c37: DQ 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000


section .text$f code align=16
global _yepMath_Exp_V64f_V64f_SandyBridge
_yepMath_Exp_V64f_V64f_SandyBridge:
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 1056
	VMOVAPS [dword rsp + 896], xmm6
	VMOVAPS [dword rsp + 912], xmm7
	VMOVAPS [dword rsp + 928], xmm8
	VMOVAPS [dword rsp + 944], xmm9
	VMOVAPS [dword rsp + 960], xmm10
	VMOVAPS [dword rsp + 976], xmm11
	VMOVAPS [dword rsp + 992], xmm12
	VMOVAPS [dword rsp + 1008], xmm13
	VMOVAPS [dword rsp + 1024], xmm14
	VMOVAPS [dword rsp + 1040], xmm15
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm4, [rcx]
	VMOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c0]
	VMULSD xmm3, xmm4, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c1]
	VADDSD xmm3, xmm3, xmm5
	VPSLLQ xmm2, xmm3, 52
	VSUBSD xmm3, xmm3, xmm5
	VMULSD xmm5, xmm3, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c2]
	VADDSD xmm5, xmm5, xmm4
	VMULSD xmm1, xmm3, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c3]
	VADDSD xmm5, xmm5, xmm1
	VPMINSD xmm3, xmm2,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c4]
	VPMAXSD xmm3, xmm3,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c5]
	VPSUBD xmm2, xmm2, xmm3
	VMOVDQA xmm1,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c4]
	VPADDD xmm3, xmm3, xmm1
	VPADDD xmm2, xmm2, xmm1
	VMOVSD xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c6]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c7]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c8]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c9]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c10]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c11]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c12]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c13]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c14]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c15]
	VMULSD xmm1, xmm1, xmm5
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, xmm5
	VMULSD xmm1, xmm1, xmm3
	VADDSD xmm1, xmm1, xmm3
	VMULSD xmm1, xmm1, xmm2
	VCMPLTSD xmm5, xmm4, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c16]
	VANDNPD xmm1, xmm5, xmm1
	VCMPGTSD xmm4, xmm4, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c17]
	VBLENDVPD xmm1, xmm1,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c18], xmm4
	VMOVSD [rdx], xmm1
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB r8, 32
	JB .process_restore
	align 32
	.process_batch_fast:
	VMOVAPD ymm4, [rcx]
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c19]
	VCMPLTPD ymm3, ymm4, ymm5
	VMOVAPS ymm2,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c20]
	VCMPGTPD ymm1, ymm4, ymm2
	VORPD ymm3, ymm3, ymm1
	VTESTPD ymm3, ymm3
	JNZ .process_batch_full
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c21]
	VMULPD ymm4, ymm4, ymm3
	VMOVAPS ymm1,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c22]
	VADDPD ymm4, ymm4, ymm1
	VMOVAPD ymm0, [byte rcx + 32]
	VCMPLTPD ymm6, ymm0, ymm5
	VCMPGTPD ymm7, ymm0, ymm2
	VORPD ymm6, ymm6, ymm7
	VTESTPD ymm6, ymm6
	JNZ .process_batch_full
	VMULPD ymm0, ymm0, ymm3
	VADDPD ymm0, ymm0, ymm1
	VMOVAPD ymm6, [byte rcx + 64]
	VCMPLTPD ymm7, ymm6, ymm5
	VCMPGTPD ymm8, ymm6, ymm2
	VORPD ymm7, ymm7, ymm8
	VTESTPD ymm7, ymm7
	JNZ .process_batch_full
	VMULPD ymm6, ymm6, ymm3
	VADDPD ymm6, ymm6, ymm1
	VMOVAPD ymm7, [byte rcx + 96]
	VCMPLTPD ymm8, ymm7, ymm5
	VCMPGTPD ymm9, ymm7, ymm2
	VORPD ymm8, ymm8, ymm9
	VTESTPD ymm8, ymm8
	JNZ .process_batch_full
	VMULPD ymm7, ymm7, ymm3
	VADDPD ymm7, ymm7, ymm1
	VMOVAPD ymm8, [dword rcx + 128]
	VCMPLTPD ymm9, ymm8, ymm5
	VCMPGTPD ymm10, ymm8, ymm2
	VORPD ymm9, ymm9, ymm10
	VTESTPD ymm9, ymm9
	JNZ .process_batch_full
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm1
	VMOVAPD ymm9, [dword rcx + 160]
	VCMPLTPD ymm10, ymm9, ymm5
	VCMPGTPD ymm11, ymm9, ymm2
	VORPD ymm10, ymm10, ymm11
	VTESTPD ymm10, ymm10
	JNZ .process_batch_full
	VMULPD ymm9, ymm9, ymm3
	VADDPD ymm9, ymm9, ymm1
	VMOVAPD ymm10, [dword rcx + 192]
	VCMPLTPD ymm11, ymm10, ymm5
	VCMPGTPD ymm12, ymm10, ymm2
	VORPD ymm11, ymm11, ymm12
	VTESTPD ymm11, ymm11
	JNZ .process_batch_full
	VMULPD ymm10, ymm10, ymm3
	VADDPD ymm10, ymm10, ymm1
	VMOVAPD ymm11, [dword rcx + 224]
	VCMPLTPD ymm5, ymm11, ymm5
	VCMPGTPD ymm2, ymm11, ymm2
	VORPD ymm5, ymm5, ymm2
	VTESTPD ymm5, ymm5
	JNZ .process_batch_full
	VMULPD ymm5, ymm11, ymm3
	VADDPD ymm5, ymm5, ymm1
	VEXTRACTF128 xmm3, ymm4, 1
	VPSLLQ xmm2, xmm4, 52
	VPSLLQ xmm3, xmm3, 52
	VSUBPD ymm4, ymm4, ymm1
	VMOVDQA xmm11,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c4]
	VPADDD xmm2, xmm2, xmm11
	VPADDD xmm3, xmm3, xmm11
	VMOVDQA   [rsp], xmm2
	VMOVDQA   [rsp + 16], xmm3
	VEXTRACTF128 xmm3, ymm0, 1
	VPSLLQ xmm2, xmm0, 52
	VPSLLQ xmm3, xmm3, 52
	VSUBPD ymm0, ymm0, ymm1
	VPADDD xmm2, xmm2, xmm11
	VPADDD xmm3, xmm3, xmm11
	VMOVDQA   [rsp + 32], xmm2
	VMOVDQA   [rsp + 48], xmm3
	VEXTRACTF128 xmm3, ymm6, 1
	VPSLLQ xmm2, xmm6, 52
	VPSLLQ xmm3, xmm3, 52
	VSUBPD ymm6, ymm6, ymm1
	VPADDD xmm2, xmm2, xmm11
	VPADDD xmm3, xmm3, xmm11
	VMOVDQA   [rsp + 64], xmm2
	VMOVDQA   [rsp + 80], xmm3
	VEXTRACTF128 xmm3, ymm7, 1
	VPSLLQ xmm2, xmm7, 52
	VPSLLQ xmm3, xmm3, 52
	VSUBPD ymm7, ymm7, ymm1
	VPADDD xmm2, xmm2, xmm11
	VPADDD xmm3, xmm3, xmm11
	VMOVDQA   [rsp + 96], xmm2
	VMOVDQA   [rsp + 112], xmm3
	VEXTRACTF128 xmm3, ymm8, 1
	VPSLLQ xmm2, xmm8, 52
	VPSLLQ xmm3, xmm3, 52
	VSUBPD ymm8, ymm8, ymm1
	VPADDD xmm2, xmm2, xmm11
	VPADDD xmm3, xmm3, xmm11
	VMOVDQA   [rsp + 128], xmm2
	VMOVDQA   [rsp + 144], xmm3
	VEXTRACTF128 xmm3, ymm9, 1
	VPSLLQ xmm2, xmm9, 52
	VPSLLQ xmm3, xmm3, 52
	VSUBPD ymm9, ymm9, ymm1
	VPADDD xmm2, xmm2, xmm11
	VPADDD xmm3, xmm3, xmm11
	VMOVDQA   [rsp + 160], xmm2
	VMOVDQA   [rsp + 176], xmm3
	VEXTRACTF128 xmm3, ymm10, 1
	VPSLLQ xmm2, xmm10, 52
	VPSLLQ xmm3, xmm3, 52
	VSUBPD ymm10, ymm10, ymm1
	VPADDD xmm2, xmm2, xmm11
	VPADDD xmm3, xmm3, xmm11
	VMOVDQA   [rsp + 192], xmm2
	VMOVDQA   [rsp + 208], xmm3
	VEXTRACTF128 xmm3, ymm5, 1
	VPSLLQ xmm2, xmm5, 52
	VPSLLQ xmm3, xmm3, 52
	VSUBPD ymm5, ymm5, ymm1
	VPADDD xmm2, xmm2, xmm11
	VPADDD xmm3, xmm3, xmm11
	VMOVDQA   [rsp + 224], xmm2
	VMOVDQA   [rsp + 240], xmm3
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c23]
	VMULPD ymm2, ymm4, ymm3
	VADDPD ymm2, ymm2, [rcx]
	VMULPD ymm1, ymm0, ymm3
	VADDPD ymm1, ymm1, [byte rcx + 32]
	VMULPD ymm11, ymm6, ymm3
	VADDPD ymm11, ymm11, [byte rcx + 64]
	VMULPD ymm12, ymm7, ymm3
	VADDPD ymm12, ymm12, [byte rcx + 96]
	VMULPD ymm13, ymm8, ymm3
	VADDPD ymm13, ymm13, [dword rcx + 128]
	VMULPD ymm14, ymm9, ymm3
	VADDPD ymm14, ymm14, [dword rcx + 160]
	VMULPD ymm15, ymm10, ymm3
	VADDPD ymm15, ymm15, [dword rcx + 192]
	VMULPD ymm3, ymm5, ymm3
	VADDPD ymm3, ymm3, [dword rcx + 224]
	VMULPD ymm4, ymm4,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm2, ymm2, ymm4
	VMULPD ymm4, ymm0,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm1, ymm1, ymm4
	VMULPD ymm4, ymm6,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm11, ymm11, ymm4
	VMULPD ymm4, ymm7,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm12, ymm12, ymm4
	VMULPD ymm4, ymm8,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm13, ymm13, ymm4
	VMOVAPD   [rsp + 256], ymm13
	VMULPD ymm4, ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm14, ymm14, ymm4
	VMULPD ymm4, ymm10,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm15, ymm15, ymm4
	VMOVAPD   [rsp + 288], ymm15
	VMULPD ymm4, ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm3, ymm3, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c25]
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c26]
	VMULPD ymm0, ymm4, ymm2
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm4, ymm1
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm4, ymm11
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm4, ymm12
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm9, ymm4,   [rsp + 256]
	VADDPD ymm9, ymm9, ymm5
	VMULPD ymm10, ymm4, ymm14
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm13, ymm4,   [rsp + 288]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c27]
	VMULPD ymm0, ymm0, ymm2
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm6, ymm1
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm7, ymm11
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm12
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm9, ymm9,   [rsp + 256]
	VADDPD ymm9, ymm9, ymm5
	VMULPD ymm10, ymm10, ymm14
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm13, ymm13,   [rsp + 288]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c28]
	VMULPD ymm0, ymm0, ymm2
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm6, ymm1
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm7, ymm11
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm12
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm9, ymm9,   [rsp + 256]
	VADDPD ymm9, ymm9, ymm5
	VMULPD ymm10, ymm10, ymm14
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm13, ymm13,   [rsp + 288]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c29]
	VMULPD ymm0, ymm0, ymm2
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm6, ymm1
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm7, ymm11
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm12
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm9, ymm9,   [rsp + 256]
	VADDPD ymm9, ymm9, ymm5
	VMULPD ymm10, ymm10, ymm14
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm13, ymm13,   [rsp + 288]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c30]
	VMULPD ymm0, ymm0, ymm2
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm6, ymm1
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm7, ymm11
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm12
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm9, ymm9,   [rsp + 256]
	VADDPD ymm9, ymm9, ymm5
	VMULPD ymm10, ymm10, ymm14
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm13, ymm13,   [rsp + 288]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c31]
	VMULPD ymm0, ymm0, ymm2
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm6, ymm1
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm7, ymm11
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm12
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm9, ymm9,   [rsp + 256]
	VADDPD ymm9, ymm9, ymm5
	VMULPD ymm10, ymm10, ymm14
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm13, ymm13,   [rsp + 288]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c32]
	VMULPD ymm0, ymm0, ymm2
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm6, ymm1
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm7, ymm11
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm12
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm9, ymm9,   [rsp + 256]
	VADDPD ymm9, ymm9, ymm5
	VMULPD ymm10, ymm10, ymm14
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm13, ymm13,   [rsp + 288]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c33]
	VMULPD ymm0, ymm0, ymm2
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm6, ymm1
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm7, ymm11
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm12
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm9, ymm9,   [rsp + 256]
	VADDPD ymm9, ymm9, ymm5
	VMULPD ymm10, ymm10, ymm14
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm13, ymm13,   [rsp + 288]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c34]
	VMULPD ymm0, ymm0, ymm2
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm6, ymm1
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm7, ymm11
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm12
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm9, ymm9,   [rsp + 256]
	VADDPD ymm9, ymm9, ymm5
	VMULPD ymm10, ymm10, ymm14
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm13, ymm13,   [rsp + 288]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMULPD ymm0, ymm0, ymm2
	VMULPD ymm6, ymm6, ymm1
	VMULPD ymm7, ymm7, ymm11
	VMULPD ymm8, ymm8, ymm12
	VMOVAPD ymm5,   [rsp + 256]
	VMULPD ymm9, ymm9, ymm5
	VMULPD ymm10, ymm10, ymm14
	VMOVAPD ymm15,   [rsp + 288]
	VMULPD ymm13, ymm13, ymm15
	VMULPD ymm4, ymm4, ymm3
	VMULPD ymm0, ymm0, ymm2
	VADDPD ymm0, ymm0, ymm2
	VMOVAPD ymm2,   [rsp]
	VMULPD ymm6, ymm6, ymm1
	VADDPD ymm6, ymm6, ymm1
	VMOVAPD ymm1,   [rsp + 32]
	VMULPD ymm7, ymm7, ymm11
	VADDPD ymm7, ymm7, ymm11
	VMOVAPD ymm11,   [rsp + 64]
	VMULPD ymm8, ymm8, ymm12
	VADDPD ymm8, ymm8, ymm12
	VMOVAPD ymm12,   [rsp + 96]
	VMULPD ymm9, ymm9, ymm5
	VADDPD ymm9, ymm9, ymm5
	VMOVAPD ymm5,   [rsp + 128]
	VMULPD ymm10, ymm10, ymm14
	VADDPD ymm10, ymm10, ymm14
	VMOVAPD ymm14,   [rsp + 160]
	VMULPD ymm13, ymm13, ymm15
	VADDPD ymm13, ymm13, ymm15
	VMOVAPD ymm15,   [rsp + 192]
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm3
	VMOVAPD ymm3,   [rsp + 224]
	VMULPD ymm0, ymm0, ymm2
	VADDPD ymm0, ymm0, ymm2
	VMOVUPD [rdx], xmm0
	VEXTRACTF128 [byte rdx + 16], ymm0, 1
	VMULPD ymm6, ymm6, ymm1
	VADDPD ymm6, ymm6, ymm1
	VMOVUPD [byte rdx + 32], xmm6
	VEXTRACTF128 [byte rdx + 48], ymm6, 1
	VMULPD ymm7, ymm7, ymm11
	VADDPD ymm7, ymm7, ymm11
	VMOVUPD [byte rdx + 64], xmm7
	VEXTRACTF128 [byte rdx + 80], ymm7, 1
	VMULPD ymm8, ymm8, ymm12
	VADDPD ymm8, ymm8, ymm12
	VMOVUPD [byte rdx + 96], xmm8
	VEXTRACTF128 [byte rdx + 112], ymm8, 1
	VMULPD ymm9, ymm9, ymm5
	VADDPD ymm9, ymm9, ymm5
	VMOVUPD [dword rdx + 128], xmm9
	VEXTRACTF128 [dword rdx + 144], ymm9, 1
	VMULPD ymm10, ymm10, ymm14
	VADDPD ymm10, ymm10, ymm14
	VMOVUPD [dword rdx + 160], xmm10
	VEXTRACTF128 [dword rdx + 176], ymm10, 1
	VMULPD ymm13, ymm13, ymm15
	VADDPD ymm13, ymm13, ymm15
	VMOVUPD [dword rdx + 192], xmm13
	VEXTRACTF128 [dword rdx + 208], ymm13, 1
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm3
	VMOVUPD [dword rdx + 224], xmm4
	VEXTRACTF128 [dword rdx + 240], ymm4, 1
	.process_batch_increment:
	ADD rcx, 256
	ADD rdx, 256
	SUB r8, 32
	JAE .process_batch_fast
	.process_restore:
	ADD r8, 32
	JZ .return_ok
	.process_single:
	VMOVSD xmm4, [rcx]
	VMOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c0]
	VMULSD xmm3, xmm4, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c1]
	VADDSD xmm3, xmm3, xmm5
	VPSLLQ xmm2, xmm3, 52
	VSUBSD xmm3, xmm3, xmm5
	VMULSD xmm5, xmm3, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c2]
	VADDSD xmm5, xmm5, xmm4
	VMULSD xmm1, xmm3, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c3]
	VADDSD xmm5, xmm5, xmm1
	VPMINSD xmm3, xmm2,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c4]
	VPMAXSD xmm3, xmm3,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c5]
	VPSUBD xmm2, xmm2, xmm3
	VMOVDQA xmm1,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c4]
	VPADDD xmm3, xmm3, xmm1
	VPADDD xmm2, xmm2, xmm1
	VMOVSD xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c6]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c7]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c8]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c9]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c10]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c11]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c12]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c13]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c14]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c15]
	VMULSD xmm1, xmm1, xmm5
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, xmm5
	VMULSD xmm1, xmm1, xmm3
	VADDSD xmm1, xmm1, xmm3
	VMULSD xmm1, xmm1, xmm2
	VCMPLTSD xmm5, xmm4, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c16]
	VANDNPD xmm1, xmm5, xmm1
	VCMPGTSD xmm4, xmm4, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c17]
	VBLENDVPD xmm1, xmm1,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c18], xmm4
	VMOVSD [rdx], xmm1
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	VMOVAPS xmm6, [dword rsp + 896]
	VMOVAPS xmm7, [dword rsp + 912]
	VMOVAPS xmm8, [dword rsp + 928]
	VMOVAPS xmm9, [dword rsp + 944]
	VMOVAPS xmm10, [dword rsp + 960]
	VMOVAPS xmm11, [dword rsp + 976]
	VMOVAPS xmm12, [dword rsp + 992]
	VMOVAPS xmm13, [dword rsp + 1008]
	VMOVAPS xmm14, [dword rsp + 1024]
	VMOVAPS xmm15, [dword rsp + 1040]
	MOV rsp, [dword rsp + 1056]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	VMOVAPD ymm4, [rcx]
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c21]
	VMULPD ymm4, ymm4, ymm5
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c22]
	VADDPD ymm4, ymm4, ymm3
	VMOVAPD ymm2, [byte rcx + 32]
	VMULPD ymm2, ymm2, ymm5
	VADDPD ymm2, ymm2, ymm3
	VMOVAPD ymm1, [byte rcx + 64]
	VMULPD ymm1, ymm1, ymm5
	VADDPD ymm1, ymm1, ymm3
	VMOVAPD ymm0, [byte rcx + 96]
	VMULPD ymm0, ymm0, ymm5
	VADDPD ymm0, ymm0, ymm3
	VMOVAPD ymm6, [dword rcx + 128]
	VMULPD ymm6, ymm6, ymm5
	VADDPD ymm6, ymm6, ymm3
	VMOVAPD ymm7, [dword rcx + 160]
	VMULPD ymm7, ymm7, ymm5
	VADDPD ymm7, ymm7, ymm3
	VMOVAPD ymm8, [dword rcx + 192]
	VMULPD ymm8, ymm8, ymm5
	VADDPD ymm8, ymm8, ymm3
	VMOVAPD ymm9, [dword rcx + 224]
	VMULPD ymm5, ymm9, ymm5
	VADDPD ymm5, ymm5, ymm3
	VEXTRACTF128 xmm9, ymm4, 1
	VPSLLQ xmm10, xmm4, 52
	VPSLLQ xmm9, xmm9, 52
	VSUBPD ymm4, ymm4, ymm3
	VMOVDQA xmm11,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c4]
	VPMINSW xmm12, xmm10, xmm11
	VPMINSW xmm13, xmm9, xmm11
	VMOVDQA xmm14,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c5]
	VPMAXSW xmm12, xmm12, xmm14
	VPMAXSW xmm13, xmm13, xmm14
	VPSUBD xmm10, xmm10, xmm12
	VPSUBD xmm9, xmm9, xmm13
	VMOVDQA xmm15,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c4]
	VPADDD xmm12, xmm12, xmm15
	VPADDD xmm13, xmm13, xmm15
	VMOVDQA   [rsp + 320], xmm12
	VMOVDQA   [rsp + 336], xmm13
	VPADDD xmm10, xmm10, xmm15
	VPADDD xmm9, xmm9, xmm15
	VMOVDQA   [rsp + 352], xmm10
	VMOVDQA   [rsp + 368], xmm9
	VEXTRACTF128 xmm9, ymm2, 1
	VPSLLQ xmm10, xmm2, 52
	VPSLLQ xmm9, xmm9, 52
	VSUBPD ymm2, ymm2, ymm3
	VPMINSW xmm12, xmm10, xmm11
	VPMINSW xmm13, xmm9, xmm11
	VPMAXSW xmm12, xmm12, xmm14
	VPMAXSW xmm13, xmm13, xmm14
	VPSUBD xmm10, xmm10, xmm12
	VPSUBD xmm9, xmm9, xmm13
	VPADDD xmm12, xmm12, xmm15
	VPADDD xmm13, xmm13, xmm15
	VMOVDQA   [rsp + 384], xmm12
	VMOVDQA   [rsp + 400], xmm13
	VPADDD xmm10, xmm10, xmm15
	VPADDD xmm9, xmm9, xmm15
	VMOVDQA   [rsp + 416], xmm10
	VMOVDQA   [rsp + 432], xmm9
	VEXTRACTF128 xmm9, ymm1, 1
	VPSLLQ xmm10, xmm1, 52
	VPSLLQ xmm9, xmm9, 52
	VSUBPD ymm1, ymm1, ymm3
	VPMINSW xmm12, xmm10, xmm11
	VPMINSW xmm13, xmm9, xmm11
	VPMAXSW xmm12, xmm12, xmm14
	VPMAXSW xmm13, xmm13, xmm14
	VPSUBD xmm10, xmm10, xmm12
	VPSUBD xmm9, xmm9, xmm13
	VPADDD xmm12, xmm12, xmm15
	VPADDD xmm13, xmm13, xmm15
	VMOVDQA   [rsp + 448], xmm12
	VMOVDQA   [rsp + 464], xmm13
	VPADDD xmm10, xmm10, xmm15
	VPADDD xmm9, xmm9, xmm15
	VMOVDQA   [rsp + 480], xmm10
	VMOVDQA   [rsp + 496], xmm9
	VEXTRACTF128 xmm9, ymm0, 1
	VPSLLQ xmm10, xmm0, 52
	VPSLLQ xmm9, xmm9, 52
	VSUBPD ymm0, ymm0, ymm3
	VPMINSW xmm12, xmm10, xmm11
	VPMINSW xmm13, xmm9, xmm11
	VPMAXSW xmm12, xmm12, xmm14
	VPMAXSW xmm13, xmm13, xmm14
	VPSUBD xmm10, xmm10, xmm12
	VPSUBD xmm9, xmm9, xmm13
	VPADDD xmm12, xmm12, xmm15
	VPADDD xmm13, xmm13, xmm15
	VMOVDQA   [rsp + 512], xmm12
	VMOVDQA   [rsp + 528], xmm13
	VPADDD xmm10, xmm10, xmm15
	VPADDD xmm9, xmm9, xmm15
	VMOVDQA   [rsp + 544], xmm10
	VMOVDQA   [rsp + 560], xmm9
	VEXTRACTF128 xmm9, ymm6, 1
	VPSLLQ xmm10, xmm6, 52
	VPSLLQ xmm9, xmm9, 52
	VSUBPD ymm6, ymm6, ymm3
	VPMINSW xmm12, xmm10, xmm11
	VPMINSW xmm13, xmm9, xmm11
	VPMAXSW xmm12, xmm12, xmm14
	VPMAXSW xmm13, xmm13, xmm14
	VPSUBD xmm10, xmm10, xmm12
	VPSUBD xmm9, xmm9, xmm13
	VPADDD xmm12, xmm12, xmm15
	VPADDD xmm13, xmm13, xmm15
	VMOVDQA   [rsp + 576], xmm12
	VMOVDQA   [rsp + 592], xmm13
	VPADDD xmm10, xmm10, xmm15
	VPADDD xmm9, xmm9, xmm15
	VMOVDQA   [rsp + 608], xmm10
	VMOVDQA   [rsp + 624], xmm9
	VEXTRACTF128 xmm9, ymm7, 1
	VPSLLQ xmm10, xmm7, 52
	VPSLLQ xmm9, xmm9, 52
	VSUBPD ymm7, ymm7, ymm3
	VPMINSW xmm12, xmm10, xmm11
	VPMINSW xmm13, xmm9, xmm11
	VPMAXSW xmm12, xmm12, xmm14
	VPMAXSW xmm13, xmm13, xmm14
	VPSUBD xmm10, xmm10, xmm12
	VPSUBD xmm9, xmm9, xmm13
	VPADDD xmm12, xmm12, xmm15
	VPADDD xmm13, xmm13, xmm15
	VMOVDQA   [rsp + 640], xmm12
	VMOVDQA   [rsp + 656], xmm13
	VPADDD xmm10, xmm10, xmm15
	VPADDD xmm9, xmm9, xmm15
	VMOVDQA   [rsp + 672], xmm10
	VMOVDQA   [rsp + 688], xmm9
	VEXTRACTF128 xmm9, ymm8, 1
	VPSLLQ xmm10, xmm8, 52
	VPSLLQ xmm9, xmm9, 52
	VSUBPD ymm8, ymm8, ymm3
	VPMINSW xmm12, xmm10, xmm11
	VPMINSW xmm13, xmm9, xmm11
	VPMAXSW xmm12, xmm12, xmm14
	VPMAXSW xmm13, xmm13, xmm14
	VPSUBD xmm10, xmm10, xmm12
	VPSUBD xmm9, xmm9, xmm13
	VPADDD xmm12, xmm12, xmm15
	VPADDD xmm13, xmm13, xmm15
	VMOVDQA   [rsp + 704], xmm12
	VMOVDQA   [rsp + 720], xmm13
	VPADDD xmm10, xmm10, xmm15
	VPADDD xmm9, xmm9, xmm15
	VMOVDQA   [rsp + 736], xmm10
	VMOVDQA   [rsp + 752], xmm9
	VEXTRACTF128 xmm9, ymm5, 1
	VPSLLQ xmm10, xmm5, 52
	VPSLLQ xmm9, xmm9, 52
	VSUBPD ymm5, ymm5, ymm3
	VPMINSW xmm3, xmm10, xmm11
	VPMINSW xmm11, xmm9, xmm11
	VPMAXSW xmm3, xmm3, xmm14
	VPMAXSW xmm11, xmm11, xmm14
	VPSUBD xmm10, xmm10, xmm3
	VPSUBD xmm9, xmm9, xmm11
	VPADDD xmm3, xmm3, xmm15
	VPADDD xmm11, xmm11, xmm15
	VMOVDQA   [rsp + 768], xmm3
	VMOVDQA   [rsp + 784], xmm11
	VPADDD xmm10, xmm10, xmm15
	VPADDD xmm9, xmm9, xmm15
	VMOVDQA   [rsp + 800], xmm10
	VMOVDQA   [rsp + 816], xmm9
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c23]
	VMULPD ymm9, ymm4, ymm3
	VADDPD ymm9, ymm9, [rcx]
	VMULPD ymm10, ymm2, ymm3
	VADDPD ymm10, ymm10, [byte rcx + 32]
	VMULPD ymm11, ymm1, ymm3
	VADDPD ymm11, ymm11, [byte rcx + 64]
	VMULPD ymm12, ymm0, ymm3
	VADDPD ymm12, ymm12, [byte rcx + 96]
	VMULPD ymm13, ymm6, ymm3
	VADDPD ymm13, ymm13, [dword rcx + 128]
	VMULPD ymm14, ymm7, ymm3
	VADDPD ymm14, ymm14, [dword rcx + 160]
	VMULPD ymm15, ymm8, ymm3
	VADDPD ymm15, ymm15, [dword rcx + 192]
	VMULPD ymm3, ymm5, ymm3
	VADDPD ymm3, ymm3, [dword rcx + 224]
	VMULPD ymm4, ymm4,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm9, ymm9, ymm4
	VMULPD ymm4, ymm2,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm10, ymm10, ymm4
	VMULPD ymm4, ymm1,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm11, ymm11, ymm4
	VMULPD ymm4, ymm0,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm12, ymm12, ymm4
	VMULPD ymm4, ymm6,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm13, ymm13, ymm4
	VMOVAPD   [rsp + 832], ymm13
	VMULPD ymm4, ymm7,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm14, ymm14, ymm4
	VMULPD ymm4, ymm8,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm15, ymm15, ymm4
	VMOVAPD   [rsp + 864], ymm15
	VMULPD ymm4, ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm3, ymm3, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c25]
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c26]
	VMULPD ymm2, ymm4, ymm9
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm1, ymm4, ymm10
	VADDPD ymm1, ymm1, ymm5
	VMULPD ymm0, ymm4, ymm11
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm4, ymm12
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm4,   [rsp + 832]
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm4, ymm14
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm13, ymm4,   [rsp + 864]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c27]
	VMULPD ymm2, ymm2, ymm9
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm1, ymm1, ymm10
	VADDPD ymm1, ymm1, ymm5
	VMULPD ymm0, ymm0, ymm11
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm6, ymm12
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm7,   [rsp + 832]
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm14
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm13, ymm13,   [rsp + 864]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c28]
	VMULPD ymm2, ymm2, ymm9
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm1, ymm1, ymm10
	VADDPD ymm1, ymm1, ymm5
	VMULPD ymm0, ymm0, ymm11
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm6, ymm12
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm7,   [rsp + 832]
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm14
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm13, ymm13,   [rsp + 864]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c29]
	VMULPD ymm2, ymm2, ymm9
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm1, ymm1, ymm10
	VADDPD ymm1, ymm1, ymm5
	VMULPD ymm0, ymm0, ymm11
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm6, ymm12
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm7,   [rsp + 832]
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm14
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm13, ymm13,   [rsp + 864]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c30]
	VMULPD ymm2, ymm2, ymm9
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm1, ymm1, ymm10
	VADDPD ymm1, ymm1, ymm5
	VMULPD ymm0, ymm0, ymm11
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm6, ymm12
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm7,   [rsp + 832]
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm14
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm13, ymm13,   [rsp + 864]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c31]
	VMULPD ymm2, ymm2, ymm9
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm1, ymm1, ymm10
	VADDPD ymm1, ymm1, ymm5
	VMULPD ymm0, ymm0, ymm11
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm6, ymm12
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm7,   [rsp + 832]
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm14
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm13, ymm13,   [rsp + 864]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c32]
	VMULPD ymm2, ymm2, ymm9
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm1, ymm1, ymm10
	VADDPD ymm1, ymm1, ymm5
	VMULPD ymm0, ymm0, ymm11
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm6, ymm12
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm7,   [rsp + 832]
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm14
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm13, ymm13,   [rsp + 864]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c33]
	VMULPD ymm2, ymm2, ymm9
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm1, ymm1, ymm10
	VADDPD ymm1, ymm1, ymm5
	VMULPD ymm0, ymm0, ymm11
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm6, ymm12
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm7,   [rsp + 832]
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm14
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm13, ymm13,   [rsp + 864]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c34]
	VMULPD ymm2, ymm2, ymm9
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm1, ymm1, ymm10
	VADDPD ymm1, ymm1, ymm5
	VMULPD ymm0, ymm0, ymm11
	VADDPD ymm0, ymm0, ymm5
	VMULPD ymm6, ymm6, ymm12
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm7, ymm7,   [rsp + 832]
	VADDPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm14
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm13, ymm13,   [rsp + 864]
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMULPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1, ymm10
	VMULPD ymm0, ymm0, ymm11
	VMULPD ymm6, ymm6, ymm12
	VMOVAPD ymm5,   [rsp + 832]
	VMULPD ymm7, ymm7, ymm5
	VMULPD ymm8, ymm8, ymm14
	VMOVAPD ymm15,   [rsp + 864]
	VMULPD ymm13, ymm13, ymm15
	VMULPD ymm4, ymm4, ymm3
	VMULPD ymm2, ymm2, ymm9
	VADDPD ymm2, ymm2, ymm9
	VMOVAPD ymm9,   [rsp + 320]
	VMULPD ymm1, ymm1, ymm10
	VADDPD ymm1, ymm1, ymm10
	VMOVAPD ymm10,   [rsp + 384]
	VMULPD ymm0, ymm0, ymm11
	VADDPD ymm0, ymm0, ymm11
	VMOVAPD ymm11,   [rsp + 448]
	VMULPD ymm6, ymm6, ymm12
	VADDPD ymm6, ymm6, ymm12
	VMOVAPD ymm12,   [rsp + 512]
	VMULPD ymm7, ymm7, ymm5
	VADDPD ymm7, ymm7, ymm5
	VMOVAPD ymm5,   [rsp + 576]
	VMULPD ymm8, ymm8, ymm14
	VADDPD ymm8, ymm8, ymm14
	VMOVAPD ymm14,   [rsp + 640]
	VMULPD ymm13, ymm13, ymm15
	VADDPD ymm13, ymm13, ymm15
	VMOVAPD ymm15,   [rsp + 704]
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm3
	VMOVAPD ymm3,   [rsp + 768]
	VMULPD ymm2, ymm2, ymm9
	VADDPD ymm2, ymm2, ymm9
	VMOVAPD ymm9,   [rsp + 352]
	VMULPD ymm1, ymm1, ymm10
	VADDPD ymm1, ymm1, ymm10
	VMOVAPD ymm10,   [rsp + 416]
	VMULPD ymm0, ymm0, ymm11
	VADDPD ymm0, ymm0, ymm11
	VMOVAPD ymm11,   [rsp + 480]
	VMULPD ymm6, ymm6, ymm12
	VADDPD ymm6, ymm6, ymm12
	VMOVAPD ymm12,   [rsp + 544]
	VMULPD ymm7, ymm7, ymm5
	VADDPD ymm7, ymm7, ymm5
	VMOVAPD ymm5,   [rsp + 608]
	VMULPD ymm8, ymm8, ymm14
	VADDPD ymm8, ymm8, ymm14
	VMOVAPD ymm14,   [rsp + 672]
	VMULPD ymm13, ymm13, ymm15
	VADDPD ymm13, ymm13, ymm15
	VMOVAPD ymm15,   [rsp + 736]
	VMULPD ymm4, ymm4, ymm3
	VADDPD ymm4, ymm4, ymm3
	VMOVAPD ymm3,   [rsp + 800]
	VMULPD ymm2, ymm2, ymm9
	VMOVAPD ymm9, [rcx]
	VCMPLTPD ymm9, ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c35]
	VANDNPD ymm2, ymm9, ymm2
	VMULPD ymm1, ymm1, ymm10
	VMOVAPD ymm9, [byte rcx + 32]
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c35]
	VCMPLTPD ymm9, ymm9, ymm10
	VANDNPD ymm1, ymm9, ymm1
	VMULPD ymm0, ymm0, ymm11
	VMOVAPD ymm9, [byte rcx + 64]
	VCMPLTPD ymm9, ymm9, ymm10
	VANDNPD ymm0, ymm9, ymm0
	VMULPD ymm6, ymm6, ymm12
	VMOVAPD ymm9, [byte rcx + 96]
	VCMPLTPD ymm11, ymm9, ymm10
	VANDNPD ymm6, ymm11, ymm6
	VMULPD ymm7, ymm7, ymm5
	VMOVAPD ymm5, [dword rcx + 128]
	VCMPLTPD ymm11, ymm5, ymm10
	VANDNPD ymm7, ymm11, ymm7
	VMULPD ymm8, ymm8, ymm14
	VMOVAPD ymm11, [dword rcx + 160]
	VCMPLTPD ymm12, ymm11, ymm10
	VANDNPD ymm8, ymm12, ymm8
	VMULPD ymm13, ymm13, ymm15
	VMOVAPD ymm12, [dword rcx + 192]
	VCMPLTPD ymm14, ymm12, ymm10
	VANDNPD ymm13, ymm14, ymm13
	VMULPD ymm4, ymm4, ymm3
	VMOVAPD ymm3, [dword rcx + 224]
	VCMPLTPD ymm10, ymm3, ymm10
	VANDNPD ymm4, ymm10, ymm4
	VMOVAPD ymm10, [rcx]
	VMOVAPS ymm14,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c36]
	VCMPGTPD ymm10, ymm10, ymm14
	VMOVAPS ymm15,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c37]
	VBLENDVPD ymm2, ymm2, ymm15, ymm10
	VMOVUPD [rdx], xmm2
	VEXTRACTF128 [byte rdx + 16], ymm2, 1
	VMOVAPD ymm2, [byte rcx + 32]
	VCMPGTPD ymm2, ymm2, ymm14
	VBLENDVPD ymm1, ymm1, ymm15, ymm2
	VMOVUPD [byte rdx + 32], xmm1
	VEXTRACTF128 [byte rdx + 48], ymm1, 1
	VMOVAPD ymm2, [byte rcx + 64]
	VCMPGTPD ymm2, ymm2, ymm14
	VBLENDVPD ymm0, ymm0, ymm15, ymm2
	VMOVUPD [byte rdx + 64], xmm0
	VEXTRACTF128 [byte rdx + 80], ymm0, 1
	VCMPGTPD ymm2, ymm9, ymm14
	VBLENDVPD ymm6, ymm6, ymm15, ymm2
	VMOVUPD [byte rdx + 96], xmm6
	VEXTRACTF128 [byte rdx + 112], ymm6, 1
	VCMPGTPD ymm5, ymm5, ymm14
	VBLENDVPD ymm7, ymm7, ymm15, ymm5
	VMOVUPD [dword rdx + 128], xmm7
	VEXTRACTF128 [dword rdx + 144], ymm7, 1
	VCMPGTPD ymm5, ymm11, ymm14
	VBLENDVPD ymm8, ymm8, ymm15, ymm5
	VMOVUPD [dword rdx + 160], xmm8
	VEXTRACTF128 [dword rdx + 176], ymm8, 1
	VCMPGTPD ymm5, ymm12, ymm14
	VBLENDVPD ymm13, ymm13, ymm15, ymm5
	VMOVUPD [dword rdx + 192], xmm13
	VEXTRACTF128 [dword rdx + 208], ymm13, 1
	VCMPGTPD ymm5, ymm3, ymm14
	VBLENDVPD ymm4, ymm4, ymm15, ymm5
	VMOVUPD [dword rdx + 224], xmm4
	VEXTRACTF128 [dword rdx + 240], ymm4, 1
	JMP .process_batch_increment

section .rdata$n rdata align=32
_yepMath_Exp_V64f_V64f_Bulldozer_constants:
	.c0: DQ 0x4338000000000000
	.c1: DQ 0x3FF71547652B82FE
	.c2: DQ 0xBFE62E42FEFA39EF
	.c3: DQ 0xBC7ABC9E3B39803F
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c5: DQ 0xC020000000000000, 0xC020000000000000
	.c6: DQ 0x3E5AE9043CA87A40
	.c7: DQ 0x3E928A284098D813
	.c8: DQ 0x3EC71DE71651CE7A
	.c9: DQ 0x3EFA019A6AC02A7D
	.c10: DQ 0x3F2A01A017EEB164
	.c11: DQ 0x3F56C16C17F2BF99
	.c12: DQ 0x3F811111111173CA
	.c13: DQ 0x3FA5555555552115
	.c14: DQ 0x3FC5555555555540
	.c15: DQ 0x3FE0000000000005
	.c16: DQ 0xC0874910D52D3051
	.c17: DQ 0x40862E42FEFA39EF
	.c18: DQ 0x7FF0000000000000, 0x7FF0000000000000
	.c33: DQ 0xC0874910D52D3051, 0xC0874910D52D3051
	.c19: DQ 0x4338000000000000, 0x4338000000000000, 0x4338000000000000, 0x4338000000000000
	.c20: DQ 0x3FF71547652B82FE, 0x3FF71547652B82FE, 0x3FF71547652B82FE, 0x3FF71547652B82FE
	.c21: DQ 0xBFE62E42FEFA39EF, 0xBFE62E42FEFA39EF, 0xBFE62E42FEFA39EF, 0xBFE62E42FEFA39EF
	.c22: DQ 0xBC7ABC9E3B39803F, 0xBC7ABC9E3B39803F, 0xBC7ABC9E3B39803F, 0xBC7ABC9E3B39803F
	.c23: DQ 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40
	.c24: DQ 0x3E928A284098D813, 0x3E928A284098D813, 0x3E928A284098D813, 0x3E928A284098D813
	.c25: DQ 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A
	.c26: DQ 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D
	.c27: DQ 0x3F2A01A017EEB164, 0x3F2A01A017EEB164, 0x3F2A01A017EEB164, 0x3F2A01A017EEB164
	.c28: DQ 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99
	.c29: DQ 0x3F811111111173CA, 0x3F811111111173CA, 0x3F811111111173CA, 0x3F811111111173CA
	.c30: DQ 0x3FA5555555552115, 0x3FA5555555552115, 0x3FA5555555552115, 0x3FA5555555552115
	.c31: DQ 0x3FC5555555555540, 0x3FC5555555555540, 0x3FC5555555555540, 0x3FC5555555555540
	.c32: DQ 0x3FE0000000000005, 0x3FE0000000000005, 0x3FE0000000000005, 0x3FE0000000000005
	.c34: DQ 0x40862E42FEFA39EF, 0x40862E42FEFA39EF


section .text$n code align=16
global _yepMath_Exp_V64f_V64f_Bulldozer
_yepMath_Exp_V64f_V64f_Bulldozer:
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 640
	VMOVAPS [dword rsp + 480], xmm6
	VMOVAPS [dword rsp + 496], xmm7
	VMOVAPS [dword rsp + 512], xmm8
	VMOVAPS [dword rsp + 528], xmm9
	VMOVAPS [dword rsp + 544], xmm10
	VMOVAPS [dword rsp + 560], xmm11
	VMOVAPS [dword rsp + 576], xmm12
	VMOVAPS [dword rsp + 592], xmm13
	VMOVAPS [dword rsp + 608], xmm14
	VMOVAPS [dword rsp + 624], xmm15
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm4, [rcx]
	VMOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c0]
	VFMADDSD xmm3, xmm4, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c1], xmm5
	VPSLLQ xmm2, xmm3, 52
	VSUBSD xmm3, xmm3, xmm5
	VFMADDSD xmm5, xmm3, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c2], xmm4
	VFMADDSD xmm5, xmm3, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c3], xmm5
	VPMINSD xmm3, xmm2,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c4]
	VPMAXSD xmm3, xmm3,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c5]
	VPSUBD xmm2, xmm2, xmm3
	VMOVDQA xmm1,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c4]
	VPADDD xmm3, xmm3, xmm1
	VPADDD xmm2, xmm2, xmm1
	VMOVSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c6]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c7]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c8]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c9]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c10]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c11]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c12]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c13]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c14]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c15]
	VMULSD xmm1, xmm1, xmm5
	VFMADDSD xmm1, xmm1, xmm5, xmm5
	VFMADDSD xmm1, xmm1, xmm3, xmm3
	VMULSD xmm1, xmm1, xmm2
	VCMPLTSD xmm5, xmm4, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c16]
	VANDNPD xmm1, xmm5, xmm1
	VCMPGTSD xmm4, xmm4, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c17]
	VBLENDVPD xmm1, xmm1,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c18], xmm4
	VMOVSD [rdx], xmm1
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB r8, 20
	JB .process_restore
	align 32
	.process_batch_fast:
	VMOVAPS ymm4,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c19]
	VMOVAPD ymm5, [rcx]
	MOV rax, 13872817421961305113
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c20]
	VFMADDPD ymm5, ymm5, ymm3, ymm4
	MOV r10, 4649451482093607592
	VMOVAPD ymm2, [byte rcx + 32]
	MOV r11, [rcx]
	VFMADDPD ymm2, ymm2, ymm3, ymm4
	CMP r11, rax
	JA .process_batch_full
	VMOVAPD ymm1, [byte rcx + 64]
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm1, ymm1, ymm3, ymm4
	MOV r11, [byte rcx + 8]
	VMOVAPD ymm0, [byte rcx + 96]
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm0, ymm0, ymm3, ymm4
	CMP r11, r10
	JG .process_batch_full
	VMOVAPD ymm6, [dword rcx + 128]
	MOV r11, [byte rcx + 16]
	VFMADDPD ymm3, ymm6, ymm3, ymm4
	CMP r11, rax
	JA .process_batch_full
	VEXTRACTF128 xmm6, ymm5, 1
	VPSLLQ xmm7, xmm5, 52
	CMP r11, r10
	JG .process_batch_full
	VPSLLQ xmm6, xmm6, 52
	VSUBPD ymm5, ymm5, ymm4
	MOV r11, [byte rcx + 24]
	VEXTRACTF128 xmm8, ymm2, 1
	VPSLLQ xmm9, xmm2, 52
	CMP r11, rax
	JA .process_batch_full
	VPSLLQ xmm8, xmm8, 52
	VSUBPD ymm2, ymm2, ymm4
	CMP r11, r10
	JG .process_batch_full
	VEXTRACTF128 xmm10, ymm1, 1
	VPSLLQ xmm11, xmm1, 52
	MOV r11, [byte rcx + 32]
	VPSLLQ xmm10, xmm10, 52
	VSUBPD ymm1, ymm1, ymm4
	CMP r11, rax
	JA .process_batch_full
	VEXTRACTF128 xmm12, ymm0, 1
	VPSLLQ xmm13, xmm0, 52
	CMP r11, r10
	JG .process_batch_full
	VPSLLQ xmm12, xmm12, 52
	VSUBPD ymm0, ymm0, ymm4
	MOV r11, [byte rcx + 40]
	VEXTRACTF128 xmm14, ymm3, 1
	VPSLLQ xmm15, xmm3, 52
	CMP r11, rax
	JA .process_batch_full
	VPSLLQ xmm14, xmm14, 52
	VSUBPD ymm3, ymm3, ymm4
	CMP r11, r10
	JG .process_batch_full
	VMOVDQA xmm4,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c4]
	VPADDD xmm7, xmm7, xmm4
	VPADDD xmm6, xmm6, xmm4
	VMOVDQA   [rsp], xmm7
	VMOVDQA   [rsp + 16], xmm6
	VMOVAPS ymm6,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c21]
	VFMADDPD ymm7, ymm5, ymm6, [rcx]
	VPADDD xmm9, xmm9, xmm4
	VPADDD xmm8, xmm8, xmm4
	VMOVDQA   [rsp + 32], xmm9
	VMOVDQA   [rsp + 48], xmm8
	VFMADDPD ymm8, ymm2, ymm6, [byte rcx + 32]
	VPADDD xmm11, xmm11, xmm4
	VPADDD xmm10, xmm10, xmm4
	VMOVDQA   [rsp + 64], xmm11
	VMOVDQA   [rsp + 80], xmm10
	VFMADDPD ymm9, ymm1, ymm6, [byte rcx + 64]
	VPADDD xmm13, xmm13, xmm4
	VPADDD xmm12, xmm12, xmm4
	VMOVDQA   [rsp + 96], xmm13
	VMOVDQA   [rsp + 112], xmm12
	VFMADDPD ymm10, ymm0, ymm6, [byte rcx + 96]
	VPADDD xmm15, xmm15, xmm4
	VPADDD xmm14, xmm14, xmm4
	VMOVDQA   [rsp + 128], xmm15
	VMOVDQA   [rsp + 144], xmm14
	VFMADDPD ymm4, ymm3, ymm6, [dword rcx + 128]
	VMOVAPS ymm6,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c22]
	VFMADDPD ymm7, ymm5, ymm6, ymm7
	MOV r11, [byte rcx + 48]
	VFMADDPD ymm8, ymm2, ymm6, ymm8
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm9, ymm1, ymm6, ymm9
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm10, ymm0, ymm6, ymm10
	MOV r11, [byte rcx + 56]
	VFMADDPD ymm4, ymm3, ymm6, ymm4
	CMP r11, rax
	JA .process_batch_full
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c23]
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c24]
	VFMADDPD ymm2, ymm5, ymm7, ymm3
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm1, ymm5, ymm8, ymm3
	MOV r11, [byte rcx + 64]
	VFMADDPD ymm0, ymm5, ymm9, ymm3
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm6, ymm5, ymm10, ymm3
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm5, ymm5, ymm4, ymm3
	MOV r11, [byte rcx + 72]
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c25]
	VFMADDPD ymm2, ymm2, ymm7, ymm3
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm1, ymm1, ymm8, ymm3
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm0, ymm0, ymm9, ymm3
	MOV r11, [byte rcx + 80]
	VFMADDPD ymm6, ymm6, ymm10, ymm3
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm5, ymm5, ymm4, ymm3
	CMP r11, r10
	JG .process_batch_full
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c26]
	VFMADDPD ymm2, ymm2, ymm7, ymm3
	MOV r11, [byte rcx + 88]
	VFMADDPD ymm1, ymm1, ymm8, ymm3
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm0, ymm0, ymm9, ymm3
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm6, ymm6, ymm10, ymm3
	MOV r11, [byte rcx + 96]
	VFMADDPD ymm5, ymm5, ymm4, ymm3
	CMP r11, rax
	JA .process_batch_full
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c27]
	VFMADDPD ymm2, ymm2, ymm7, ymm3
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm1, ymm1, ymm8, ymm3
	MOV r11, [byte rcx + 104]
	VFMADDPD ymm0, ymm0, ymm9, ymm3
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm6, ymm6, ymm10, ymm3
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm5, ymm5, ymm4, ymm3
	MOV r11, [byte rcx + 112]
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c28]
	VFMADDPD ymm2, ymm2, ymm7, ymm3
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm1, ymm1, ymm8, ymm3
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm0, ymm0, ymm9, ymm3
	MOV r11, [byte rcx + 120]
	VFMADDPD ymm6, ymm6, ymm10, ymm3
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm5, ymm5, ymm4, ymm3
	CMP r11, r10
	JG .process_batch_full
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c29]
	VFMADDPD ymm2, ymm2, ymm7, ymm3
	MOV r11, [dword rcx + 128]
	VFMADDPD ymm1, ymm1, ymm8, ymm3
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm0, ymm0, ymm9, ymm3
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm6, ymm6, ymm10, ymm3
	MOV r11, [dword rcx + 136]
	VFMADDPD ymm5, ymm5, ymm4, ymm3
	CMP r11, rax
	JA .process_batch_full
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c30]
	VFMADDPD ymm2, ymm2, ymm7, ymm3
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm1, ymm1, ymm8, ymm3
	MOV r11, [dword rcx + 144]
	VFMADDPD ymm0, ymm0, ymm9, ymm3
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm6, ymm6, ymm10, ymm3
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm5, ymm5, ymm4, ymm3
	MOV r11, [dword rcx + 152]
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c31]
	VFMADDPD ymm2, ymm2, ymm7, ymm3
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm1, ymm1, ymm8, ymm3
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm0, ymm0, ymm9, ymm3
	VFMADDPD ymm6, ymm6, ymm10, ymm3
	VFMADDPD ymm5, ymm5, ymm4, ymm3
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c32]
	VFMADDPD ymm2, ymm2, ymm7, ymm3
	VFMADDPD ymm1, ymm1, ymm8, ymm3
	VFMADDPD ymm0, ymm0, ymm9, ymm3
	VFMADDPD ymm6, ymm6, ymm10, ymm3
	VFMADDPD ymm5, ymm5, ymm4, ymm3
	VMULPD ymm2, ymm2, ymm7
	VMULPD ymm1, ymm1, ymm8
	VMULPD ymm0, ymm0, ymm9
	VMULPD ymm6, ymm6, ymm10
	VMULPD ymm5, ymm5, ymm4
	VFMADDPD ymm2, ymm2, ymm7, ymm7
	VMOVAPD xmm3,   [rsp]
	VMOVAPD xmm7,   [rsp + 16]
	VFMADDPD ymm1, ymm1, ymm8, ymm8
	VMOVAPD xmm8,   [rsp + 32]
	VMOVAPD xmm11,   [rsp + 48]
	VFMADDPD ymm0, ymm0, ymm9, ymm9
	VMOVAPD xmm9,   [rsp + 64]
	VMOVAPD xmm12,   [rsp + 80]
	VFMADDPD ymm6, ymm6, ymm10, ymm10
	VMOVAPD xmm10,   [rsp + 96]
	VMOVAPD xmm13,   [rsp + 112]
	VFMADDPD ymm5, ymm5, ymm4, ymm4
	VMOVAPD xmm4,   [rsp + 128]
	VMOVAPD xmm14,   [rsp + 144]
	VEXTRACTF128 xmm15, ymm2, 1
	VFMADDPD xmm2, xmm2, xmm3, xmm3
	VMOVUPD [rdx], xmm2
	VFMADDPD xmm15, xmm15, xmm7, xmm7
	VMOVUPD [byte rdx + 16], xmm15
	VEXTRACTF128 xmm3, ymm1, 1
	VFMADDPD xmm1, xmm1, xmm8, xmm8
	VMOVUPD [byte rdx + 32], xmm1
	VFMADDPD xmm3, xmm3, xmm11, xmm11
	VMOVUPD [byte rdx + 48], xmm3
	VEXTRACTF128 xmm3, ymm0, 1
	VFMADDPD xmm0, xmm0, xmm9, xmm9
	VMOVUPD [byte rdx + 64], xmm0
	VFMADDPD xmm3, xmm3, xmm12, xmm12
	VMOVUPD [byte rdx + 80], xmm3
	VEXTRACTF128 xmm3, ymm6, 1
	VFMADDPD xmm6, xmm6, xmm10, xmm10
	VMOVUPD [byte rdx + 96], xmm6
	VFMADDPD xmm3, xmm3, xmm13, xmm13
	VMOVUPD [byte rdx + 112], xmm3
	VEXTRACTF128 xmm3, ymm5, 1
	VFMADDPD xmm5, xmm5, xmm4, xmm4
	VMOVUPD [dword rdx + 128], xmm5
	VFMADDPD xmm3, xmm3, xmm14, xmm14
	VMOVUPD [dword rdx + 144], xmm3
	.process_batch_increment:
	ADD rcx, 160
	ADD rdx, 160
	SUB r8, 20
	JAE .process_batch_fast
	.process_restore:
	ADD r8, 20
	JZ .return_ok
	.process_single:
	VMOVSD xmm4, [rcx]
	VMOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c0]
	VFMADDSD xmm3, xmm4, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c1], xmm5
	VPSLLQ xmm2, xmm3, 52
	VSUBSD xmm3, xmm3, xmm5
	VFMADDSD xmm5, xmm3, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c2], xmm4
	VFMADDSD xmm5, xmm3, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c3], xmm5
	VPMINSD xmm3, xmm2,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c4]
	VPMAXSD xmm3, xmm3,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c5]
	VPSUBD xmm2, xmm2, xmm3
	VMOVDQA xmm1,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c4]
	VPADDD xmm3, xmm3, xmm1
	VPADDD xmm2, xmm2, xmm1
	VMOVSD xmm1, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c6]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c7]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c8]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c9]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c10]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c11]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c12]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c13]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c14]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c15]
	VMULSD xmm1, xmm1, xmm5
	VFMADDSD xmm1, xmm1, xmm5, xmm5
	VFMADDSD xmm1, xmm1, xmm3, xmm3
	VMULSD xmm1, xmm1, xmm2
	VCMPLTSD xmm5, xmm4, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c16]
	VANDNPD xmm1, xmm5, xmm1
	VCMPGTSD xmm4, xmm4, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c17]
	VBLENDVPD xmm1, xmm1,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c18], xmm4
	VMOVSD [rdx], xmm1
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	VMOVAPS xmm6, [dword rsp + 480]
	VMOVAPS xmm7, [dword rsp + 496]
	VMOVAPS xmm8, [dword rsp + 512]
	VMOVAPS xmm9, [dword rsp + 528]
	VMOVAPS xmm10, [dword rsp + 544]
	VMOVAPS xmm11, [dword rsp + 560]
	VMOVAPS xmm12, [dword rsp + 576]
	VMOVAPS xmm13, [dword rsp + 592]
	VMOVAPS xmm14, [dword rsp + 608]
	VMOVAPS xmm15, [dword rsp + 624]
	MOV rsp, [dword rsp + 640]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	VMOVAPS ymm4,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c19]
	VMOVAPD ymm5, [rcx]
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c20]
	VFMADDPD ymm5, ymm5, ymm3, ymm4
	VMOVAPD ymm2, [byte rcx + 32]
	VFMADDPD ymm2, ymm2, ymm3, ymm4
	VMOVAPD ymm1, [byte rcx + 64]
	VFMADDPD ymm1, ymm1, ymm3, ymm4
	VMOVAPD ymm0, [byte rcx + 96]
	VFMADDPD ymm0, ymm0, ymm3, ymm4
	VMOVAPD ymm6, [dword rcx + 128]
	VFMADDPD ymm3, ymm6, ymm3, ymm4
	VEXTRACTF128 xmm6, ymm5, 1
	VPSLLQ xmm7, xmm5, 52
	VPSLLQ xmm6, xmm6, 52
	VSUBPD ymm5, ymm5, ymm4
	VMOVDQA xmm8,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c4]
	VPMINSD xmm9, xmm7, xmm8
	VPMINSD xmm10, xmm6, xmm8
	VMOVDQA xmm11,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c5]
	VPMAXSD xmm9, xmm9, xmm11
	VPMAXSD xmm10, xmm10, xmm11
	VMOVAPS ymm12,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c21]
	VFMADDPD ymm13, ymm5, ymm12, [rcx]
	VPSUBD xmm7, xmm7, xmm9
	VPSUBD xmm6, xmm6, xmm10
	VMOVDQA xmm14,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c4]
	VPADDD xmm9, xmm9, xmm14
	VPADDD xmm10, xmm10, xmm14
	VMOVDQA   [rsp + 160], xmm9
	VMOVDQA   [rsp + 176], xmm10
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c22]
	VFMADDPD ymm13, ymm5, ymm9, ymm13
	VPADDD xmm7, xmm7, xmm14
	VPADDD xmm6, xmm6, xmm14
	VMOVDQA   [rsp + 192], xmm7
	VMOVDQA   [rsp + 208], xmm6
	VEXTRACTF128 xmm5, ymm2, 1
	VPSLLQ xmm6, xmm2, 52
	VPSLLQ xmm5, xmm5, 52
	VSUBPD ymm2, ymm2, ymm4
	VPMINSD xmm7, xmm6, xmm8
	VPMINSD xmm10, xmm5, xmm8
	VPMAXSD xmm7, xmm7, xmm11
	VPMAXSD xmm10, xmm10, xmm11
	VFMADDPD ymm15, ymm2, ymm12, [byte rcx + 32]
	VPSUBD xmm6, xmm6, xmm7
	VPSUBD xmm5, xmm5, xmm10
	VPADDD xmm7, xmm7, xmm14
	VPADDD xmm10, xmm10, xmm14
	VMOVDQA   [rsp + 224], xmm7
	VMOVDQA   [rsp + 240], xmm10
	VFMADDPD ymm15, ymm2, ymm9, ymm15
	VPADDD xmm6, xmm6, xmm14
	VPADDD xmm5, xmm5, xmm14
	VMOVDQA   [rsp + 256], xmm6
	VMOVDQA   [rsp + 272], xmm5
	VEXTRACTF128 xmm5, ymm1, 1
	VPSLLQ xmm2, xmm1, 52
	VPSLLQ xmm5, xmm5, 52
	VSUBPD ymm1, ymm1, ymm4
	VPMINSD xmm6, xmm2, xmm8
	VPMINSD xmm7, xmm5, xmm8
	VPMAXSD xmm6, xmm6, xmm11
	VPMAXSD xmm7, xmm7, xmm11
	VFMADDPD ymm10, ymm1, ymm12, [byte rcx + 64]
	VPSUBD xmm2, xmm2, xmm6
	VPSUBD xmm5, xmm5, xmm7
	VPADDD xmm6, xmm6, xmm14
	VPADDD xmm7, xmm7, xmm14
	VMOVDQA   [rsp + 288], xmm6
	VMOVDQA   [rsp + 304], xmm7
	VFMADDPD ymm10, ymm1, ymm9, ymm10
	VPADDD xmm2, xmm2, xmm14
	VPADDD xmm5, xmm5, xmm14
	VMOVDQA   [rsp + 320], xmm2
	VMOVDQA   [rsp + 336], xmm5
	VEXTRACTF128 xmm5, ymm0, 1
	VPSLLQ xmm2, xmm0, 52
	VPSLLQ xmm5, xmm5, 52
	VSUBPD ymm0, ymm0, ymm4
	VPMINSD xmm1, xmm2, xmm8
	VPMINSD xmm6, xmm5, xmm8
	VPMAXSD xmm1, xmm1, xmm11
	VPMAXSD xmm6, xmm6, xmm11
	VFMADDPD ymm7, ymm0, ymm12, [byte rcx + 96]
	VPSUBD xmm2, xmm2, xmm1
	VPSUBD xmm5, xmm5, xmm6
	VPADDD xmm1, xmm1, xmm14
	VPADDD xmm6, xmm6, xmm14
	VMOVDQA   [rsp + 352], xmm1
	VMOVDQA   [rsp + 368], xmm6
	VFMADDPD ymm7, ymm0, ymm9, ymm7
	VPADDD xmm2, xmm2, xmm14
	VPADDD xmm5, xmm5, xmm14
	VMOVDQA   [rsp + 384], xmm2
	VMOVDQA   [rsp + 400], xmm5
	VEXTRACTF128 xmm5, ymm3, 1
	VPSLLQ xmm2, xmm3, 52
	VPSLLQ xmm5, xmm5, 52
	VSUBPD ymm3, ymm3, ymm4
	VPMINSD xmm4, xmm2, xmm8
	VPMINSD xmm1, xmm5, xmm8
	VPMAXSD xmm4, xmm4, xmm11
	VPMAXSD xmm1, xmm1, xmm11
	VFMADDPD ymm0, ymm3, ymm12, [dword rcx + 128]
	VPSUBD xmm2, xmm2, xmm4
	VPSUBD xmm5, xmm5, xmm1
	VPADDD xmm4, xmm4, xmm14
	VPADDD xmm1, xmm1, xmm14
	VMOVDQA   [rsp + 416], xmm4
	VMOVDQA   [rsp + 432], xmm1
	VFMADDPD ymm0, ymm3, ymm9, ymm0
	VPADDD xmm2, xmm2, xmm14
	VPADDD xmm5, xmm5, xmm14
	VMOVDQA   [rsp + 448], xmm2
	VMOVDQA   [rsp + 464], xmm5
	VMOVAPS ymm4,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c23]
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c24]
	VFMADDPD ymm3, ymm4, ymm13, ymm5
	VFMADDPD ymm2, ymm4, ymm15, ymm5
	VFMADDPD ymm1, ymm4, ymm10, ymm5
	VFMADDPD ymm6, ymm4, ymm7, ymm5
	VFMADDPD ymm4, ymm4, ymm0, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c25]
	VFMADDPD ymm3, ymm3, ymm13, ymm5
	VFMADDPD ymm2, ymm2, ymm15, ymm5
	VFMADDPD ymm1, ymm1, ymm10, ymm5
	VFMADDPD ymm6, ymm6, ymm7, ymm5
	VFMADDPD ymm4, ymm4, ymm0, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c26]
	VFMADDPD ymm3, ymm3, ymm13, ymm5
	VFMADDPD ymm2, ymm2, ymm15, ymm5
	VFMADDPD ymm1, ymm1, ymm10, ymm5
	VFMADDPD ymm6, ymm6, ymm7, ymm5
	VFMADDPD ymm4, ymm4, ymm0, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c27]
	VFMADDPD ymm3, ymm3, ymm13, ymm5
	VFMADDPD ymm2, ymm2, ymm15, ymm5
	VFMADDPD ymm1, ymm1, ymm10, ymm5
	VFMADDPD ymm6, ymm6, ymm7, ymm5
	VFMADDPD ymm4, ymm4, ymm0, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c28]
	VFMADDPD ymm3, ymm3, ymm13, ymm5
	VFMADDPD ymm2, ymm2, ymm15, ymm5
	VFMADDPD ymm1, ymm1, ymm10, ymm5
	VFMADDPD ymm6, ymm6, ymm7, ymm5
	VFMADDPD ymm4, ymm4, ymm0, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c29]
	VFMADDPD ymm3, ymm3, ymm13, ymm5
	VFMADDPD ymm2, ymm2, ymm15, ymm5
	VFMADDPD ymm1, ymm1, ymm10, ymm5
	VFMADDPD ymm6, ymm6, ymm7, ymm5
	VFMADDPD ymm4, ymm4, ymm0, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c30]
	VFMADDPD ymm3, ymm3, ymm13, ymm5
	VFMADDPD ymm2, ymm2, ymm15, ymm5
	VFMADDPD ymm1, ymm1, ymm10, ymm5
	VFMADDPD ymm6, ymm6, ymm7, ymm5
	VFMADDPD ymm4, ymm4, ymm0, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c31]
	VFMADDPD ymm3, ymm3, ymm13, ymm5
	VFMADDPD ymm2, ymm2, ymm15, ymm5
	VFMADDPD ymm1, ymm1, ymm10, ymm5
	VFMADDPD ymm6, ymm6, ymm7, ymm5
	VFMADDPD ymm4, ymm4, ymm0, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c32]
	VFMADDPD ymm3, ymm3, ymm13, ymm5
	VFMADDPD ymm2, ymm2, ymm15, ymm5
	VFMADDPD ymm1, ymm1, ymm10, ymm5
	VFMADDPD ymm6, ymm6, ymm7, ymm5
	VFMADDPD ymm4, ymm4, ymm0, ymm5
	VMULPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VMULPD ymm1, ymm1, ymm10
	VMULPD ymm6, ymm6, ymm7
	VMULPD ymm4, ymm4, ymm0
	VFMADDPD ymm3, ymm3, ymm13, ymm13
	VFMADDPD ymm2, ymm2, ymm15, ymm15
	VFMADDPD ymm1, ymm1, ymm10, ymm10
	VFMADDPD ymm6, ymm6, ymm7, ymm7
	VFMADDPD ymm4, ymm4, ymm0, ymm0
	VMOVAPD ymm5,   [rsp + 160]
	VFMADDPD ymm3, ymm3, ymm5, ymm5
	VMOVAPD ymm5,   [rsp + 224]
	VFMADDPD ymm2, ymm2, ymm5, ymm5
	VMOVAPD ymm5,   [rsp + 288]
	VFMADDPD ymm1, ymm1, ymm5, ymm5
	VMOVAPD ymm5,   [rsp + 352]
	VFMADDPD ymm6, ymm6, ymm5, ymm5
	VMOVAPD ymm5,   [rsp + 416]
	VFMADDPD ymm4, ymm4, ymm5, ymm5
	VMULPD ymm3, ymm3,   [rsp + 192]
	VMULPD ymm2, ymm2,   [rsp + 256]
	VMULPD ymm1, ymm1,   [rsp + 320]
	VMULPD ymm6, ymm6,   [rsp + 384]
	VMULPD ymm4, ymm4,   [rsp + 448]
	VEXTRACTF128 xmm5, ymm3, 1
	VMOVAPD xmm0, [rcx]
	VMOVAPD xmm7, [byte rcx + 16]
	VMOVAPD xmm8,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c33]
	VCMPLTPD xmm9, xmm0, xmm8
	VCMPLTPD xmm10, xmm7, xmm8
	VMOVAPD xmm11,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c34]
	VANDNPD xmm3, xmm9, xmm3
	VANDNPD xmm5, xmm10, xmm5
	VMOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c18]
	VCMPGTPD xmm0, xmm0, xmm11
	VCMPGTPD xmm7, xmm7, xmm11
	VBLENDVPD xmm3, xmm3, xmm9, xmm0
	VBLENDVPD xmm5, xmm5, xmm9, xmm7
	VMOVUPD [rdx], xmm3
	VMOVUPD [byte rdx + 16], xmm5
	VEXTRACTF128 xmm5, ymm2, 1
	VMOVAPD xmm3, [byte rcx + 32]
	VMOVAPD xmm0, [byte rcx + 48]
	VCMPLTPD xmm7, xmm3, xmm8
	VCMPLTPD xmm10, xmm0, xmm8
	VANDNPD xmm2, xmm7, xmm2
	VANDNPD xmm5, xmm10, xmm5
	VCMPGTPD xmm3, xmm3, xmm11
	VCMPGTPD xmm0, xmm0, xmm11
	VBLENDVPD xmm2, xmm2, xmm9, xmm3
	VBLENDVPD xmm5, xmm5, xmm9, xmm0
	VMOVUPD [byte rdx + 32], xmm2
	VMOVUPD [byte rdx + 48], xmm5
	VEXTRACTF128 xmm5, ymm1, 1
	VMOVAPD xmm3, [byte rcx + 64]
	VMOVAPD xmm2, [byte rcx + 80]
	VCMPLTPD xmm0, xmm3, xmm8
	VCMPLTPD xmm7, xmm2, xmm8
	VANDNPD xmm1, xmm0, xmm1
	VANDNPD xmm5, xmm7, xmm5
	VCMPGTPD xmm3, xmm3, xmm11
	VCMPGTPD xmm2, xmm2, xmm11
	VBLENDVPD xmm1, xmm1, xmm9, xmm3
	VBLENDVPD xmm5, xmm5, xmm9, xmm2
	VMOVUPD [byte rdx + 64], xmm1
	VMOVUPD [byte rdx + 80], xmm5
	VEXTRACTF128 xmm5, ymm6, 1
	VMOVAPD xmm3, [byte rcx + 96]
	VMOVAPD xmm2, [byte rcx + 112]
	VCMPLTPD xmm1, xmm3, xmm8
	VCMPLTPD xmm0, xmm2, xmm8
	VANDNPD xmm6, xmm1, xmm6
	VANDNPD xmm5, xmm0, xmm5
	VCMPGTPD xmm3, xmm3, xmm11
	VCMPGTPD xmm2, xmm2, xmm11
	VBLENDVPD xmm6, xmm6, xmm9, xmm3
	VBLENDVPD xmm5, xmm5, xmm9, xmm2
	VMOVUPD [byte rdx + 96], xmm6
	VMOVUPD [byte rdx + 112], xmm5
	VEXTRACTF128 xmm5, ymm4, 1
	VMOVAPD xmm3, [dword rcx + 128]
	VMOVAPD xmm2, [dword rcx + 144]
	VCMPLTPD xmm1, xmm3, xmm8
	VCMPLTPD xmm0, xmm2, xmm8
	VANDNPD xmm4, xmm1, xmm4
	VANDNPD xmm5, xmm0, xmm5
	VCMPGTPD xmm3, xmm3, xmm11
	VCMPGTPD xmm2, xmm2, xmm11
	VBLENDVPD xmm4, xmm4, xmm9, xmm3
	VBLENDVPD xmm5, xmm5, xmm9, xmm2
	VMOVUPD [dword rdx + 128], xmm4
	VMOVUPD [dword rdx + 144], xmm5
	JMP .process_batch_increment

section .rdata$h rdata align=32
_yepMath_Exp_V64f_V64f_Haswell_constants:
	.c0: DQ 0x4338000000000000
	.c1: DQ 0x3FF71547652B82FE
	.c2: DQ 0xBFE62E42FEFA39EF
	.c3: DQ 0xBC7ABC9E3B39803F
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c5: DQ 0xC020000000000000, 0xC020000000000000
	.c6: DQ 0x3E5AE9043CA87A40
	.c7: DQ 0x3E928A284098D813
	.c8: DQ 0x3EC71DE71651CE7A
	.c9: DQ 0x3EFA019A6AC02A7D
	.c10: DQ 0x3F2A01A017EEB164
	.c11: DQ 0x3F56C16C17F2BF99
	.c12: DQ 0x3F811111111173CA
	.c13: DQ 0x3FA5555555552115
	.c14: DQ 0x3FC5555555555540
	.c15: DQ 0x3FE0000000000005
	.c16: DQ 0xC0874910D52D3051
	.c17: DQ 0x40862E42FEFA39EF
	.c18: DQ 0x7FF0000000000000, 0x7FF0000000000000
	ALIGN 32
	.c19: DQ 0xC08625F1A5DA9C19, 0xC08625F1A5DA9C19, 0xC08625F1A5DA9C19, 0xC08625F1A5DA9C19
	.c20: DQ 0x40862B7D369A5AA8, 0x40862B7D369A5AA8, 0x40862B7D369A5AA8, 0x40862B7D369A5AA8
	.c21: DQ 0x3FF71547652B82FE, 0x3FF71547652B82FE, 0x3FF71547652B82FE, 0x3FF71547652B82FE
	.c22: DQ 0x4338000000000000, 0x4338000000000000, 0x4338000000000000, 0x4338000000000000
	.c23: DQ 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000
	.c24: DQ 0xBFE62E42FEFA39EF, 0xBFE62E42FEFA39EF, 0xBFE62E42FEFA39EF, 0xBFE62E42FEFA39EF
	.c25: DQ 0xBC7ABC9E3B39803F, 0xBC7ABC9E3B39803F, 0xBC7ABC9E3B39803F, 0xBC7ABC9E3B39803F
	.c26: DQ 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40
	.c27: DQ 0x3E928A284098D813, 0x3E928A284098D813, 0x3E928A284098D813, 0x3E928A284098D813
	.c28: DQ 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A
	.c29: DQ 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D
	.c30: DQ 0x3F2A01A017EEB164, 0x3F2A01A017EEB164, 0x3F2A01A017EEB164, 0x3F2A01A017EEB164
	.c31: DQ 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99
	.c32: DQ 0x3F811111111173CA, 0x3F811111111173CA, 0x3F811111111173CA, 0x3F811111111173CA
	.c33: DQ 0x3FA5555555552115, 0x3FA5555555552115, 0x3FA5555555552115, 0x3FA5555555552115
	.c34: DQ 0x3FC5555555555540, 0x3FC5555555555540, 0x3FC5555555555540, 0x3FC5555555555540
	.c35: DQ 0x3FE0000000000005, 0x3FE0000000000005, 0x3FE0000000000005, 0x3FE0000000000005
	.c36: DQ 0xC020000000000000, 0xC020000000000000, 0xC020000000000000, 0xC020000000000000
	.c37: DQ 0xC0874910D52D3051, 0xC0874910D52D3051, 0xC0874910D52D3051, 0xC0874910D52D3051
	.c38: DQ 0x40862E42FEFA39EF, 0x40862E42FEFA39EF, 0x40862E42FEFA39EF, 0x40862E42FEFA39EF
	.c39: DQ 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000


section .text$h code align=16
global _yepMath_Exp_V64f_V64f_Haswell
_yepMath_Exp_V64f_V64f_Haswell:
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 1440
	VMOVAPS [dword rsp + 1280], xmm6
	VMOVAPS [dword rsp + 1296], xmm7
	VMOVAPS [dword rsp + 1312], xmm8
	VMOVAPS [dword rsp + 1328], xmm9
	VMOVAPS [dword rsp + 1344], xmm10
	VMOVAPS [dword rsp + 1360], xmm11
	VMOVAPS [dword rsp + 1376], xmm12
	VMOVAPS [dword rsp + 1392], xmm13
	VMOVAPS [dword rsp + 1408], xmm14
	VMOVAPS [dword rsp + 1424], xmm15
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm4, [rcx]
	VMOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c0]
	VMOVSD xmm3, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c1]
	VFMADD132SD xmm3, xmm5, xmm4
	VPSLLQ xmm2, xmm3, 52
	VSUBSD xmm3, xmm3, xmm5
	VMOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c2]
	VFMADD132SD xmm5, xmm4, xmm3
	VFMADD231SD xmm5, xmm3, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c3]
	VPMINSD xmm3, xmm2,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c4]
	VPMAXSD xmm3, xmm3,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c5]
	VPSUBD xmm2, xmm2, xmm3
	VMOVDQA xmm1,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c4]
	VPADDD xmm3, xmm3, xmm1
	VPADDD xmm2, xmm2, xmm1
	VMOVSD xmm1, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c6]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c7]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c8]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c9]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c10]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c11]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c12]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c13]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c14]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c15]
	VMULSD xmm1, xmm1, xmm5
	VFMADD132SD xmm1, xmm5, xmm5
	VFMADD132SD xmm1, xmm3, xmm3
	VMULSD xmm1, xmm1, xmm2
	VCMPLTSD xmm5, xmm4, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c16]
	VANDNPD xmm1, xmm5, xmm1
	VCMPGTSD xmm4, xmm4, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c17]
	VBLENDVPD xmm1, xmm1,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c18], xmm4
	VMOVSD [rdx], xmm1
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB r8, 40
	JB .process_restore
	align 32
	.process_batch_fast:
	VMOVAPD ymm4, [rcx]
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c19]
	VCMPLTPD ymm3, ymm4, ymm5
	VMOVAPS ymm2,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c20]
	VCMPGTPD ymm1, ymm4, ymm2
	VORPD ymm3, ymm3, ymm1
	VTESTPD ymm3, ymm3
	JNZ .process_batch_full
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c21]
	VMOVAPS ymm1,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c22]
	VFMADD132PD ymm4, ymm1, ymm3
	VMOVAPD ymm0, [byte rcx + 32]
	VCMPLTPD ymm6, ymm0, ymm5
	VCMPGTPD ymm7, ymm0, ymm2
	VORPD ymm6, ymm6, ymm7
	VTESTPD ymm6, ymm6
	JNZ .process_batch_full
	VFMADD132PD ymm0, ymm1, ymm3
	VMOVAPD ymm6, [byte rcx + 64]
	VCMPLTPD ymm7, ymm6, ymm5
	VCMPGTPD ymm8, ymm6, ymm2
	VORPD ymm7, ymm7, ymm8
	VTESTPD ymm7, ymm7
	JNZ .process_batch_full
	VFMADD132PD ymm6, ymm1, ymm3
	VMOVAPD ymm7, [byte rcx + 96]
	VCMPLTPD ymm8, ymm7, ymm5
	VCMPGTPD ymm9, ymm7, ymm2
	VORPD ymm8, ymm8, ymm9
	VTESTPD ymm8, ymm8
	JNZ .process_batch_full
	VFMADD132PD ymm7, ymm1, ymm3
	VMOVAPD ymm8, [dword rcx + 128]
	VCMPLTPD ymm9, ymm8, ymm5
	VCMPGTPD ymm10, ymm8, ymm2
	VORPD ymm9, ymm9, ymm10
	VTESTPD ymm9, ymm9
	JNZ .process_batch_full
	VFMADD132PD ymm8, ymm1, ymm3
	VMOVAPD ymm9, [dword rcx + 160]
	VCMPLTPD ymm10, ymm9, ymm5
	VCMPGTPD ymm11, ymm9, ymm2
	VORPD ymm10, ymm10, ymm11
	VTESTPD ymm10, ymm10
	JNZ .process_batch_full
	VFMADD132PD ymm9, ymm1, ymm3
	VMOVAPD ymm10, [dword rcx + 192]
	VCMPLTPD ymm11, ymm10, ymm5
	VCMPGTPD ymm12, ymm10, ymm2
	VORPD ymm11, ymm11, ymm12
	VTESTPD ymm11, ymm11
	JNZ .process_batch_full
	VFMADD132PD ymm10, ymm1, ymm3
	VMOVAPD ymm11, [dword rcx + 224]
	VCMPLTPD ymm12, ymm11, ymm5
	VCMPGTPD ymm13, ymm11, ymm2
	VORPD ymm12, ymm12, ymm13
	VTESTPD ymm12, ymm12
	JNZ .process_batch_full
	VFMADD132PD ymm11, ymm1, ymm3
	VMOVAPD ymm12, [dword rcx + 256]
	VCMPLTPD ymm13, ymm12, ymm5
	VCMPGTPD ymm14, ymm12, ymm2
	VORPD ymm13, ymm13, ymm14
	VTESTPD ymm13, ymm13
	JNZ .process_batch_full
	VFMADD132PD ymm12, ymm1, ymm3
	VMOVAPD ymm13, [dword rcx + 288]
	VCMPLTPD ymm5, ymm13, ymm5
	VCMPGTPD ymm2, ymm13, ymm2
	VORPD ymm5, ymm5, ymm2
	VTESTPD ymm5, ymm5
	JNZ .process_batch_full
	VFMADD132PD ymm13, ymm1, ymm3
	VPSLLQ ymm5, ymm4, 52
	VSUBPD ymm4, ymm4, ymm1
	VMOVDQA ymm3,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c23]
	VPADDD ymm5, ymm5, ymm3
	VMOVDQA   [rsp], ymm5
	VPSLLQ ymm5, ymm0, 52
	VSUBPD ymm0, ymm0, ymm1
	VPADDD ymm5, ymm5, ymm3
	VMOVDQA   [rsp + 32], ymm5
	VPSLLQ ymm5, ymm6, 52
	VSUBPD ymm6, ymm6, ymm1
	VPADDD ymm5, ymm5, ymm3
	VMOVDQA   [rsp + 64], ymm5
	VPSLLQ ymm5, ymm7, 52
	VSUBPD ymm7, ymm7, ymm1
	VPADDD ymm5, ymm5, ymm3
	VMOVDQA   [rsp + 96], ymm5
	VPSLLQ ymm5, ymm8, 52
	VSUBPD ymm8, ymm8, ymm1
	VPADDD ymm5, ymm5, ymm3
	VMOVDQA   [rsp + 128], ymm5
	VPSLLQ ymm5, ymm9, 52
	VSUBPD ymm9, ymm9, ymm1
	VPADDD ymm5, ymm5, ymm3
	VMOVDQA   [rsp + 160], ymm5
	VPSLLQ ymm5, ymm10, 52
	VSUBPD ymm10, ymm10, ymm1
	VPADDD ymm5, ymm5, ymm3
	VMOVDQA   [rsp + 192], ymm5
	VPSLLQ ymm5, ymm11, 52
	VSUBPD ymm11, ymm11, ymm1
	VPADDD ymm5, ymm5, ymm3
	VMOVDQA   [rsp + 224], ymm5
	VPSLLQ ymm5, ymm12, 52
	VSUBPD ymm12, ymm12, ymm1
	VPADDD ymm5, ymm5, ymm3
	VMOVDQA   [rsp + 256], ymm5
	VPSLLQ ymm5, ymm13, 52
	VSUBPD ymm13, ymm13, ymm1
	VPADDD ymm5, ymm5, ymm3
	VMOVDQA   [rsp + 288], ymm5
	VMOVAPD ymm5, [rcx]
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c24]
	VFMADD231PD ymm5, ymm4, ymm3
	VMOVAPS ymm2,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c25]
	VFMADD231PD ymm5, ymm4, ymm2
	VMOVAPD ymm4, [byte rcx + 32]
	VFMADD231PD ymm4, ymm0, ymm3
	VFMADD231PD ymm4, ymm0, ymm2
	VMOVAPD   [rsp + 320], ymm4
	VMOVAPD ymm1, [byte rcx + 64]
	VFMADD231PD ymm1, ymm6, ymm3
	VFMADD231PD ymm1, ymm6, ymm2
	VMOVAPD ymm0, [byte rcx + 96]
	VFMADD231PD ymm0, ymm7, ymm3
	VFMADD231PD ymm0, ymm7, ymm2
	VMOVAPD   [rsp + 352], ymm0
	VMOVAPD ymm6, [dword rcx + 128]
	VFMADD231PD ymm6, ymm8, ymm3
	VFMADD231PD ymm6, ymm8, ymm2
	VMOVAPD ymm7, [dword rcx + 160]
	VFMADD231PD ymm7, ymm9, ymm3
	VFMADD231PD ymm7, ymm9, ymm2
	VMOVAPD   [rsp + 384], ymm7
	VMOVAPD ymm8, [dword rcx + 192]
	VFMADD231PD ymm8, ymm10, ymm3
	VFMADD231PD ymm8, ymm10, ymm2
	VMOVAPD ymm9, [dword rcx + 224]
	VFMADD231PD ymm9, ymm11, ymm3
	VFMADD231PD ymm9, ymm11, ymm2
	VMOVAPD   [rsp + 416], ymm9
	VMOVAPD ymm10, [dword rcx + 256]
	VFMADD231PD ymm10, ymm12, ymm3
	VFMADD231PD ymm10, ymm12, ymm2
	VMOVAPD ymm11, [dword rcx + 288]
	VFMADD231PD ymm11, ymm13, ymm3
	VFMADD231PD ymm11, ymm13, ymm2
	VMOVAPD   [rsp + 448], ymm11
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c26]
	VMOVAPS ymm2,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c27]
	VMOVAPD ymm11, ymm3
	VFMADD132PD ymm11, ymm2, ymm5
	VMOVAPD ymm12, ymm3
	VFMADD132PD ymm12, ymm2, ymm4
	VMOVAPD ymm4, ymm3
	VFMADD132PD ymm4, ymm2, ymm1
	VMOVAPD ymm13, ymm3
	VFMADD132PD ymm13, ymm2, ymm0
	VMOVAPD ymm0, ymm3
	VFMADD132PD ymm0, ymm2, ymm6
	VMOVAPD ymm14, ymm3
	VFMADD132PD ymm14, ymm2, ymm7
	VMOVAPD ymm7, ymm3
	VFMADD132PD ymm7, ymm2, ymm8
	VMOVAPD ymm15, ymm3
	VFMADD132PD ymm15, ymm2, ymm9
	VMOVAPD ymm9, ymm3
	VFMADD132PD ymm9, ymm2, ymm10
	VFMADD132PD ymm3, ymm2,   [rsp + 448]
	VMOVAPS ymm2,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c28]
	VFMADD132PD ymm11, ymm2, ymm5
	VFMADD132PD ymm12, ymm2,   [rsp + 320]
	VFMADD132PD ymm4, ymm2, ymm1
	VFMADD132PD ymm13, ymm2,   [rsp + 352]
	VFMADD132PD ymm0, ymm2, ymm6
	VFMADD132PD ymm14, ymm2,   [rsp + 384]
	VFMADD132PD ymm7, ymm2, ymm8
	VFMADD132PD ymm15, ymm2,   [rsp + 416]
	VFMADD132PD ymm9, ymm2, ymm10
	VFMADD132PD ymm3, ymm2,   [rsp + 448]
	VMOVAPS ymm2,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c29]
	VFMADD132PD ymm11, ymm2, ymm5
	VFMADD132PD ymm12, ymm2,   [rsp + 320]
	VFMADD132PD ymm4, ymm2, ymm1
	VFMADD132PD ymm13, ymm2,   [rsp + 352]
	VFMADD132PD ymm0, ymm2, ymm6
	VFMADD132PD ymm14, ymm2,   [rsp + 384]
	VFMADD132PD ymm7, ymm2, ymm8
	VFMADD132PD ymm15, ymm2,   [rsp + 416]
	VFMADD132PD ymm9, ymm2, ymm10
	VFMADD132PD ymm3, ymm2,   [rsp + 448]
	VMOVAPS ymm2,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c30]
	VFMADD132PD ymm11, ymm2, ymm5
	VFMADD132PD ymm12, ymm2,   [rsp + 320]
	VFMADD132PD ymm4, ymm2, ymm1
	VFMADD132PD ymm13, ymm2,   [rsp + 352]
	VFMADD132PD ymm0, ymm2, ymm6
	VFMADD132PD ymm14, ymm2,   [rsp + 384]
	VFMADD132PD ymm7, ymm2, ymm8
	VFMADD132PD ymm15, ymm2,   [rsp + 416]
	VFMADD132PD ymm9, ymm2, ymm10
	VFMADD132PD ymm3, ymm2,   [rsp + 448]
	VMOVAPS ymm2,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c31]
	VFMADD132PD ymm11, ymm2, ymm5
	VFMADD132PD ymm12, ymm2,   [rsp + 320]
	VFMADD132PD ymm4, ymm2, ymm1
	VFMADD132PD ymm13, ymm2,   [rsp + 352]
	VFMADD132PD ymm0, ymm2, ymm6
	VFMADD132PD ymm14, ymm2,   [rsp + 384]
	VFMADD132PD ymm7, ymm2, ymm8
	VFMADD132PD ymm15, ymm2,   [rsp + 416]
	VFMADD132PD ymm9, ymm2, ymm10
	VFMADD132PD ymm3, ymm2,   [rsp + 448]
	VMOVAPS ymm2,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c32]
	VFMADD132PD ymm11, ymm2, ymm5
	VFMADD132PD ymm12, ymm2,   [rsp + 320]
	VFMADD132PD ymm4, ymm2, ymm1
	VFMADD132PD ymm13, ymm2,   [rsp + 352]
	VFMADD132PD ymm0, ymm2, ymm6
	VFMADD132PD ymm14, ymm2,   [rsp + 384]
	VFMADD132PD ymm7, ymm2, ymm8
	VFMADD132PD ymm15, ymm2,   [rsp + 416]
	VFMADD132PD ymm9, ymm2, ymm10
	VFMADD132PD ymm3, ymm2,   [rsp + 448]
	VMOVAPS ymm2,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c33]
	VFMADD132PD ymm11, ymm2, ymm5
	VFMADD132PD ymm12, ymm2,   [rsp + 320]
	VFMADD132PD ymm4, ymm2, ymm1
	VFMADD132PD ymm13, ymm2,   [rsp + 352]
	VFMADD132PD ymm0, ymm2, ymm6
	VFMADD132PD ymm14, ymm2,   [rsp + 384]
	VFMADD132PD ymm7, ymm2, ymm8
	VFMADD132PD ymm15, ymm2,   [rsp + 416]
	VFMADD132PD ymm9, ymm2, ymm10
	VFMADD132PD ymm3, ymm2,   [rsp + 448]
	VMOVAPS ymm2,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c34]
	VFMADD132PD ymm11, ymm2, ymm5
	VFMADD132PD ymm12, ymm2,   [rsp + 320]
	VFMADD132PD ymm4, ymm2, ymm1
	VFMADD132PD ymm13, ymm2,   [rsp + 352]
	VFMADD132PD ymm0, ymm2, ymm6
	VFMADD132PD ymm14, ymm2,   [rsp + 384]
	VFMADD132PD ymm7, ymm2, ymm8
	VFMADD132PD ymm15, ymm2,   [rsp + 416]
	VFMADD132PD ymm9, ymm2, ymm10
	VFMADD132PD ymm3, ymm2,   [rsp + 448]
	VMOVAPS ymm2,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c35]
	VFMADD132PD ymm11, ymm2, ymm5
	VFMADD132PD ymm12, ymm2,   [rsp + 320]
	VFMADD132PD ymm4, ymm2, ymm1
	VFMADD132PD ymm13, ymm2,   [rsp + 352]
	VFMADD132PD ymm0, ymm2, ymm6
	VFMADD132PD ymm14, ymm2,   [rsp + 384]
	VFMADD132PD ymm7, ymm2, ymm8
	VFMADD132PD ymm15, ymm2,   [rsp + 416]
	VFMADD132PD ymm9, ymm2, ymm10
	VFMADD132PD ymm3, ymm2,   [rsp + 448]
	VMULPD ymm11, ymm11, ymm5
	VFMADD132PD ymm11, ymm5, ymm5
	VMOVAPD ymm5,   [rsp + 320]
	VMULPD ymm12, ymm12, ymm5
	VFMADD132PD ymm12, ymm5, ymm5
	VMULPD ymm4, ymm4, ymm1
	VFMADD132PD ymm4, ymm1, ymm1
	VMOVAPD ymm5,   [rsp + 352]
	VMULPD ymm13, ymm13, ymm5
	VFMADD132PD ymm13, ymm5, ymm5
	VMULPD ymm0, ymm0, ymm6
	VFMADD132PD ymm0, ymm6, ymm6
	VMOVAPD ymm5,   [rsp + 384]
	VMULPD ymm14, ymm14, ymm5
	VFMADD132PD ymm14, ymm5, ymm5
	VMULPD ymm7, ymm7, ymm8
	VFMADD132PD ymm7, ymm8, ymm8
	VMOVAPD ymm5,   [rsp + 416]
	VMULPD ymm15, ymm15, ymm5
	VFMADD132PD ymm15, ymm5, ymm5
	VMULPD ymm9, ymm9, ymm10
	VFMADD132PD ymm9, ymm10, ymm10
	VMOVAPD ymm5,   [rsp + 448]
	VMULPD ymm3, ymm3, ymm5
	VFMADD132PD ymm3, ymm5, ymm5
	VMOVAPD ymm5,   [rsp]
	VFMADD132PD ymm11, ymm5, ymm5
	VMOVUPD [rdx], ymm11
	VMOVAPD ymm5,   [rsp + 32]
	VFMADD132PD ymm12, ymm5, ymm5
	VMOVUPD [byte rdx + 32], ymm12
	VMOVAPD ymm5,   [rsp + 64]
	VFMADD132PD ymm4, ymm5, ymm5
	VMOVUPD [byte rdx + 64], ymm4
	VMOVAPD ymm4,   [rsp + 96]
	VFMADD132PD ymm13, ymm4, ymm4
	VMOVUPD [byte rdx + 96], ymm13
	VMOVAPD ymm4,   [rsp + 128]
	VFMADD132PD ymm0, ymm4, ymm4
	VMOVUPD [dword rdx + 128], ymm0
	VMOVAPD ymm4,   [rsp + 160]
	VFMADD132PD ymm14, ymm4, ymm4
	VMOVUPD [dword rdx + 160], ymm14
	VMOVAPD ymm4,   [rsp + 192]
	VFMADD132PD ymm7, ymm4, ymm4
	VMOVUPD [dword rdx + 192], ymm7
	VMOVAPD ymm4,   [rsp + 224]
	VFMADD132PD ymm15, ymm4, ymm4
	VMOVUPD [dword rdx + 224], ymm15
	VMOVAPD ymm4,   [rsp + 256]
	VFMADD132PD ymm9, ymm4, ymm4
	VMOVUPD [dword rdx + 256], ymm9
	VMOVAPD ymm4,   [rsp + 288]
	VFMADD132PD ymm3, ymm4, ymm4
	VMOVUPD [dword rdx + 288], ymm3
	.process_batch_increment:
	ADD rcx, 320
	ADD rdx, 320
	SUB r8, 40
	JAE .process_batch_fast
	.process_restore:
	ADD r8, 40
	JZ .return_ok
	.process_single:
	VMOVSD xmm4, [rcx]
	VMOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c0]
	VMOVSD xmm3, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c1]
	VFMADD132SD xmm3, xmm5, xmm4
	VPSLLQ xmm2, xmm3, 52
	VSUBSD xmm3, xmm3, xmm5
	VMOVSD xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c2]
	VFMADD132SD xmm5, xmm4, xmm3
	VFMADD231SD xmm5, xmm3, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c3]
	VPMINSD xmm3, xmm2,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c4]
	VPMAXSD xmm3, xmm3,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c5]
	VPSUBD xmm2, xmm2, xmm3
	VMOVDQA xmm1,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c4]
	VPADDD xmm3, xmm3, xmm1
	VPADDD xmm2, xmm2, xmm1
	VMOVSD xmm1, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c6]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c7]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c8]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c9]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c10]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c11]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c12]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c13]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c14]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c15]
	VMULSD xmm1, xmm1, xmm5
	VFMADD132SD xmm1, xmm5, xmm5
	VFMADD132SD xmm1, xmm3, xmm3
	VMULSD xmm1, xmm1, xmm2
	VCMPLTSD xmm5, xmm4, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c16]
	VANDNPD xmm1, xmm5, xmm1
	VCMPGTSD xmm4, xmm4, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c17]
	VBLENDVPD xmm1, xmm1,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c18], xmm4
	VMOVSD [rdx], xmm1
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	VMOVAPS xmm6, [dword rsp + 1280]
	VMOVAPS xmm7, [dword rsp + 1296]
	VMOVAPS xmm8, [dword rsp + 1312]
	VMOVAPS xmm9, [dword rsp + 1328]
	VMOVAPS xmm10, [dword rsp + 1344]
	VMOVAPS xmm11, [dword rsp + 1360]
	VMOVAPS xmm12, [dword rsp + 1376]
	VMOVAPS xmm13, [dword rsp + 1392]
	VMOVAPS xmm14, [dword rsp + 1408]
	VMOVAPS xmm15, [dword rsp + 1424]
	MOV rsp, [dword rsp + 1440]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	VMOVAPD ymm4, [rcx]
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c21]
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c22]
	VFMADD213PD ymm4, ymm5, ymm3
	VMOVAPD ymm2, [byte rcx + 32]
	VFMADD213PD ymm2, ymm5, ymm3
	VMOVAPD ymm1, [byte rcx + 64]
	VFMADD213PD ymm1, ymm5, ymm3
	VMOVAPD ymm0, [byte rcx + 96]
	VFMADD213PD ymm0, ymm5, ymm3
	VMOVAPD ymm6, [dword rcx + 128]
	VFMADD213PD ymm6, ymm5, ymm3
	VMOVAPD ymm7, [dword rcx + 160]
	VFMADD213PD ymm7, ymm5, ymm3
	VMOVAPD ymm8, [dword rcx + 192]
	VFMADD213PD ymm8, ymm5, ymm3
	VMOVAPD ymm9, [dword rcx + 224]
	VFMADD213PD ymm9, ymm5, ymm3
	VMOVAPD ymm10, [dword rcx + 256]
	VFMADD213PD ymm10, ymm5, ymm3
	VMOVAPD ymm11, [dword rcx + 288]
	VFMADD213PD ymm11, ymm5, ymm3
	VPSLLQ ymm5, ymm4, 52
	VSUBPD ymm4, ymm4, ymm3
	VMOVDQA ymm12,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c23]
	VPMINSW ymm13, ymm5, ymm12
	VMOVDQA ymm14,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c36]
	VPMAXSW ymm13, ymm13, ymm14
	VPSUBD ymm5, ymm5, ymm13
	VMOVDQA ymm15,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c23]
	VPADDD ymm13, ymm13, ymm15
	VMOVDQA   [rsp + 480], ymm13
	VPADDD ymm5, ymm5, ymm15
	VMOVDQA   [rsp + 512], ymm5
	VPSLLQ ymm5, ymm2, 52
	VSUBPD ymm2, ymm2, ymm3
	VPMINSW ymm13, ymm5, ymm12
	VPMAXSW ymm13, ymm13, ymm14
	VPSUBD ymm5, ymm5, ymm13
	VPADDD ymm13, ymm13, ymm15
	VMOVDQA   [rsp + 544], ymm13
	VPADDD ymm5, ymm5, ymm15
	VMOVDQA   [rsp + 576], ymm5
	VPSLLQ ymm5, ymm1, 52
	VSUBPD ymm1, ymm1, ymm3
	VPMINSW ymm13, ymm5, ymm12
	VPMAXSW ymm13, ymm13, ymm14
	VPSUBD ymm5, ymm5, ymm13
	VPADDD ymm13, ymm13, ymm15
	VMOVDQA   [rsp + 608], ymm13
	VPADDD ymm5, ymm5, ymm15
	VMOVDQA   [rsp + 640], ymm5
	VPSLLQ ymm5, ymm0, 52
	VSUBPD ymm0, ymm0, ymm3
	VPMINSW ymm13, ymm5, ymm12
	VPMAXSW ymm13, ymm13, ymm14
	VPSUBD ymm5, ymm5, ymm13
	VPADDD ymm13, ymm13, ymm15
	VMOVDQA   [rsp + 672], ymm13
	VPADDD ymm5, ymm5, ymm15
	VMOVDQA   [rsp + 704], ymm5
	VPSLLQ ymm5, ymm6, 52
	VSUBPD ymm6, ymm6, ymm3
	VPMINSW ymm13, ymm5, ymm12
	VPMAXSW ymm13, ymm13, ymm14
	VPSUBD ymm5, ymm5, ymm13
	VPADDD ymm13, ymm13, ymm15
	VMOVDQA   [rsp + 736], ymm13
	VPADDD ymm5, ymm5, ymm15
	VMOVDQA   [rsp + 768], ymm5
	VPSLLQ ymm5, ymm7, 52
	VSUBPD ymm7, ymm7, ymm3
	VPMINSW ymm13, ymm5, ymm12
	VPMAXSW ymm13, ymm13, ymm14
	VPSUBD ymm5, ymm5, ymm13
	VPADDD ymm13, ymm13, ymm15
	VMOVDQA   [rsp + 800], ymm13
	VPADDD ymm5, ymm5, ymm15
	VMOVDQA   [rsp + 832], ymm5
	VPSLLQ ymm5, ymm8, 52
	VSUBPD ymm8, ymm8, ymm3
	VPMINSW ymm13, ymm5, ymm12
	VPMAXSW ymm13, ymm13, ymm14
	VPSUBD ymm5, ymm5, ymm13
	VPADDD ymm13, ymm13, ymm15
	VMOVDQA   [rsp + 864], ymm13
	VPADDD ymm5, ymm5, ymm15
	VMOVDQA   [rsp + 896], ymm5
	VPSLLQ ymm5, ymm9, 52
	VSUBPD ymm9, ymm9, ymm3
	VPMINSW ymm13, ymm5, ymm12
	VPMAXSW ymm13, ymm13, ymm14
	VPSUBD ymm5, ymm5, ymm13
	VPADDD ymm13, ymm13, ymm15
	VMOVDQA   [rsp + 928], ymm13
	VPADDD ymm5, ymm5, ymm15
	VMOVDQA   [rsp + 960], ymm5
	VPSLLQ ymm5, ymm10, 52
	VSUBPD ymm10, ymm10, ymm3
	VPMINSW ymm13, ymm5, ymm12
	VPMAXSW ymm13, ymm13, ymm14
	VPSUBD ymm5, ymm5, ymm13
	VPADDD ymm13, ymm13, ymm15
	VMOVDQA   [rsp + 992], ymm13
	VPADDD ymm5, ymm5, ymm15
	VMOVDQA   [rsp + 1024], ymm5
	VPSLLQ ymm5, ymm11, 52
	VSUBPD ymm11, ymm11, ymm3
	VPMINSW ymm3, ymm5, ymm12
	VPMAXSW ymm3, ymm3, ymm14
	VPSUBD ymm5, ymm5, ymm3
	VPADDD ymm3, ymm3, ymm15
	VMOVDQA   [rsp + 1056], ymm3
	VPADDD ymm5, ymm5, ymm15
	VMOVDQA   [rsp + 1088], ymm5
	VMOVAPD ymm5, [rcx]
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c24]
	VFMADD231PD ymm5, ymm4, ymm3
	VMOVAPS ymm12,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c25]
	VFMADD231PD ymm5, ymm4, ymm12
	VMOVAPD ymm4, [byte rcx + 32]
	VFMADD231PD ymm4, ymm2, ymm3
	VFMADD231PD ymm4, ymm2, ymm12
	VMOVAPD   [rsp + 1120], ymm4
	VMOVAPD ymm4, [byte rcx + 64]
	VFMADD231PD ymm4, ymm1, ymm3
	VFMADD231PD ymm4, ymm1, ymm12
	VMOVAPD ymm2, [byte rcx + 96]
	VFMADD231PD ymm2, ymm0, ymm3
	VFMADD231PD ymm2, ymm0, ymm12
	VMOVAPD   [rsp + 1152], ymm2
	VMOVAPD ymm2, [dword rcx + 128]
	VFMADD231PD ymm2, ymm6, ymm3
	VFMADD231PD ymm2, ymm6, ymm12
	VMOVAPD ymm1, [dword rcx + 160]
	VFMADD231PD ymm1, ymm7, ymm3
	VFMADD231PD ymm1, ymm7, ymm12
	VMOVAPD   [rsp + 1184], ymm1
	VMOVAPD ymm1, [dword rcx + 192]
	VFMADD231PD ymm1, ymm8, ymm3
	VFMADD231PD ymm1, ymm8, ymm12
	VMOVAPD ymm0, [dword rcx + 224]
	VFMADD231PD ymm0, ymm9, ymm3
	VFMADD231PD ymm0, ymm9, ymm12
	VMOVAPD   [rsp + 1216], ymm0
	VMOVAPD ymm0, [dword rcx + 256]
	VFMADD231PD ymm0, ymm10, ymm3
	VFMADD231PD ymm0, ymm10, ymm12
	VMOVAPD ymm6, [dword rcx + 288]
	VFMADD231PD ymm6, ymm11, ymm3
	VFMADD231PD ymm6, ymm11, ymm12
	VMOVAPD   [rsp + 1248], ymm6
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c26]
	VMOVAPS ymm6,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c27]
	VMOVAPD ymm7, ymm3
	VFMADD132PD ymm7, ymm6, ymm5
	VMOVAPD ymm8, ymm3
	VFMADD132PD ymm8, ymm6,   [rsp + 1120]
	VMOVAPD ymm9, ymm3
	VFMADD132PD ymm9, ymm6, ymm4
	VMOVAPD ymm10, ymm3
	VFMADD132PD ymm10, ymm6,   [rsp + 1152]
	VMOVAPD ymm11, ymm3
	VFMADD132PD ymm11, ymm6, ymm2
	VMOVAPD ymm12, ymm3
	VFMADD132PD ymm12, ymm6,   [rsp + 1184]
	VMOVAPD ymm13, ymm3
	VFMADD132PD ymm13, ymm6, ymm1
	VMOVAPD ymm14, ymm3
	VFMADD132PD ymm14, ymm6,   [rsp + 1216]
	VMOVAPD ymm15, ymm3
	VFMADD132PD ymm15, ymm6, ymm0
	VFMADD132PD ymm3, ymm6,   [rsp + 1248]
	VMOVAPS ymm6,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c28]
	VFMADD132PD ymm7, ymm6, ymm5
	VFMADD132PD ymm8, ymm6,   [rsp + 1120]
	VFMADD132PD ymm9, ymm6, ymm4
	VFMADD132PD ymm10, ymm6,   [rsp + 1152]
	VFMADD132PD ymm11, ymm6, ymm2
	VFMADD132PD ymm12, ymm6,   [rsp + 1184]
	VFMADD132PD ymm13, ymm6, ymm1
	VFMADD132PD ymm14, ymm6,   [rsp + 1216]
	VFMADD132PD ymm15, ymm6, ymm0
	VFMADD132PD ymm3, ymm6,   [rsp + 1248]
	VMOVAPS ymm6,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c29]
	VFMADD132PD ymm7, ymm6, ymm5
	VFMADD132PD ymm8, ymm6,   [rsp + 1120]
	VFMADD132PD ymm9, ymm6, ymm4
	VFMADD132PD ymm10, ymm6,   [rsp + 1152]
	VFMADD132PD ymm11, ymm6, ymm2
	VFMADD132PD ymm12, ymm6,   [rsp + 1184]
	VFMADD132PD ymm13, ymm6, ymm1
	VFMADD132PD ymm14, ymm6,   [rsp + 1216]
	VFMADD132PD ymm15, ymm6, ymm0
	VFMADD132PD ymm3, ymm6,   [rsp + 1248]
	VMOVAPS ymm6,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c30]
	VFMADD132PD ymm7, ymm6, ymm5
	VFMADD132PD ymm8, ymm6,   [rsp + 1120]
	VFMADD132PD ymm9, ymm6, ymm4
	VFMADD132PD ymm10, ymm6,   [rsp + 1152]
	VFMADD132PD ymm11, ymm6, ymm2
	VFMADD132PD ymm12, ymm6,   [rsp + 1184]
	VFMADD132PD ymm13, ymm6, ymm1
	VFMADD132PD ymm14, ymm6,   [rsp + 1216]
	VFMADD132PD ymm15, ymm6, ymm0
	VFMADD132PD ymm3, ymm6,   [rsp + 1248]
	VMOVAPS ymm6,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c31]
	VFMADD132PD ymm7, ymm6, ymm5
	VFMADD132PD ymm8, ymm6,   [rsp + 1120]
	VFMADD132PD ymm9, ymm6, ymm4
	VFMADD132PD ymm10, ymm6,   [rsp + 1152]
	VFMADD132PD ymm11, ymm6, ymm2
	VFMADD132PD ymm12, ymm6,   [rsp + 1184]
	VFMADD132PD ymm13, ymm6, ymm1
	VFMADD132PD ymm14, ymm6,   [rsp + 1216]
	VFMADD132PD ymm15, ymm6, ymm0
	VFMADD132PD ymm3, ymm6,   [rsp + 1248]
	VMOVAPS ymm6,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c32]
	VFMADD132PD ymm7, ymm6, ymm5
	VFMADD132PD ymm8, ymm6,   [rsp + 1120]
	VFMADD132PD ymm9, ymm6, ymm4
	VFMADD132PD ymm10, ymm6,   [rsp + 1152]
	VFMADD132PD ymm11, ymm6, ymm2
	VFMADD132PD ymm12, ymm6,   [rsp + 1184]
	VFMADD132PD ymm13, ymm6, ymm1
	VFMADD132PD ymm14, ymm6,   [rsp + 1216]
	VFMADD132PD ymm15, ymm6, ymm0
	VFMADD132PD ymm3, ymm6,   [rsp + 1248]
	VMOVAPS ymm6,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c33]
	VFMADD132PD ymm7, ymm6, ymm5
	VFMADD132PD ymm8, ymm6,   [rsp + 1120]
	VFMADD132PD ymm9, ymm6, ymm4
	VFMADD132PD ymm10, ymm6,   [rsp + 1152]
	VFMADD132PD ymm11, ymm6, ymm2
	VFMADD132PD ymm12, ymm6,   [rsp + 1184]
	VFMADD132PD ymm13, ymm6, ymm1
	VFMADD132PD ymm14, ymm6,   [rsp + 1216]
	VFMADD132PD ymm15, ymm6, ymm0
	VFMADD132PD ymm3, ymm6,   [rsp + 1248]
	VMOVAPS ymm6,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c34]
	VFMADD132PD ymm7, ymm6, ymm5
	VFMADD132PD ymm8, ymm6,   [rsp + 1120]
	VFMADD132PD ymm9, ymm6, ymm4
	VFMADD132PD ymm10, ymm6,   [rsp + 1152]
	VFMADD132PD ymm11, ymm6, ymm2
	VFMADD132PD ymm12, ymm6,   [rsp + 1184]
	VFMADD132PD ymm13, ymm6, ymm1
	VFMADD132PD ymm14, ymm6,   [rsp + 1216]
	VFMADD132PD ymm15, ymm6, ymm0
	VFMADD132PD ymm3, ymm6,   [rsp + 1248]
	VMOVAPS ymm6,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c35]
	VFMADD132PD ymm7, ymm6, ymm5
	VFMADD132PD ymm8, ymm6,   [rsp + 1120]
	VFMADD132PD ymm9, ymm6, ymm4
	VFMADD132PD ymm10, ymm6,   [rsp + 1152]
	VFMADD132PD ymm11, ymm6, ymm2
	VFMADD132PD ymm12, ymm6,   [rsp + 1184]
	VFMADD132PD ymm13, ymm6, ymm1
	VFMADD132PD ymm14, ymm6,   [rsp + 1216]
	VFMADD132PD ymm15, ymm6, ymm0
	VFMADD132PD ymm3, ymm6,   [rsp + 1248]
	VMULPD ymm7, ymm7, ymm5
	VFMADD132PD ymm7, ymm5, ymm5
	VMOVAPD ymm5,   [rsp + 1120]
	VMULPD ymm8, ymm8, ymm5
	VFMADD132PD ymm8, ymm5, ymm5
	VMULPD ymm9, ymm9, ymm4
	VFMADD132PD ymm9, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 1152]
	VMULPD ymm10, ymm10, ymm4
	VFMADD132PD ymm10, ymm4, ymm4
	VMULPD ymm11, ymm11, ymm2
	VFMADD132PD ymm11, ymm2, ymm2
	VMOVAPD ymm4,   [rsp + 1184]
	VMULPD ymm12, ymm12, ymm4
	VFMADD132PD ymm12, ymm4, ymm4
	VMULPD ymm13, ymm13, ymm1
	VFMADD132PD ymm13, ymm1, ymm1
	VMOVAPD ymm4,   [rsp + 1216]
	VMULPD ymm14, ymm14, ymm4
	VFMADD132PD ymm14, ymm4, ymm4
	VMULPD ymm15, ymm15, ymm0
	VFMADD132PD ymm15, ymm0, ymm0
	VMOVAPD ymm4,   [rsp + 1248]
	VMULPD ymm3, ymm3, ymm4
	VFMADD132PD ymm3, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 480]
	VFMADD132PD ymm7, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 544]
	VFMADD132PD ymm8, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 608]
	VFMADD132PD ymm9, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 672]
	VFMADD132PD ymm10, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 736]
	VFMADD132PD ymm11, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 800]
	VFMADD132PD ymm12, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 864]
	VFMADD132PD ymm13, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 928]
	VFMADD132PD ymm14, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 992]
	VFMADD132PD ymm15, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 1056]
	VFMADD132PD ymm3, ymm4, ymm4
	VMULPD ymm7, ymm7,   [rsp + 512]
	VMULPD ymm8, ymm8,   [rsp + 576]
	VMULPD ymm9, ymm9,   [rsp + 640]
	VMULPD ymm10, ymm10,   [rsp + 704]
	VMULPD ymm11, ymm11,   [rsp + 768]
	VMULPD ymm12, ymm12,   [rsp + 832]
	VMULPD ymm13, ymm13,   [rsp + 896]
	VMULPD ymm14, ymm14,   [rsp + 960]
	VMULPD ymm15, ymm15,   [rsp + 1024]
	VMULPD ymm3, ymm3,   [rsp + 1088]
	VMOVAPD ymm4, [rcx]
	VCMPLTPD ymm5, ymm4,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm7, ymm5, ymm7
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm7, ymm7, ymm5, ymm4
	VMOVUPD [rdx], ymm7
	VMOVAPD ymm4, [byte rcx + 32]
	VCMPLTPD ymm5, ymm4,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm8, ymm5, ymm8
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm8, ymm8, ymm5, ymm4
	VMOVUPD [byte rdx + 32], ymm8
	VMOVAPD ymm4, [byte rcx + 64]
	VCMPLTPD ymm5, ymm4,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm9, ymm5, ymm9
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm9, ymm9, ymm5, ymm4
	VMOVUPD [byte rdx + 64], ymm9
	VMOVAPD ymm4, [byte rcx + 96]
	VCMPLTPD ymm5, ymm4,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm10, ymm5, ymm10
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm10, ymm10, ymm5, ymm4
	VMOVUPD [byte rdx + 96], ymm10
	VMOVAPD ymm4, [dword rcx + 128]
	VCMPLTPD ymm5, ymm4,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm11, ymm5, ymm11
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm11, ymm11, ymm5, ymm4
	VMOVUPD [dword rdx + 128], ymm11
	VMOVAPD ymm4, [dword rcx + 160]
	VCMPLTPD ymm5, ymm4,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm12, ymm5, ymm12
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm12, ymm12, ymm5, ymm4
	VMOVUPD [dword rdx + 160], ymm12
	VMOVAPD ymm4, [dword rcx + 192]
	VCMPLTPD ymm5, ymm4,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm13, ymm5, ymm13
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm13, ymm13, ymm5, ymm4
	VMOVUPD [dword rdx + 192], ymm13
	VMOVAPD ymm4, [dword rcx + 224]
	VCMPLTPD ymm5, ymm4,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm14, ymm5, ymm14
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm14, ymm14, ymm5, ymm4
	VMOVUPD [dword rdx + 224], ymm14
	VMOVAPD ymm4, [dword rcx + 256]
	VCMPLTPD ymm5, ymm4,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm15, ymm5, ymm15
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm15, ymm15, ymm5, ymm4
	VMOVUPD [dword rdx + 256], ymm15
	VMOVAPD ymm4, [dword rcx + 288]
	VCMPLTPD ymm5, ymm4,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm3, ymm5, ymm3
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm3, ymm3, ymm5, ymm4
	VMOVUPD [dword rdx + 288], ymm3
	JMP .process_batch_increment
