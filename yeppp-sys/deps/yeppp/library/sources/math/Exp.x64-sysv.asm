;                       Yeppp! library implementation
;                   This file is auto-generated by Peach-Py,
;        Portable Efficient Assembly Code-generator in Higher-level Python,
;                  part of the Yeppp! library infrastructure
; This file is part of Yeppp! library and licensed under the New BSD license.
; See LICENSE.txt for the full text of the license.

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.Bobcat progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Exp_V64f_V64f_Bobcat_constants:
	.c0: DQ 0x4338000000000000
	.c1: DQ 0x3FF71547652B82FE
	.c2: DQ 0xBFE62E42FEFA3800
	.c3: DQ 0xBD2EF35793C76730
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c5: DQ 0xC020000000000000, 0xC020000000000000
	.c6: DQ 0x3E5AE9043CA87A40
	.c7: DQ 0x3E928A284098D813
	.c8: DQ 0x3EC71DE71651CE7A
	.c9: DQ 0x3EFA019A6AC02A7D
	.c10: DQ 0x3F2A01A017EEB164
	.c11: DQ 0x3F56C16C17F2BF99
	.c12: DQ 0x3F811111111173CA
	.c13: DQ 0x3FA5555555552115
	.c14: DQ 0x3FC5555555555540
	.c15: DQ 0x3FE0000000000005
	.c16: DQ 0x40862E42FEFA39EF
	.c17: DQ 0x7FF0000000000000
	.c18: DQ 0xC0874910D52D3051
	ALIGN 16
	.c19: DQ 0x3FF71547652B82FE, 0x3FF71547652B82FE
	.c20: DQ 0x4338000000000000, 0x4338000000000000
	.c21: DQ 0xBFE62E42FEFA3800, 0xBFE62E42FEFA3800
	.c22: DQ 0xBD2EF35793C76730, 0xBD2EF35793C76730
	.c23: DQ 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40
	.c24: DQ 0x3E928A284098D813, 0x3E928A284098D813
	.c25: DQ 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A
	.c26: DQ 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D
	.c27: DQ 0x3F2A01A017EEB164, 0x3F2A01A017EEB164
	.c28: DQ 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99
	.c29: DQ 0x3F811111111173CA, 0x3F811111111173CA
	.c30: DQ 0x3FA5555555552115, 0x3FA5555555552115
	.c31: DQ 0x3FC5555555555540, 0x3FC5555555555540
	.c32: DQ 0x3FE0000000000005, 0x3FE0000000000005
	.c33: DQ 0x40862E42FEFA39EF, 0x40862E42FEFA39EF
	.c34: DQ 0x7FF0000000000000, 0x7FF0000000000000
	.c35: DQ 0xC0874910D52D3051, 0xC0874910D52D3051


%ifidn __OUTPUT_FORMAT__, elf64
section .text.Bobcat progbits alloc exec nowrite align=16
global _yepMath_Exp_V64f_V64f_Bobcat
_yepMath_Exp_V64f_V64f_Bobcat:
%else
section .text
global __yepMath_Exp_V64f_V64f_Bobcat
__yepMath_Exp_V64f_V64f_Bobcat:
%endif
	.ENTRY:
	SUB rsp, 72
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 15
	JZ .source_16b_aligned
	.source_16b_misaligned:
	MOVSD xmm8, [rdi]
	MOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c0]
	MOVSD xmm10, xmm8
	MULSD xmm10, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c1]
	ADDSD xmm10, xmm9
	MOVDQA xmm11, xmm10
	PSLLQ xmm11, 52
	SUBSD xmm10, xmm9
	MOVSD xmm9, xmm10
	MULSD xmm9, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c2]
	ADDSD xmm9, xmm8
	MULSD xmm10, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c3]
	ADDSD xmm9, xmm10
	MOVDQA xmm10, xmm11
	PMINSW xmm10,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c4]
	PMAXSW xmm10,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c5]
	PSUBD xmm11, xmm10
	MOVDQA xmm12,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c4]
	PADDD xmm10, xmm12
	PADDD xmm11, xmm12
	MOVSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c6]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c7]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c8]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c9]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c10]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c11]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c12]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c13]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c14]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c15]
	MULSD xmm12, xmm9
	MULSD xmm12, xmm9
	ADDSD xmm12, xmm9
	MULSD xmm12, xmm10
	ADDSD xmm12, xmm10
	MULSD xmm12, xmm11
	MOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c16]
	CMPLESD xmm9, xmm8
	MOVSD xmm10, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c17]
	ANDPS xmm10, xmm9
	ANDNPS xmm9, xmm12
	ORPS xmm9, xmm10
	CMPLTSD xmm8, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c18]
	ANDNPD xmm8, xmm9
	MOVSD [rsi], xmm8
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 15
	JNZ .source_16b_misaligned
	.source_16b_aligned:
	SUB rdx, 8
	JB .process_restore
	align 32
	.process_batch_fast:
	MOVAPD xmm8, [rdi]
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c19]
	MULPD xmm8, xmm9
	MOVAPD xmm10,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c20]
	ADDPD xmm8, xmm10
	MOV rax, 13872817421961305113
	MOVAPD xmm11, [byte rdi + 16]
	MULPD xmm11, xmm9
	ADDPD xmm11, xmm10
	MOV r10, 4649451482093607590
	MOVAPD xmm12, [byte rdi + 32]
	MULPD xmm12, xmm9
	ADDPD xmm12, xmm10
	MOV r11, [rdi]
	MOVAPD xmm13, [byte rdi + 48]
	MULPD xmm13, xmm9
	ADDPD xmm13, xmm10
	CMP r11, rax
	MOVDQA xmm9,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c4]
	MOVDQA xmm14, xmm8
	PSLLQ xmm14, 52
	PADDD xmm14, xmm9
	SUBPD xmm8, xmm10
	CMOVA r11, r10
	MOVDQA xmm15, xmm11
	PSLLQ xmm15, 52
	PADDD xmm15, xmm9
	SUBPD xmm11, xmm10
	CMP r11, r10
	MOVDQA xmm7, xmm12
	PSLLQ xmm7, 52
	PADDD xmm7, xmm9
	SUBPD xmm12, xmm10
	JGE .process_batch_full
	MOVDQA xmm6, xmm13
	PSLLQ xmm6, 52
	PADDD xmm6, xmm9
	SUBPD xmm13, xmm10
	MOV r11, [byte rdi + 8]
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c21]
	MOVAPS xmm10, xmm8
	MULPD xmm10, xmm9
	ADDPD xmm10, [rdi]
	MOVAPS xmm5, xmm11
	MULPD xmm5, xmm9
	ADDPD xmm5, [byte rdi + 16]
	MOVAPS xmm4, xmm12
	MULPD xmm4, xmm9
	ADDPD xmm4, [byte rdi + 32]
	MOVAPS xmm3, xmm13
	MULPD xmm3, xmm9
	ADDPD xmm3, [byte rdi + 48]
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c22]
	MULPD xmm8, xmm9
	ADDPD xmm10, xmm8
	CMP r11, rax
	MULPD xmm11, xmm9
	ADDPD xmm5, xmm11
	CMOVA r11, r10
	MULPD xmm12, xmm9
	ADDPD xmm4, xmm12
	CMP r11, r10
	MULPD xmm13, xmm9
	ADDPD xmm3, xmm13
	JGE .process_batch_full
	MOVAPS xmm8,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c23]
	MOVAPS xmm9, xmm8
	MULPD xmm9, xmm10
	MOVAPD xmm11,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c24]
	ADDPD xmm9, xmm11
	MOVAPS xmm12, xmm8
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm11
	MOVAPS xmm13, xmm8
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm11
	MOV r11, [byte rdi + 16]
	MULPD xmm8, xmm3
	ADDPD xmm8, xmm11
	MOVAPD xmm11,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c25]
	MULPD xmm9, xmm10
	ADDPD xmm9, xmm11
	CMP r11, rax
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm11
	CMOVA r11, r10
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm11
	CMP r11, r10
	MULPD xmm8, xmm3
	ADDPD xmm8, xmm11
	JGE .process_batch_full
	MOVAPD xmm11,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c26]
	MULPD xmm9, xmm10
	ADDPD xmm9, xmm11
	MOV r11, [byte rdi + 24]
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm11
	CMP r11, rax
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm11
	CMOVA r11, r10
	MULPD xmm8, xmm3
	ADDPD xmm8, xmm11
	CMP r11, r10
	MOVAPD xmm11,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c27]
	MULPD xmm9, xmm10
	ADDPD xmm9, xmm11
	JGE .process_batch_full
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm11
	MOV r11, [byte rdi + 32]
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm11
	CMP r11, rax
	MULPD xmm8, xmm3
	ADDPD xmm8, xmm11
	CMOVA r11, r10
	MOVAPD xmm11,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c28]
	MULPD xmm9, xmm10
	ADDPD xmm9, xmm11
	CMP r11, r10
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm11
	JGE .process_batch_full
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm11
	MOV r11, [byte rdi + 40]
	MULPD xmm8, xmm3
	ADDPD xmm8, xmm11
	CMP r11, rax
	MOVAPD xmm11,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c29]
	MULPD xmm9, xmm10
	ADDPD xmm9, xmm11
	CMOVA r11, r10
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm11
	CMP r11, r10
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm11
	JGE .process_batch_full
	MULPD xmm8, xmm3
	ADDPD xmm8, xmm11
	MOV r11, [byte rdi + 48]
	MOVAPD xmm11,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c30]
	MULPD xmm9, xmm10
	ADDPD xmm9, xmm11
	CMP r11, rax
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm11
	CMOVA r11, r10
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm11
	CMP r11, r10
	MULPD xmm8, xmm3
	ADDPD xmm8, xmm11
	JGE .process_batch_full
	MOVAPD xmm11,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c31]
	MULPD xmm9, xmm10
	ADDPD xmm9, xmm11
	MOV r11, [byte rdi + 56]
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm11
	CMP r11, rax
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm11
	CMOVA r11, r10
	MULPD xmm8, xmm3
	ADDPD xmm8, xmm11
	CMP r11, r10
	MOVAPD xmm11,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c32]
	MULPD xmm9, xmm10
	ADDPD xmm9, xmm11
	JGE .process_batch_full
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm11
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm11
	MULPD xmm8, xmm3
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm10
	MULPD xmm12, xmm5
	MULPD xmm13, xmm4
	MULPD xmm8, xmm3
	MULPD xmm9, xmm10
	ADDPD xmm9, xmm10
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm5
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm4
	MULPD xmm8, xmm3
	ADDPD xmm8, xmm3
	MULPD xmm9, xmm14
	ADDPD xmm9, xmm14
	MOVUPS [rsi], xmm9
	MULPD xmm12, xmm15
	ADDPD xmm12, xmm15
	MOVUPS [byte rsi + 16], xmm12
	MULPD xmm13, xmm7
	ADDPD xmm13, xmm7
	MOVUPS [byte rsi + 32], xmm13
	MULPD xmm8, xmm6
	ADDPD xmm8, xmm6
	MOVUPS [byte rsi + 48], xmm8
	.process_batch_increment:
	ADD rdi, 64
	ADD rsi, 64
	SUB rdx, 8
	JAE .process_batch_fast
	.process_restore:
	ADD rdx, 8
	JZ .return_ok
	.process_single:
	MOVSD xmm8, [rdi]
	MOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c0]
	MOVSD xmm10, xmm8
	MULSD xmm10, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c1]
	ADDSD xmm10, xmm9
	MOVDQA xmm11, xmm10
	PSLLQ xmm11, 52
	SUBSD xmm10, xmm9
	MOVSD xmm9, xmm10
	MULSD xmm9, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c2]
	ADDSD xmm9, xmm8
	MULSD xmm10, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c3]
	ADDSD xmm9, xmm10
	MOVDQA xmm10, xmm11
	PMINSW xmm10,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c4]
	PMAXSW xmm10,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c5]
	PSUBD xmm11, xmm10
	MOVDQA xmm12,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c4]
	PADDD xmm10, xmm12
	PADDD xmm11, xmm12
	MOVSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c6]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c7]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c8]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c9]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c10]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c11]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c12]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c13]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c14]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c15]
	MULSD xmm12, xmm9
	MULSD xmm12, xmm9
	ADDSD xmm12, xmm9
	MULSD xmm12, xmm10
	ADDSD xmm12, xmm10
	MULSD xmm12, xmm11
	MOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c16]
	CMPLESD xmm9, xmm8
	MOVSD xmm10, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c17]
	ANDPS xmm10, xmm9
	ANDNPS xmm9, xmm12
	ORPS xmm9, xmm10
	CMPLTSD xmm8, [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c18]
	ANDNPD xmm8, xmm9
	MOVSD [rsi], xmm8
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	ADD rsp, 72
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	MOVAPD xmm8, [rdi]
	MOVAPD xmm9, xmm8
	MOVAPD xmm10,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c19]
	MULPD xmm9, xmm10
	MOVAPD xmm11,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c20]
	ADDPD xmm9, xmm11
	MOVAPD xmm12, [byte rdi + 16]
	MOVAPD xmm13, xmm12
	MULPD xmm13, xmm10
	ADDPD xmm13, xmm11
	MOVAPD xmm14, [byte rdi + 32]
	MOVAPD xmm15, xmm14
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm11
	MOVAPD xmm7, [byte rdi + 48]
	MOVAPD xmm6, xmm7
	MULPD xmm6, xmm10
	ADDPD xmm6, xmm11
	MOVDQA xmm10, xmm9
	PSLLQ xmm10, 52
	SUBPD xmm9, xmm11
	MOVDQA xmm5, xmm13
	PSLLQ xmm5, 52
	SUBPD xmm13, xmm11
	MOVDQA xmm4, xmm15
	PSLLQ xmm4, 52
	SUBPD xmm15, xmm11
	MOVDQA xmm3, xmm6
	PSLLQ xmm3, 52
	SUBPD xmm6, xmm11
	MOVAPS xmm11, xmm9
	MOVAPD xmm2,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c21]
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm8
	MOVAPD xmm8,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c22]
	MULPD xmm9, xmm8
	ADDPD xmm11, xmm9
	MOVAPS xmm9, xmm13
	MULPD xmm9, xmm2
	ADDPD xmm9, xmm12
	MULPD xmm13, xmm8
	ADDPD xmm9, xmm13
	MOVAPS xmm12, xmm15
	MULPD xmm12, xmm2
	ADDPD xmm12, xmm14
	MULPD xmm15, xmm8
	ADDPD xmm12, xmm15
	MOVAPS xmm13, xmm6
	MULPD xmm13, xmm2
	ADDPD xmm13, xmm7
	MULPD xmm6, xmm8
	ADDPD xmm13, xmm6
	MOVDQA xmm8,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c4]
	MOVAPD xmm14, xmm10
	PMINSW xmm14, xmm8
	MOVDQA xmm15,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c5]
	PMAXSW xmm14, xmm15
	PSUBD xmm10, xmm14
	MOVDQA xmm7,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c4]
	PADDD xmm14, xmm7
	MOVDQA   [rsp], xmm14
	PADDD xmm10, xmm7
	MOVAPD xmm14, xmm5
	PMINSW xmm14, xmm8
	PMAXSW xmm14, xmm15
	PSUBD xmm5, xmm14
	PADDD xmm14, xmm7
	MOVDQA   [rsp + 16], xmm14
	PADDD xmm5, xmm7
	MOVAPD xmm14, xmm4
	PMINSW xmm14, xmm8
	PMAXSW xmm14, xmm15
	PSUBD xmm4, xmm14
	PADDD xmm14, xmm7
	MOVDQA   [rsp + 32], xmm14
	PADDD xmm4, xmm7
	MOVAPD xmm14, xmm3
	PMINSW xmm14, xmm8
	PMAXSW xmm14, xmm15
	PSUBD xmm3, xmm14
	PADDD xmm14, xmm7
	MOVDQA   [rsp + 48], xmm14
	PADDD xmm3, xmm7
	MOVAPS xmm8,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c23]
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c24]
	MOVAPS xmm15, xmm8
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm14
	MOVAPS xmm7, xmm8
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm14
	MOVAPS xmm6, xmm8
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm14
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c25]
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm14
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm14
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm14
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c26]
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm14
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm14
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm14
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c27]
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm14
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm14
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm14
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c28]
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm14
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm14
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm14
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c29]
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm14
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm14
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm14
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c30]
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm14
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm14
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm14
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c31]
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm14
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm14
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm14
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm14
	MOVAPD xmm14,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c32]
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm14
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm14
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm14
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm14
	MULPD xmm15, xmm11
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm11
	MULPD xmm7, xmm9
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm9
	MULPD xmm6, xmm12
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm12
	MULPD xmm8, xmm13
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm13
	MOVAPS xmm9,   [rsp]
	MULPD xmm15, xmm9
	ADDPD xmm15, xmm9
	MOVAPS xmm9,   [rsp + 16]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm9
	MOVAPS xmm9,   [rsp + 32]
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm9
	MOVAPS xmm9,   [rsp + 48]
	MULPD xmm8, xmm9
	ADDPD xmm8, xmm9
	MULPD xmm15, xmm10
	MULPD xmm7, xmm5
	MULPD xmm6, xmm4
	MULPD xmm8, xmm3
	MOVAPS xmm9, [rdi]
	MOVAPD xmm10,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c33]
	MOVAPS xmm11, xmm10
	CMPLEPD xmm11, xmm9
	MOVAPS xmm12,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c34]
	ANDPS xmm12, xmm11
	ANDNPS xmm11, xmm15
	ORPS xmm11, xmm12
	MOVAPD xmm12,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c35]
	CMPLTPD xmm9, xmm12
	ANDNPD xmm9, xmm11
	MOVUPS [rsi], xmm9
	MOVAPS xmm9, [byte rdi + 16]
	MOVAPS xmm11, xmm10
	CMPLEPD xmm11, xmm9
	MOVAPS xmm13,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c34]
	ANDPS xmm13, xmm11
	ANDNPS xmm11, xmm7
	ORPS xmm11, xmm13
	CMPLTPD xmm9, xmm12
	ANDNPD xmm9, xmm11
	MOVUPS [byte rsi + 16], xmm9
	MOVAPS xmm9, [byte rdi + 32]
	MOVAPS xmm11, xmm10
	CMPLEPD xmm11, xmm9
	MOVAPS xmm13,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c34]
	ANDPS xmm13, xmm11
	ANDNPS xmm11, xmm6
	ORPS xmm11, xmm13
	CMPLTPD xmm9, xmm12
	ANDNPD xmm9, xmm11
	MOVUPS [byte rsi + 32], xmm9
	MOVAPS xmm9, [byte rdi + 48]
	CMPLEPD xmm10, xmm9
	MOVAPS xmm11,  [rel _yepMath_Exp_V64f_V64f_Bobcat_constants.c34]
	ANDPS xmm11, xmm10
	ANDNPS xmm10, xmm8
	ORPS xmm10, xmm11
	CMPLTPD xmm9, xmm12
	ANDNPD xmm9, xmm10
	MOVUPS [byte rsi + 48], xmm9
	JMP .process_batch_increment

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.K10 progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Exp_V64f_V64f_K10_constants:
	.c0: DQ 0x4338000000000000
	.c1: DQ 0x3FF71547652B82FE
	.c2: DQ 0xBFE62E42FEFA3800
	.c3: DQ 0xBD2EF35793C76730
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c5: DQ 0xC020000000000000, 0xC020000000000000
	.c6: DQ 0x3E5AE9043CA87A40
	.c7: DQ 0x3E928A284098D813
	.c8: DQ 0x3EC71DE71651CE7A
	.c9: DQ 0x3EFA019A6AC02A7D
	.c10: DQ 0x3F2A01A017EEB164
	.c11: DQ 0x3F56C16C17F2BF99
	.c12: DQ 0x3F811111111173CA
	.c13: DQ 0x3FA5555555552115
	.c14: DQ 0x3FC5555555555540
	.c15: DQ 0x3FE0000000000005
	.c16: DQ 0x40862E42FEFA39EF
	.c17: DQ 0x7FF0000000000000
	.c18: DQ 0xC0874910D52D3051
	ALIGN 16
	.c19: DQ 0x3FF71547652B82FE, 0x3FF71547652B82FE
	.c20: DQ 0x4338000000000000, 0x4338000000000000
	.c21: DQ 0xBFE62E42FEFA3800, 0xBFE62E42FEFA3800
	.c22: DQ 0xBD2EF35793C76730, 0xBD2EF35793C76730
	.c23: DQ 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40
	.c24: DQ 0x3E928A284098D813, 0x3E928A284098D813
	.c25: DQ 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A
	.c26: DQ 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D
	.c27: DQ 0x3F2A01A017EEB164, 0x3F2A01A017EEB164
	.c28: DQ 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99
	.c29: DQ 0x3F811111111173CA, 0x3F811111111173CA
	.c30: DQ 0x3FA5555555552115, 0x3FA5555555552115
	.c31: DQ 0x3FC5555555555540, 0x3FC5555555555540
	.c32: DQ 0x3FE0000000000005, 0x3FE0000000000005
	.c33: DQ 0x40862E42FEFA39EF, 0x40862E42FEFA39EF
	.c34: DQ 0x7FF0000000000000, 0x7FF0000000000000
	.c35: DQ 0xC0874910D52D3051, 0xC0874910D52D3051


%ifidn __OUTPUT_FORMAT__, elf64
section .text.K10 progbits alloc exec nowrite align=16
global _yepMath_Exp_V64f_V64f_K10
_yepMath_Exp_V64f_V64f_K10:
%else
section .text
global __yepMath_Exp_V64f_V64f_K10
__yepMath_Exp_V64f_V64f_K10:
%endif
	.ENTRY:
	SUB rsp, 456
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 15
	JZ .source_16b_aligned
	.source_16b_misaligned:
	MOVSD xmm8, [rdi]
	MOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_K10_constants.c0]
	MOVAPS xmm10, xmm8
	MULSD xmm10, [rel _yepMath_Exp_V64f_V64f_K10_constants.c1]
	ADDSD xmm10, xmm9
	MOVDQA xmm11, xmm10
	PSLLQ xmm11, 52
	SUBSD xmm10, xmm9
	MOVAPS xmm9, xmm10
	MULSD xmm9, [rel _yepMath_Exp_V64f_V64f_K10_constants.c2]
	ADDSD xmm9, xmm8
	MULSD xmm10, [rel _yepMath_Exp_V64f_V64f_K10_constants.c3]
	ADDSD xmm9, xmm10
	MOVDQA xmm10, xmm11
	PMINSW xmm10,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c4]
	PMAXSW xmm10,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c5]
	PSUBD xmm11, xmm10
	MOVDQA xmm12,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c4]
	PADDD xmm10, xmm12
	PADDD xmm11, xmm12
	MOVSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c6]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c7]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c8]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c9]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c10]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c11]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c12]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c13]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c14]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c15]
	MULSD xmm12, xmm9
	MULSD xmm12, xmm9
	ADDSD xmm12, xmm9
	MULSD xmm12, xmm10
	ADDSD xmm12, xmm10
	MULSD xmm12, xmm11
	MOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_K10_constants.c16]
	CMPLESD xmm9, xmm8
	MOVSD xmm10, [rel _yepMath_Exp_V64f_V64f_K10_constants.c17]
	ANDPS xmm10, xmm9
	ANDNPS xmm9, xmm12
	ORPS xmm9, xmm10
	CMPLTSD xmm8, [rel _yepMath_Exp_V64f_V64f_K10_constants.c18]
	ANDNPD xmm8, xmm9
	MOVSD [rsi], xmm8
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 15
	JNZ .source_16b_misaligned
	.source_16b_aligned:
	SUB rdx, 16
	JB .process_restore
	align 32
	.process_batch_fast:
	MOVAPD xmm8, [rdi]
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c19]
	MULPD xmm8, xmm9
	MOVAPD xmm10,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c20]
	ADDPD xmm8, xmm10
	MOV rax, 13872817421961305113
	MOV r10, 4649451482093607590
	MOVAPD xmm11, [byte rdi + 16]
	MULPD xmm11, xmm9
	ADDPD xmm11, xmm10
	MOV r11, [rdi]
	CMP r11, rax
	MOVAPD xmm12, [byte rdi + 32]
	MULPD xmm12, xmm9
	ADDPD xmm12, xmm10
	CMOVA r11, r10
	CMP r11, r10
	MOVAPD xmm13, [byte rdi + 48]
	MULPD xmm13, xmm9
	ADDPD xmm13, xmm10
	JGE .process_batch_full
	MOV r11, [byte rdi + 8]
	MOVAPD xmm14, [byte rdi + 64]
	MULPD xmm14, xmm9
	ADDPD xmm14, xmm10
	CMP r11, rax
	CMOVA r11, r10
	MOVAPD xmm15, [byte rdi + 80]
	MULPD xmm15, xmm9
	ADDPD xmm15, xmm10
	CMP r11, r10
	JGE .process_batch_full
	MOVAPD xmm7, [byte rdi + 96]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm10
	MOV r11, [byte rdi + 16]
	CMP r11, rax
	MOVAPD xmm6, [byte rdi + 112]
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm10
	CMOVA r11, r10
	CMP r11, r10
	MOVDQA xmm9,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c4]
	MOVDQA xmm5, xmm8
	PSLLQ xmm5, 52
	PADDD xmm5, xmm9
	MOVDQA   [rsp], xmm5
	SUBPD xmm8, xmm10
	JGE .process_batch_full
	MOVDQA xmm5, xmm11
	PSLLQ xmm5, 52
	PADDD xmm5, xmm9
	MOVDQA   [rsp + 16], xmm5
	SUBPD xmm11, xmm10
	MOV r11, [byte rdi + 24]
	MOVDQA xmm5, xmm12
	PSLLQ xmm5, 52
	PADDD xmm5, xmm9
	MOVDQA   [rsp + 32], xmm5
	SUBPD xmm12, xmm10
	CMP r11, rax
	MOVDQA xmm5, xmm13
	PSLLQ xmm5, 52
	PADDD xmm5, xmm9
	MOVDQA   [rsp + 48], xmm5
	SUBPD xmm13, xmm10
	CMOVA r11, r10
	MOVDQA xmm5, xmm14
	PSLLQ xmm5, 52
	PADDD xmm5, xmm9
	MOVDQA   [rsp + 64], xmm5
	SUBPD xmm14, xmm10
	CMP r11, r10
	MOVDQA xmm5, xmm15
	PSLLQ xmm5, 52
	PADDD xmm5, xmm9
	MOVDQA   [rsp + 80], xmm5
	SUBPD xmm15, xmm10
	JGE .process_batch_full
	MOVDQA xmm5, xmm7
	PSLLQ xmm5, 52
	PADDD xmm5, xmm9
	MOVDQA   [rsp + 96], xmm5
	SUBPD xmm7, xmm10
	MOV r11, [byte rdi + 32]
	MOVDQA xmm5, xmm6
	PSLLQ xmm5, 52
	PADDD xmm5, xmm9
	MOVDQA   [rsp + 112], xmm5
	SUBPD xmm6, xmm10
	CMP r11, rax
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	MOVAPS xmm10, xmm8
	MULPD xmm10, xmm9
	ADDPD xmm10, [rdi]
	MOVAPS xmm5, xmm11
	MULPD xmm5, xmm9
	ADDPD xmm5, [byte rdi + 16]
	MOVAPS xmm4, xmm12
	MULPD xmm4, xmm9
	ADDPD xmm4, [byte rdi + 32]
	MOVAPS xmm3, xmm13
	MULPD xmm3, xmm9
	ADDPD xmm3, [byte rdi + 48]
	MOVAPS xmm2, xmm14
	MULPD xmm2, xmm9
	ADDPD xmm2, [byte rdi + 64]
	MOVAPS xmm1, xmm15
	MULPD xmm1, xmm9
	ADDPD xmm1, [byte rdi + 80]
	MOVAPS xmm0, xmm7
	MULPD xmm0, xmm9
	ADDPD xmm0, [byte rdi + 96]
	MOVAPS   [rsp + 128], xmm0
	MOVAPS xmm0, xmm6
	MULPD xmm0, xmm9
	ADDPD xmm0, [byte rdi + 112]
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	MULPD xmm8, xmm9
	ADDPD xmm10, xmm8
	CMOVA r11, r10
	MULPD xmm11, xmm9
	ADDPD xmm5, xmm11
	CMP r11, r10
	MULPD xmm12, xmm9
	ADDPD xmm4, xmm12
	JGE .process_batch_full
	MULPD xmm13, xmm9
	ADDPD xmm3, xmm13
	MOV r11, [byte rdi + 40]
	MOVAPS xmm8,   [rsp + 128]
	MULPD xmm14, xmm9
	ADDPD xmm2, xmm14
	CMP r11, rax
	MULPD xmm15, xmm9
	ADDPD xmm1, xmm15
	CMOVA r11, r10
	MULPD xmm7, xmm9
	ADDPD xmm8, xmm7
	MOVAPS   [rsp + 128], xmm8
	MULPD xmm6, xmm9
	ADDPD xmm0, xmm6
	MOVAPS   [rsp + 144], xmm0
	MOVAPS xmm8,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c23]
	MOVAPS xmm9,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c24]
	CMP r11, r10
	MOVAPS xmm11, xmm8
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	MOVAPS xmm12, xmm8
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	MOVAPS xmm13, xmm8
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	MOVAPS xmm14, xmm8
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	MOVAPS xmm15, xmm8
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	MOVAPS xmm7, xmm8
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	MOVAPS xmm6, xmm8
	MULPD xmm6,   [rsp + 128]
	ADDPD xmm6, xmm9
	JGE .process_batch_full
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c25]
	MOV r11, [byte rdi + 48]
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	CMP r11, rax
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	CMOVA r11, r10
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	CMP r11, r10
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	JGE .process_batch_full
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	MOV r11, [byte rdi + 56]
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	MOVAPS xmm0,   [rsp + 128]
	MULPD xmm6, xmm0
	ADDPD xmm6, xmm9
	MOVAPS xmm0,   [rsp + 144]
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c26]
	CMP r11, rax
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	CMOVA r11, r10
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	CMP r11, r10
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	JGE .process_batch_full
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	MOV r11, [byte rdi + 64]
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	CMP r11, rax
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	MOVAPS xmm0,   [rsp + 128]
	MULPD xmm6, xmm0
	ADDPD xmm6, xmm9
	MOVAPS xmm0,   [rsp + 144]
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c27]
	CMOVA r11, r10
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	CMP r11, r10
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	JGE .process_batch_full
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	MOV r11, [byte rdi + 72]
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	CMP r11, rax
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	CMOVA r11, r10
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	MOVAPS xmm0,   [rsp + 128]
	MULPD xmm6, xmm0
	ADDPD xmm6, xmm9
	MOVAPS xmm0,   [rsp + 144]
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c28]
	CMP r11, r10
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	JGE .process_batch_full
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	MOV r11, [byte rdi + 80]
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	CMP r11, rax
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	CMOVA r11, r10
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	CMP r11, r10
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	MOVAPS xmm0,   [rsp + 128]
	MULPD xmm6, xmm0
	ADDPD xmm6, xmm9
	MOVAPS xmm0,   [rsp + 144]
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c29]
	JGE .process_batch_full
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	MOV r11, [byte rdi + 88]
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	CMP r11, rax
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	CMOVA r11, r10
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	CMP r11, r10
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	JGE .process_batch_full
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	MOVAPS xmm0,   [rsp + 128]
	MULPD xmm6, xmm0
	ADDPD xmm6, xmm9
	MOVAPS xmm0,   [rsp + 144]
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c30]
	MOV r11, [byte rdi + 96]
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	CMP r11, rax
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	CMOVA r11, r10
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	CMP r11, r10
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	JGE .process_batch_full
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	MOV r11, [byte rdi + 104]
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	MOVAPS xmm0,   [rsp + 128]
	MULPD xmm6, xmm0
	ADDPD xmm6, xmm9
	MOVAPS xmm0,   [rsp + 144]
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c31]
	CMP r11, rax
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	CMOVA r11, r10
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	CMP r11, r10
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	JGE .process_batch_full
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	MOV r11, [byte rdi + 112]
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	CMP r11, rax
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	MOVAPS xmm0,   [rsp + 128]
	MULPD xmm6, xmm0
	ADDPD xmm6, xmm9
	MOVAPS xmm0,   [rsp + 144]
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c32]
	CMOVA r11, r10
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	CMP r11, r10
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	JGE .process_batch_full
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	MOV r11, [byte rdi + 120]
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	CMP r11, rax
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	CMOVA r11, r10
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	MOVAPS xmm0,   [rsp + 128]
	MULPD xmm6, xmm0
	ADDPD xmm6, xmm9
	MOVAPS xmm0,   [rsp + 144]
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm9
	MULPD xmm11, xmm10
	CMP r11, r10
	MULPD xmm12, xmm5
	JGE .process_batch_full
	MULPD xmm13, xmm4
	MULPD xmm14, xmm3
	MULPD xmm15, xmm2
	MULPD xmm7, xmm1
	MOVAPS xmm9,   [rsp + 128]
	MULPD xmm6, xmm9
	MOVAPS xmm0,   [rsp + 144]
	MULPD xmm8, xmm0
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm5
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm4
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm3
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm2
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm1
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm9
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm0
	MOVAPS xmm9,   [rsp]
	MULPD xmm11, xmm9
	ADDPD xmm11, xmm9
	MOVUPS [rsi], xmm11
	MOVAPS xmm9,   [rsp + 16]
	MULPD xmm12, xmm9
	ADDPD xmm12, xmm9
	MOVUPS [byte rsi + 16], xmm12
	MOVAPS xmm9,   [rsp + 32]
	MULPD xmm13, xmm9
	ADDPD xmm13, xmm9
	MOVUPS [byte rsi + 32], xmm13
	MOVAPS xmm9,   [rsp + 48]
	MULPD xmm14, xmm9
	ADDPD xmm14, xmm9
	MOVUPS [byte rsi + 48], xmm14
	MOVAPS xmm9,   [rsp + 64]
	MULPD xmm15, xmm9
	ADDPD xmm15, xmm9
	MOVUPS [byte rsi + 64], xmm15
	MOVAPS xmm9,   [rsp + 80]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm9
	MOVUPS [byte rsi + 80], xmm7
	MOVAPS xmm9,   [rsp + 96]
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm9
	MOVUPS [byte rsi + 96], xmm6
	MOVAPS xmm9,   [rsp + 112]
	MULPD xmm8, xmm9
	ADDPD xmm8, xmm9
	MOVUPS [byte rsi + 112], xmm8
	.process_batch_increment:
	ADD rdi, 128
	ADD rsi, 128
	SUB rdx, 16
	JAE .process_batch_fast
	.process_restore:
	ADD rdx, 16
	JZ .return_ok
	.process_single:
	MOVSD xmm8, [rdi]
	MOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_K10_constants.c0]
	MOVAPS xmm10, xmm8
	MULSD xmm10, [rel _yepMath_Exp_V64f_V64f_K10_constants.c1]
	ADDSD xmm10, xmm9
	MOVDQA xmm11, xmm10
	PSLLQ xmm11, 52
	SUBSD xmm10, xmm9
	MOVAPS xmm9, xmm10
	MULSD xmm9, [rel _yepMath_Exp_V64f_V64f_K10_constants.c2]
	ADDSD xmm9, xmm8
	MULSD xmm10, [rel _yepMath_Exp_V64f_V64f_K10_constants.c3]
	ADDSD xmm9, xmm10
	MOVDQA xmm10, xmm11
	PMINSW xmm10,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c4]
	PMAXSW xmm10,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c5]
	PSUBD xmm11, xmm10
	MOVDQA xmm12,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c4]
	PADDD xmm10, xmm12
	PADDD xmm11, xmm12
	MOVSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c6]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c7]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c8]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c9]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c10]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c11]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c12]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c13]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c14]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_K10_constants.c15]
	MULSD xmm12, xmm9
	MULSD xmm12, xmm9
	ADDSD xmm12, xmm9
	MULSD xmm12, xmm10
	ADDSD xmm12, xmm10
	MULSD xmm12, xmm11
	MOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_K10_constants.c16]
	CMPLESD xmm9, xmm8
	MOVSD xmm10, [rel _yepMath_Exp_V64f_V64f_K10_constants.c17]
	ANDPS xmm10, xmm9
	ANDNPS xmm9, xmm12
	ORPS xmm9, xmm10
	CMPLTSD xmm8, [rel _yepMath_Exp_V64f_V64f_K10_constants.c18]
	ANDNPD xmm8, xmm9
	MOVSD [rsi], xmm8
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	ADD rsp, 456
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	MOVAPD xmm8, [rdi]
	MOVAPD xmm9, xmm8
	MOVAPD xmm10,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c19]
	MULPD xmm9, xmm10
	MOVAPD xmm11,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c20]
	ADDPD xmm9, xmm11
	MOVDQA xmm12, xmm9
	PSLLQ xmm12, 52
	SUBPD xmm9, xmm11
	MOVAPS xmm13, xmm9
	MULPD xmm13,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	ADDPD xmm13, xmm8
	MULPD xmm9,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	ADDPD xmm13, xmm9
	MOVDQA xmm8,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c4]
	MOVAPD xmm9, xmm12
	PMINSW xmm9, xmm8
	MOVDQA xmm14,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c5]
	PMAXSW xmm9, xmm14
	PSUBD xmm12, xmm9
	MOVDQA xmm15,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c4]
	PADDD xmm9, xmm15
	MOVDQA   [rsp + 160], xmm9
	PADDD xmm12, xmm15
	MOVDQA   [rsp + 176], xmm12
	MOVAPD xmm9, [byte rdi + 16]
	MOVAPD xmm12, xmm9
	MULPD xmm12, xmm10
	ADDPD xmm12, xmm11
	MOVDQA xmm7, xmm12
	PSLLQ xmm7, 52
	SUBPD xmm12, xmm11
	MOVAPS xmm6, xmm12
	MULPD xmm6,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	ADDPD xmm6, xmm9
	MULPD xmm12,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	ADDPD xmm6, xmm12
	MOVAPD xmm9, xmm7
	PMINSW xmm9, xmm8
	PMAXSW xmm9, xmm14
	PSUBD xmm7, xmm9
	PADDD xmm9, xmm15
	MOVDQA   [rsp + 192], xmm9
	PADDD xmm7, xmm15
	MOVDQA   [rsp + 208], xmm7
	MOVAPD xmm9, [byte rdi + 32]
	MOVAPD xmm12, xmm9
	MULPD xmm12, xmm10
	ADDPD xmm12, xmm11
	MOVDQA xmm7, xmm12
	PSLLQ xmm7, 52
	SUBPD xmm12, xmm11
	MOVAPS xmm5, xmm12
	MULPD xmm5,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	ADDPD xmm5, xmm9
	MULPD xmm12,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	ADDPD xmm5, xmm12
	MOVAPD xmm9, xmm7
	PMINSW xmm9, xmm8
	PMAXSW xmm9, xmm14
	PSUBD xmm7, xmm9
	PADDD xmm9, xmm15
	MOVDQA   [rsp + 224], xmm9
	PADDD xmm7, xmm15
	MOVDQA   [rsp + 240], xmm7
	MOVAPD xmm9, [byte rdi + 48]
	MOVAPD xmm12, xmm9
	MULPD xmm12, xmm10
	ADDPD xmm12, xmm11
	MOVDQA xmm7, xmm12
	PSLLQ xmm7, 52
	SUBPD xmm12, xmm11
	MOVAPS xmm4, xmm12
	MULPD xmm4,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	ADDPD xmm4, xmm9
	MULPD xmm12,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	ADDPD xmm4, xmm12
	MOVAPD xmm9, xmm7
	PMINSW xmm9, xmm8
	PMAXSW xmm9, xmm14
	PSUBD xmm7, xmm9
	PADDD xmm9, xmm15
	MOVDQA   [rsp + 256], xmm9
	PADDD xmm7, xmm15
	MOVDQA   [rsp + 272], xmm7
	MOVAPD xmm9, [byte rdi + 64]
	MOVAPD xmm12, xmm9
	MULPD xmm12, xmm10
	ADDPD xmm12, xmm11
	MOVDQA xmm7, xmm12
	PSLLQ xmm7, 52
	SUBPD xmm12, xmm11
	MOVAPS xmm3, xmm12
	MULPD xmm3,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	ADDPD xmm3, xmm9
	MULPD xmm12,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	ADDPD xmm3, xmm12
	MOVAPD xmm9, xmm7
	PMINSW xmm9, xmm8
	PMAXSW xmm9, xmm14
	PSUBD xmm7, xmm9
	PADDD xmm9, xmm15
	MOVDQA   [rsp + 288], xmm9
	PADDD xmm7, xmm15
	MOVDQA   [rsp + 304], xmm7
	MOVAPD xmm9, [byte rdi + 80]
	MOVAPD xmm12, xmm9
	MULPD xmm12, xmm10
	ADDPD xmm12, xmm11
	MOVDQA xmm7, xmm12
	PSLLQ xmm7, 52
	SUBPD xmm12, xmm11
	MOVAPS xmm2, xmm12
	MULPD xmm2,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	ADDPD xmm2, xmm9
	MULPD xmm12,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	ADDPD xmm2, xmm12
	MOVAPD xmm9, xmm7
	PMINSW xmm9, xmm8
	PMAXSW xmm9, xmm14
	PSUBD xmm7, xmm9
	PADDD xmm9, xmm15
	MOVDQA   [rsp + 320], xmm9
	PADDD xmm7, xmm15
	MOVDQA   [rsp + 336], xmm7
	MOVAPD xmm9, [byte rdi + 96]
	MOVAPD xmm12, xmm9
	MULPD xmm12, xmm10
	ADDPD xmm12, xmm11
	MOVDQA xmm7, xmm12
	PSLLQ xmm7, 52
	SUBPD xmm12, xmm11
	MOVAPS xmm1, xmm12
	MULPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	ADDPD xmm1, xmm9
	MULPD xmm12,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	ADDPD xmm1, xmm12
	MOVAPS   [rsp + 352], xmm1
	MOVAPD xmm9, xmm7
	PMINSW xmm9, xmm8
	PMAXSW xmm9, xmm14
	PSUBD xmm7, xmm9
	PADDD xmm9, xmm15
	MOVDQA   [rsp + 368], xmm9
	PADDD xmm7, xmm15
	MOVDQA   [rsp + 384], xmm7
	MOVAPD xmm9, [byte rdi + 112]
	MOVAPD xmm12, xmm9
	MULPD xmm12, xmm10
	ADDPD xmm12, xmm11
	MOVDQA xmm10, xmm12
	PSLLQ xmm10, 52
	SUBPD xmm12, xmm11
	MOVAPS xmm11, xmm12
	MULPD xmm11,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c21]
	ADDPD xmm11, xmm9
	MULPD xmm12,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c22]
	ADDPD xmm11, xmm12
	MOVAPS   [rsp + 400], xmm11
	MOVAPD xmm9, xmm10
	PMINSW xmm9, xmm8
	PMAXSW xmm9, xmm14
	PSUBD xmm10, xmm9
	PADDD xmm9, xmm15
	MOVDQA   [rsp + 416], xmm9
	PADDD xmm10, xmm15
	MOVDQA   [rsp + 432], xmm10
	MOVAPS xmm8,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c23]
	MOVAPS xmm9, xmm8
	MOVAPS xmm10, xmm8
	MOVAPS xmm11, xmm8
	MOVAPS xmm12,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c23]
	MOVAPS xmm14, xmm12
	MOVAPS xmm15, xmm12
	MOVAPS xmm7, xmm12
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c24]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c25]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c26]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c27]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c28]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c29]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c30]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c31]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c32]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MULPD xmm8, xmm13
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm13
	MULPD xmm9, xmm6
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm6
	MULPD xmm10, xmm5
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm5
	MULPD xmm11, xmm4
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm4
	MULPD xmm12, xmm3
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm3
	MULPD xmm14, xmm2
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm2
	MOVAPS xmm13,   [rsp + 352]
	MULPD xmm15, xmm13
	MULPD xmm15, xmm13
	ADDPD xmm15, xmm13
	MOVAPS xmm13,   [rsp + 400]
	MULPD xmm7, xmm13
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm13
	MOVAPS xmm13,   [rsp + 160]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm13
	MOVAPS xmm13,   [rsp + 192]
	MULPD xmm9, xmm13
	ADDPD xmm9, xmm13
	MOVAPS xmm13,   [rsp + 224]
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm13
	MOVAPS xmm13,   [rsp + 256]
	MULPD xmm11, xmm13
	ADDPD xmm11, xmm13
	MOVAPS xmm13,   [rsp + 288]
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm13
	MOVAPS xmm13,   [rsp + 320]
	MULPD xmm14, xmm13
	ADDPD xmm14, xmm13
	MOVAPS xmm13,   [rsp + 368]
	MULPD xmm15, xmm13
	ADDPD xmm15, xmm13
	MOVAPS xmm13,   [rsp + 416]
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm13
	MULPD xmm8,   [rsp + 176]
	MULPD xmm9,   [rsp + 208]
	MULPD xmm10,   [rsp + 240]
	MULPD xmm11,   [rsp + 272]
	MULPD xmm12,   [rsp + 304]
	MULPD xmm14,   [rsp + 336]
	MULPD xmm15,   [rsp + 384]
	MULPD xmm7,   [rsp + 432]
	MOVAPS xmm13, [rdi]
	MOVAPD xmm6,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c33]
	MOVAPS xmm5, xmm6
	CMPLEPD xmm5, xmm13
	MOVAPS xmm4,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c34]
	ANDPS xmm4, xmm5
	ANDNPS xmm5, xmm8
	ORPS xmm5, xmm4
	MOVAPD xmm8,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c35]
	CMPLTPD xmm13, xmm8
	ANDNPD xmm13, xmm5
	MOVUPS [rsi], xmm13
	MOVAPS xmm13, [byte rdi + 16]
	MOVAPS xmm5, xmm6
	CMPLEPD xmm5, xmm13
	MOVAPS xmm4,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c34]
	ANDPS xmm4, xmm5
	ANDNPS xmm5, xmm9
	ORPS xmm5, xmm4
	CMPLTPD xmm13, xmm8
	ANDNPD xmm13, xmm5
	MOVUPS [byte rsi + 16], xmm13
	MOVAPS xmm9, [byte rdi + 32]
	MOVAPS xmm13, xmm6
	CMPLEPD xmm13, xmm9
	MOVAPS xmm5,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c34]
	ANDPS xmm5, xmm13
	ANDNPS xmm13, xmm10
	ORPS xmm13, xmm5
	CMPLTPD xmm9, xmm8
	ANDNPD xmm9, xmm13
	MOVUPS [byte rsi + 32], xmm9
	MOVAPS xmm9, [byte rdi + 48]
	MOVAPS xmm10, xmm6
	CMPLEPD xmm10, xmm9
	MOVAPS xmm13,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c34]
	ANDPS xmm13, xmm10
	ANDNPS xmm10, xmm11
	ORPS xmm10, xmm13
	CMPLTPD xmm9, xmm8
	ANDNPD xmm9, xmm10
	MOVUPS [byte rsi + 48], xmm9
	MOVAPS xmm9, [byte rdi + 64]
	MOVAPS xmm10, xmm6
	CMPLEPD xmm10, xmm9
	MOVAPS xmm11,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c34]
	ANDPS xmm11, xmm10
	ANDNPS xmm10, xmm12
	ORPS xmm10, xmm11
	CMPLTPD xmm9, xmm8
	ANDNPD xmm9, xmm10
	MOVUPS [byte rsi + 64], xmm9
	MOVAPS xmm9, [byte rdi + 80]
	MOVAPS xmm10, xmm6
	CMPLEPD xmm10, xmm9
	MOVAPS xmm11,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c34]
	ANDPS xmm11, xmm10
	ANDNPS xmm10, xmm14
	ORPS xmm10, xmm11
	CMPLTPD xmm9, xmm8
	ANDNPD xmm9, xmm10
	MOVUPS [byte rsi + 80], xmm9
	MOVAPS xmm9, [byte rdi + 96]
	MOVAPS xmm10, xmm6
	CMPLEPD xmm10, xmm9
	MOVAPS xmm11,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c34]
	ANDPS xmm11, xmm10
	ANDNPS xmm10, xmm15
	ORPS xmm10, xmm11
	CMPLTPD xmm9, xmm8
	ANDNPD xmm9, xmm10
	MOVUPS [byte rsi + 96], xmm9
	MOVAPS xmm9, [byte rdi + 112]
	MOVAPS xmm10, xmm6
	CMPLEPD xmm10, xmm9
	MOVAPS xmm11,  [rel _yepMath_Exp_V64f_V64f_K10_constants.c34]
	ANDPS xmm11, xmm10
	ANDNPS xmm10, xmm7
	ORPS xmm10, xmm11
	CMPLTPD xmm9, xmm8
	ANDNPD xmm9, xmm10
	MOVUPS [byte rsi + 112], xmm9
	JMP .process_batch_increment

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.Nehalem progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Exp_V64f_V64f_Nehalem_constants:
	.c0: DQ 0x4338000000000000
	.c1: DQ 0x3FF71547652B82FE
	.c2: DQ 0xBFE62E42FEFA3800
	.c3: DQ 0xBD2EF35793C76730
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c5: DQ 0xC020000000000000, 0xC020000000000000
	.c6: DQ 0x3E5AE9043CA87A40
	.c7: DQ 0x3E928A284098D813
	.c8: DQ 0x3EC71DE71651CE7A
	.c9: DQ 0x3EFA019A6AC02A7D
	.c10: DQ 0x3F2A01A017EEB164
	.c11: DQ 0x3F56C16C17F2BF99
	.c12: DQ 0x3F811111111173CA
	.c13: DQ 0x3FA5555555552115
	.c14: DQ 0x3FC5555555555540
	.c15: DQ 0x3FE0000000000005
	.c16: DQ 0x40862E42FEFA39EF
	.c18: DQ 0xC0874910D52D3051
	.c17: DQ 0x7FF0000000000000, 0x7FF0000000000000
	.c19: DQ 0x3FF71547652B82FE, 0x3FF71547652B82FE
	.c20: DQ 0x4338000000000000, 0x4338000000000000
	.c21: DQ 0xBFE62E42FEFA3800, 0xBFE62E42FEFA3800
	.c22: DQ 0xBD2EF35793C76730, 0xBD2EF35793C76730
	.c23: DQ 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40
	.c24: DQ 0x3E928A284098D813, 0x3E928A284098D813
	.c25: DQ 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A
	.c26: DQ 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D
	.c27: DQ 0x3F2A01A017EEB164, 0x3F2A01A017EEB164
	.c28: DQ 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99
	.c29: DQ 0x3F811111111173CA, 0x3F811111111173CA
	.c30: DQ 0x3FA5555555552115, 0x3FA5555555552115
	.c31: DQ 0x3FC5555555555540, 0x3FC5555555555540
	.c32: DQ 0x3FE0000000000005, 0x3FE0000000000005
	.c33: DQ 0x40862E42FEFA39EF, 0x40862E42FEFA39EF
	.c34: DQ 0xC0874910D52D3051, 0xC0874910D52D3051


%ifidn __OUTPUT_FORMAT__, elf64
section .text.Nehalem progbits alloc exec nowrite align=16
global _yepMath_Exp_V64f_V64f_Nehalem
_yepMath_Exp_V64f_V64f_Nehalem:
%else
section .text
global __yepMath_Exp_V64f_V64f_Nehalem
__yepMath_Exp_V64f_V64f_Nehalem:
%endif
	.ENTRY:
	SUB rsp, 456
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 15
	JZ .source_16b_aligned
	.source_16b_misaligned:
	MOVSD xmm8, [rdi]
	MOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c0]
	MOVAPS xmm10, xmm8
	MULSD xmm10, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c1]
	ADDSD xmm10, xmm9
	MOVDQA xmm11, xmm10
	PSLLQ xmm11, 52
	SUBSD xmm10, xmm9
	MOVAPS xmm9, xmm10
	MULSD xmm9, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c2]
	ADDSD xmm9, xmm8
	MULSD xmm10, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c3]
	ADDSD xmm9, xmm10
	MOVDQA xmm10, xmm11
	PMINSW xmm10,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c4]
	PMAXSW xmm10,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c5]
	PSUBD xmm11, xmm10
	MOVDQA xmm12,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c4]
	PADDD xmm10, xmm12
	PADDD xmm11, xmm12
	MOVSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c6]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c7]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c8]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c9]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c10]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c11]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c12]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c13]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c14]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c15]
	MULSD xmm12, xmm9
	MULSD xmm12, xmm9
	ADDSD xmm12, xmm9
	MULSD xmm12, xmm10
	ADDSD xmm12, xmm10
	MULSD xmm12, xmm11
	MOVSD xmm0, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c16]
	CMPLESD xmm0, xmm8
	BLENDVPD xmm12,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c17], xmm0
	CMPLTSD xmm8, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c18]
	ANDNPD xmm8, xmm12
	MOVSD [rsi], xmm8
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 15
	JNZ .source_16b_misaligned
	.source_16b_aligned:
	SUB rdx, 16
	JB .process_restore
	align 32
	.process_batch_fast:
	MOVAPD xmm8, [rdi]
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c19]
	MULPD xmm8, xmm9
	MOVAPD xmm10,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c20]
	ADDPD xmm8, xmm10
	MOVAPD xmm11, [byte rdi + 16]
	MULPD xmm11, xmm9
	ADDPD xmm11, xmm10
	MOVAPD xmm12, [byte rdi + 32]
	MULPD xmm12, xmm9
	ADDPD xmm12, xmm10
	MOVAPD xmm13, [byte rdi + 48]
	MULPD xmm13, xmm9
	ADDPD xmm13, xmm10
	MOVAPD xmm14, [byte rdi + 64]
	MULPD xmm14, xmm9
	ADDPD xmm14, xmm10
	MOVAPD xmm15, [byte rdi + 80]
	MULPD xmm15, xmm9
	ADDPD xmm15, xmm10
	MOVAPD xmm7, [byte rdi + 96]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm10
	MOVAPD xmm6, [byte rdi + 112]
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm10
	MOVDQA xmm9,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c4]
	MOVDQA xmm5, xmm8
	PSLLQ xmm5, 52
	PADDD xmm5, xmm9
	MOVDQA   [rsp], xmm5
	SUBPD xmm8, xmm10
	MOV rax, 13872817421961305113
	MOVDQA xmm5, xmm11
	PSLLQ xmm5, 52
	PADDD xmm5, xmm9
	MOVDQA   [rsp + 16], xmm5
	SUBPD xmm11, xmm10
	MOV r10, 4649451482093607591
	MOVDQA xmm5, xmm12
	PSLLQ xmm5, 52
	PADDD xmm5, xmm9
	MOVDQA   [rsp + 32], xmm5
	SUBPD xmm12, xmm10
	MOV r11, [rdi]
	MOVDQA xmm5, xmm13
	PSLLQ xmm5, 52
	PADDD xmm5, xmm9
	MOVDQA   [rsp + 48], xmm5
	SUBPD xmm13, xmm10
	CMP r11, rax
	JA .process_batch_full
	MOVDQA xmm5, xmm14
	PSLLQ xmm5, 52
	PADDD xmm5, xmm9
	MOVDQA   [rsp + 64], xmm5
	SUBPD xmm14, xmm10
	CMP r11, r10
	JG .process_batch_full
	MOVDQA xmm5, xmm15
	PSLLQ xmm5, 52
	PADDD xmm5, xmm9
	MOVDQA   [rsp + 80], xmm5
	SUBPD xmm15, xmm10
	MOV r11, [byte rdi + 8]
	MOVDQA xmm5, xmm7
	PSLLQ xmm5, 52
	PADDD xmm5, xmm9
	MOVDQA   [rsp + 96], xmm5
	SUBPD xmm7, xmm10
	CMP r11, rax
	JA .process_batch_full
	MOVDQA xmm5, xmm6
	PSLLQ xmm5, 52
	PADDD xmm5, xmm9
	MOVDQA   [rsp + 112], xmm5
	SUBPD xmm6, xmm10
	CMP r11, r10
	JG .process_batch_full
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	MOVAPS xmm10, xmm8
	MULPD xmm10, xmm9
	ADDPD xmm10, [rdi]
	MOVAPS xmm5, xmm11
	MULPD xmm5, xmm9
	ADDPD xmm5, [byte rdi + 16]
	MOVAPS xmm4, xmm12
	MULPD xmm4, xmm9
	ADDPD xmm4, [byte rdi + 32]
	MOVAPS xmm3, xmm13
	MULPD xmm3, xmm9
	ADDPD xmm3, [byte rdi + 48]
	MOVAPS xmm2, xmm14
	MULPD xmm2, xmm9
	ADDPD xmm2, [byte rdi + 64]
	MOVAPS xmm1, xmm15
	MULPD xmm1, xmm9
	ADDPD xmm1, [byte rdi + 80]
	MOVAPS xmm0, xmm7
	MULPD xmm0, xmm9
	ADDPD xmm0, [byte rdi + 96]
	MOVAPS   [rsp + 128], xmm0
	MOVAPS xmm0, xmm6
	MULPD xmm0, xmm9
	ADDPD xmm0, [byte rdi + 112]
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	MULPD xmm8, xmm9
	ADDPD xmm10, xmm8
	MOV r11, [byte rdi + 16]
	MULPD xmm11, xmm9
	ADDPD xmm5, xmm11
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm12, xmm9
	ADDPD xmm4, xmm12
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm13, xmm9
	ADDPD xmm3, xmm13
	MOV r11, [byte rdi + 24]
	MOVAPS xmm8,   [rsp + 128]
	MULPD xmm14, xmm9
	ADDPD xmm2, xmm14
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm15, xmm9
	ADDPD xmm1, xmm15
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm7, xmm9
	ADDPD xmm8, xmm7
	MOVAPS   [rsp + 128], xmm8
	MULPD xmm6, xmm9
	ADDPD xmm0, xmm6
	MOVAPS   [rsp + 144], xmm0
	MOVAPS xmm8,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c23]
	MOVAPS xmm9,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c24]
	MOVAPS xmm11, xmm8
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	MOVAPS xmm12, xmm8
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	MOVAPS xmm13, xmm8
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	MOVAPS xmm14, xmm8
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	MOVAPS xmm15, xmm8
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	MOVAPS xmm7, xmm8
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	MOVAPS xmm6, xmm8
	MULPD xmm6,   [rsp + 128]
	ADDPD xmm6, xmm9
	MOV r11, [byte rdi + 32]
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c25]
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	MOV r11, [byte rdi + 40]
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	MOV r11, [byte rdi + 48]
	MULPD xmm6,   [rsp + 128]
	ADDPD xmm6, xmm9
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm9
	CMP r11, r10
	JG .process_batch_full
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c26]
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	MOV r11, [byte rdi + 56]
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	MOV r11, [byte rdi + 64]
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm6,   [rsp + 128]
	ADDPD xmm6, xmm9
	MOV r11, [byte rdi + 72]
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm9
	CMP r11, rax
	JA .process_batch_full
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c27]
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	MOV r11, [byte rdi + 80]
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	MOV r11, [byte rdi + 88]
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm6,   [rsp + 128]
	ADDPD xmm6, xmm9
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm9
	MOV r11, [byte rdi + 96]
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c28]
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	MOV r11, [byte rdi + 104]
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	MOV r11, [byte rdi + 112]
	MULPD xmm6,   [rsp + 128]
	ADDPD xmm6, xmm9
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm9
	CMP r11, r10
	JG .process_batch_full
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c29]
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	MOV r11, [byte rdi + 120]
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	CMP r11, rax
	JA .process_batch_full
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	CMP r11, r10
	JG .process_batch_full
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	MULPD xmm6,   [rsp + 128]
	ADDPD xmm6, xmm9
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c30]
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	MULPD xmm6,   [rsp + 128]
	ADDPD xmm6, xmm9
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c31]
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	MULPD xmm6,   [rsp + 128]
	ADDPD xmm6, xmm9
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c32]
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm9
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm9
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm9
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm9
	MULPD xmm6,   [rsp + 128]
	ADDPD xmm6, xmm9
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm9
	MULPD xmm11, xmm10
	MULPD xmm11, xmm10
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm5
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm5
	MULPD xmm13, xmm4
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm4
	MULPD xmm14, xmm3
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm3
	MULPD xmm15, xmm2
	MULPD xmm15, xmm2
	ADDPD xmm15, xmm2
	MULPD xmm7, xmm1
	MULPD xmm7, xmm1
	ADDPD xmm7, xmm1
	MOVAPS xmm9,   [rsp + 128]
	MULPD xmm6, xmm9
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm9
	MOVAPS xmm9,   [rsp + 144]
	MULPD xmm8, xmm9
	MULPD xmm8, xmm9
	ADDPD xmm8, xmm9
	MOVAPS xmm9,   [rsp]
	MULPD xmm11, xmm9
	ADDPD xmm11, xmm9
	MOVUPS [rsi], xmm11
	MOVAPS xmm9,   [rsp + 16]
	MULPD xmm12, xmm9
	ADDPD xmm12, xmm9
	MOVUPS [byte rsi + 16], xmm12
	MOVAPS xmm9,   [rsp + 32]
	MULPD xmm13, xmm9
	ADDPD xmm13, xmm9
	MOVUPS [byte rsi + 32], xmm13
	MOVAPS xmm9,   [rsp + 48]
	MULPD xmm14, xmm9
	ADDPD xmm14, xmm9
	MOVUPS [byte rsi + 48], xmm14
	MOVAPS xmm9,   [rsp + 64]
	MULPD xmm15, xmm9
	ADDPD xmm15, xmm9
	MOVUPS [byte rsi + 64], xmm15
	MOVAPS xmm9,   [rsp + 80]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm9
	MOVUPS [byte rsi + 80], xmm7
	MOVAPS xmm9,   [rsp + 96]
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm9
	MOVUPS [byte rsi + 96], xmm6
	MOVAPS xmm9,   [rsp + 112]
	MULPD xmm8, xmm9
	ADDPD xmm8, xmm9
	MOVUPS [byte rsi + 112], xmm8
	.process_batch_increment:
	ADD rdi, 128
	ADD rsi, 128
	SUB rdx, 16
	JAE .process_batch_fast
	.process_restore:
	ADD rdx, 16
	JZ .return_ok
	.process_single:
	MOVSD xmm8, [rdi]
	MOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c0]
	MOVAPS xmm10, xmm8
	MULSD xmm10, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c1]
	ADDSD xmm10, xmm9
	MOVDQA xmm11, xmm10
	PSLLQ xmm11, 52
	SUBSD xmm10, xmm9
	MOVAPS xmm9, xmm10
	MULSD xmm9, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c2]
	ADDSD xmm9, xmm8
	MULSD xmm10, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c3]
	ADDSD xmm9, xmm10
	MOVDQA xmm10, xmm11
	PMINSW xmm10,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c4]
	PMAXSW xmm10,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c5]
	PSUBD xmm11, xmm10
	MOVDQA xmm12,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c4]
	PADDD xmm10, xmm12
	PADDD xmm11, xmm12
	MOVSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c6]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c7]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c8]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c9]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c10]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c11]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c12]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c13]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c14]
	MULSD xmm12, xmm9
	ADDSD xmm12, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c15]
	MULSD xmm12, xmm9
	MULSD xmm12, xmm9
	ADDSD xmm12, xmm9
	MULSD xmm12, xmm10
	ADDSD xmm12, xmm10
	MULSD xmm12, xmm11
	MOVSD xmm0, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c16]
	CMPLESD xmm0, xmm8
	BLENDVPD xmm12,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c17], xmm0
	CMPLTSD xmm8, [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c18]
	ANDNPD xmm8, xmm12
	MOVSD [rsi], xmm8
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	ADD rsp, 456
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	MOVAPD xmm8, [rdi]
	MOVAPD xmm9, xmm8
	MOVAPD xmm10,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c19]
	MULPD xmm9, xmm10
	MOVAPD xmm11,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c20]
	ADDPD xmm9, xmm11
	MOVDQA xmm12, xmm9
	PSLLQ xmm12, 52
	SUBPD xmm9, xmm11
	MOVAPS xmm13, xmm9
	MULPD xmm13,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	ADDPD xmm13, xmm8
	MULPD xmm9,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	ADDPD xmm13, xmm9
	MOVDQA xmm8,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c4]
	MOVAPD xmm9, xmm12
	PMINSW xmm9, xmm8
	MOVDQA xmm14,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c5]
	PMAXSW xmm9, xmm14
	PSUBD xmm12, xmm9
	MOVDQA xmm15,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c4]
	PADDD xmm9, xmm15
	MOVDQA   [rsp + 160], xmm9
	PADDD xmm12, xmm15
	MOVDQA   [rsp + 176], xmm12
	MOVAPD xmm9, [byte rdi + 16]
	MOVAPD xmm12, xmm9
	MULPD xmm12, xmm10
	ADDPD xmm12, xmm11
	MOVDQA xmm7, xmm12
	PSLLQ xmm7, 52
	SUBPD xmm12, xmm11
	MOVAPS xmm6, xmm12
	MULPD xmm6,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	ADDPD xmm6, xmm9
	MULPD xmm12,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	ADDPD xmm6, xmm12
	MOVAPD xmm9, xmm7
	PMINSW xmm9, xmm8
	PMAXSW xmm9, xmm14
	PSUBD xmm7, xmm9
	PADDD xmm9, xmm15
	MOVDQA   [rsp + 192], xmm9
	PADDD xmm7, xmm15
	MOVDQA   [rsp + 208], xmm7
	MOVAPD xmm9, [byte rdi + 32]
	MOVAPD xmm12, xmm9
	MULPD xmm12, xmm10
	ADDPD xmm12, xmm11
	MOVDQA xmm7, xmm12
	PSLLQ xmm7, 52
	SUBPD xmm12, xmm11
	MOVAPS xmm5, xmm12
	MULPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	ADDPD xmm5, xmm9
	MULPD xmm12,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	ADDPD xmm5, xmm12
	MOVAPD xmm9, xmm7
	PMINSW xmm9, xmm8
	PMAXSW xmm9, xmm14
	PSUBD xmm7, xmm9
	PADDD xmm9, xmm15
	MOVDQA   [rsp + 224], xmm9
	PADDD xmm7, xmm15
	MOVDQA   [rsp + 240], xmm7
	MOVAPD xmm9, [byte rdi + 48]
	MOVAPD xmm12, xmm9
	MULPD xmm12, xmm10
	ADDPD xmm12, xmm11
	MOVDQA xmm7, xmm12
	PSLLQ xmm7, 52
	SUBPD xmm12, xmm11
	MOVAPS xmm4, xmm12
	MULPD xmm4,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	ADDPD xmm4, xmm9
	MULPD xmm12,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	ADDPD xmm4, xmm12
	MOVAPD xmm9, xmm7
	PMINSW xmm9, xmm8
	PMAXSW xmm9, xmm14
	PSUBD xmm7, xmm9
	PADDD xmm9, xmm15
	MOVDQA   [rsp + 256], xmm9
	PADDD xmm7, xmm15
	MOVDQA   [rsp + 272], xmm7
	MOVAPD xmm9, [byte rdi + 64]
	MOVAPD xmm12, xmm9
	MULPD xmm12, xmm10
	ADDPD xmm12, xmm11
	MOVDQA xmm7, xmm12
	PSLLQ xmm7, 52
	SUBPD xmm12, xmm11
	MOVAPS xmm3, xmm12
	MULPD xmm3,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	ADDPD xmm3, xmm9
	MULPD xmm12,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	ADDPD xmm3, xmm12
	MOVAPD xmm9, xmm7
	PMINSW xmm9, xmm8
	PMAXSW xmm9, xmm14
	PSUBD xmm7, xmm9
	PADDD xmm9, xmm15
	MOVDQA   [rsp + 288], xmm9
	PADDD xmm7, xmm15
	MOVDQA   [rsp + 304], xmm7
	MOVAPD xmm9, [byte rdi + 80]
	MOVAPD xmm12, xmm9
	MULPD xmm12, xmm10
	ADDPD xmm12, xmm11
	MOVDQA xmm7, xmm12
	PSLLQ xmm7, 52
	SUBPD xmm12, xmm11
	MOVAPS xmm2, xmm12
	MULPD xmm2,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	ADDPD xmm2, xmm9
	MULPD xmm12,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	ADDPD xmm2, xmm12
	MOVAPD xmm9, xmm7
	PMINSW xmm9, xmm8
	PMAXSW xmm9, xmm14
	PSUBD xmm7, xmm9
	PADDD xmm9, xmm15
	MOVDQA   [rsp + 320], xmm9
	PADDD xmm7, xmm15
	MOVDQA   [rsp + 336], xmm7
	MOVAPD xmm9, [byte rdi + 96]
	MOVAPD xmm12, xmm9
	MULPD xmm12, xmm10
	ADDPD xmm12, xmm11
	MOVDQA xmm7, xmm12
	PSLLQ xmm7, 52
	SUBPD xmm12, xmm11
	MOVAPS xmm1, xmm12
	MULPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	ADDPD xmm1, xmm9
	MULPD xmm12,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	ADDPD xmm1, xmm12
	MOVAPS   [rsp + 352], xmm1
	MOVAPD xmm9, xmm7
	PMINSW xmm9, xmm8
	PMAXSW xmm9, xmm14
	PSUBD xmm7, xmm9
	PADDD xmm9, xmm15
	MOVDQA   [rsp + 368], xmm9
	PADDD xmm7, xmm15
	MOVDQA   [rsp + 384], xmm7
	MOVAPD xmm9, [byte rdi + 112]
	MOVAPD xmm12, xmm9
	MULPD xmm12, xmm10
	ADDPD xmm12, xmm11
	MOVDQA xmm10, xmm12
	PSLLQ xmm10, 52
	SUBPD xmm12, xmm11
	MOVAPS xmm11, xmm12
	MULPD xmm11,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c21]
	ADDPD xmm11, xmm9
	MULPD xmm12,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c22]
	ADDPD xmm11, xmm12
	MOVAPS   [rsp + 400], xmm11
	MOVAPD xmm9, xmm10
	PMINSW xmm9, xmm8
	PMAXSW xmm9, xmm14
	PSUBD xmm10, xmm9
	PADDD xmm9, xmm15
	MOVDQA   [rsp + 416], xmm9
	PADDD xmm10, xmm15
	MOVDQA   [rsp + 432], xmm10
	MOVAPS xmm8,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c23]
	MOVAPS xmm9, xmm8
	MOVAPS xmm10, xmm8
	MOVAPS xmm11, xmm8
	MOVAPS xmm12,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c23]
	MOVAPS xmm14, xmm12
	MOVAPS xmm15, xmm12
	MOVAPS xmm7, xmm12
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c24]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c25]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c26]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c27]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c28]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c29]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c30]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c31]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MOVAPD xmm1,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c32]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm1
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm1
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm1
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm1
	MULPD xmm15,   [rsp + 352]
	ADDPD xmm15, xmm1
	MULPD xmm7,   [rsp + 400]
	ADDPD xmm7, xmm1
	MULPD xmm8, xmm13
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm13
	MULPD xmm9, xmm6
	MULPD xmm9, xmm6
	ADDPD xmm9, xmm6
	MULPD xmm10, xmm5
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm5
	MULPD xmm11, xmm4
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm4
	MULPD xmm12, xmm3
	MULPD xmm12, xmm3
	ADDPD xmm12, xmm3
	MULPD xmm14, xmm2
	MULPD xmm14, xmm2
	ADDPD xmm14, xmm2
	MOVAPS xmm13,   [rsp + 352]
	MULPD xmm15, xmm13
	MULPD xmm15, xmm13
	ADDPD xmm15, xmm13
	MOVAPS xmm13,   [rsp + 400]
	MULPD xmm7, xmm13
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm13
	MOVAPS xmm13,   [rsp + 160]
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm13
	MOVAPS xmm13,   [rsp + 192]
	MULPD xmm9, xmm13
	ADDPD xmm9, xmm13
	MOVAPS xmm13,   [rsp + 224]
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm13
	MOVAPS xmm13,   [rsp + 256]
	MULPD xmm11, xmm13
	ADDPD xmm11, xmm13
	MOVAPS xmm13,   [rsp + 288]
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm13
	MOVAPS xmm13,   [rsp + 320]
	MULPD xmm14, xmm13
	ADDPD xmm14, xmm13
	MOVAPS xmm13,   [rsp + 368]
	MULPD xmm15, xmm13
	ADDPD xmm15, xmm13
	MOVAPS xmm13,   [rsp + 416]
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm13
	MULPD xmm8,   [rsp + 176]
	MULPD xmm9,   [rsp + 208]
	MULPD xmm10,   [rsp + 240]
	MULPD xmm11,   [rsp + 272]
	MULPD xmm12,   [rsp + 304]
	MULPD xmm14,   [rsp + 336]
	MULPD xmm15,   [rsp + 384]
	MULPD xmm7,   [rsp + 432]
	MOVAPS xmm13, [rdi]
	MOVAPD xmm6,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c33]
	MOVAPS xmm0, xmm6
	CMPLEPD xmm0, xmm13
	MOVAPD xmm5,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c17]
	BLENDVPD xmm8, xmm5, xmm0
	MOVAPD xmm4,  [rel _yepMath_Exp_V64f_V64f_Nehalem_constants.c34]
	CMPLTPD xmm13, xmm4
	ANDNPD xmm13, xmm8
	MOVUPS [rsi], xmm13
	MOVAPS xmm8, [byte rdi + 16]
	MOVAPS xmm0, xmm6
	CMPLEPD xmm0, xmm8
	BLENDVPD xmm9, xmm5, xmm0
	CMPLTPD xmm8, xmm4
	ANDNPD xmm8, xmm9
	MOVUPS [byte rsi + 16], xmm8
	MOVAPS xmm8, [byte rdi + 32]
	MOVAPS xmm0, xmm6
	CMPLEPD xmm0, xmm8
	BLENDVPD xmm10, xmm5, xmm0
	CMPLTPD xmm8, xmm4
	ANDNPD xmm8, xmm10
	MOVUPS [byte rsi + 32], xmm8
	MOVAPS xmm8, [byte rdi + 48]
	MOVAPS xmm0, xmm6
	CMPLEPD xmm0, xmm8
	BLENDVPD xmm11, xmm5, xmm0
	CMPLTPD xmm8, xmm4
	ANDNPD xmm8, xmm11
	MOVUPS [byte rsi + 48], xmm8
	MOVAPS xmm8, [byte rdi + 64]
	MOVAPS xmm0, xmm6
	CMPLEPD xmm0, xmm8
	BLENDVPD xmm12, xmm5, xmm0
	CMPLTPD xmm8, xmm4
	ANDNPD xmm8, xmm12
	MOVUPS [byte rsi + 64], xmm8
	MOVAPS xmm8, [byte rdi + 80]
	MOVAPS xmm0, xmm6
	CMPLEPD xmm0, xmm8
	BLENDVPD xmm14, xmm5, xmm0
	CMPLTPD xmm8, xmm4
	ANDNPD xmm8, xmm14
	MOVUPS [byte rsi + 80], xmm8
	MOVAPS xmm8, [byte rdi + 96]
	MOVAPS xmm0, xmm6
	CMPLEPD xmm0, xmm8
	BLENDVPD xmm15, xmm5, xmm0
	CMPLTPD xmm8, xmm4
	ANDNPD xmm8, xmm15
	MOVUPS [byte rsi + 96], xmm8
	MOVAPS xmm8, [byte rdi + 112]
	MOVAPS xmm0, xmm6
	CMPLEPD xmm0, xmm8
	BLENDVPD xmm7, xmm5, xmm0
	CMPLTPD xmm8, xmm4
	ANDNPD xmm8, xmm7
	MOVUPS [byte rsi + 112], xmm8
	JMP .process_batch_increment

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.SandyBridge progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Exp_V64f_V64f_SandyBridge_constants:
	.c0: DQ 0x4338000000000000
	.c1: DQ 0x3FF71547652B82FE
	.c2: DQ 0xBFE62E42FEFA3800
	.c3: DQ 0xBD2EF35793C76730
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c5: DQ 0xC020000000000000, 0xC020000000000000
	.c6: DQ 0x3E5AE9043CA87A40
	.c7: DQ 0x3E928A284098D813
	.c8: DQ 0x3EC71DE71651CE7A
	.c9: DQ 0x3EFA019A6AC02A7D
	.c10: DQ 0x3F2A01A017EEB164
	.c11: DQ 0x3F56C16C17F2BF99
	.c12: DQ 0x3F811111111173CA
	.c13: DQ 0x3FA5555555552115
	.c14: DQ 0x3FC5555555555540
	.c15: DQ 0x3FE0000000000005
	.c16: DQ 0xC0874910D52D3051
	.c17: DQ 0x40862E42FEFA39EF
	.c18: DQ 0x7FF0000000000000, 0x7FF0000000000000
	ALIGN 32
	.c19: DQ 0xC08625F1A5DA9C19, 0xC08625F1A5DA9C19, 0xC08625F1A5DA9C19, 0xC08625F1A5DA9C19
	.c20: DQ 0x40862B7D369A5AA7, 0x40862B7D369A5AA7, 0x40862B7D369A5AA7, 0x40862B7D369A5AA7
	.c21: DQ 0x3FF71547652B82FE, 0x3FF71547652B82FE, 0x3FF71547652B82FE, 0x3FF71547652B82FE
	.c22: DQ 0x4338000000000000, 0x4338000000000000, 0x4338000000000000, 0x4338000000000000
	.c23: DQ 0xBFE62E42FEFA3800, 0xBFE62E42FEFA3800, 0xBFE62E42FEFA3800, 0xBFE62E42FEFA3800
	.c24: DQ 0xBD2EF35793C76730, 0xBD2EF35793C76730, 0xBD2EF35793C76730, 0xBD2EF35793C76730
	.c25: DQ 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40
	.c26: DQ 0x3E928A284098D813, 0x3E928A284098D813, 0x3E928A284098D813, 0x3E928A284098D813
	.c27: DQ 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A
	.c28: DQ 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D
	.c29: DQ 0x3F2A01A017EEB164, 0x3F2A01A017EEB164, 0x3F2A01A017EEB164, 0x3F2A01A017EEB164
	.c30: DQ 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99
	.c31: DQ 0x3F811111111173CA, 0x3F811111111173CA, 0x3F811111111173CA, 0x3F811111111173CA
	.c32: DQ 0x3FA5555555552115, 0x3FA5555555552115, 0x3FA5555555552115, 0x3FA5555555552115
	.c33: DQ 0x3FC5555555555540, 0x3FC5555555555540, 0x3FC5555555555540, 0x3FC5555555555540
	.c34: DQ 0x3FE0000000000005, 0x3FE0000000000005, 0x3FE0000000000005, 0x3FE0000000000005
	.c35: DQ 0xC0874910D52D3051, 0xC0874910D52D3051, 0xC0874910D52D3051, 0xC0874910D52D3051
	.c36: DQ 0x40862E42FEFA39EF, 0x40862E42FEFA39EF, 0x40862E42FEFA39EF, 0x40862E42FEFA39EF
	.c37: DQ 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000


%ifidn __OUTPUT_FORMAT__, elf64
section .text.SandyBridge progbits alloc exec nowrite align=16
global _yepMath_Exp_V64f_V64f_SandyBridge
_yepMath_Exp_V64f_V64f_SandyBridge:
%else
section .text
global __yepMath_Exp_V64f_V64f_SandyBridge
__yepMath_Exp_V64f_V64f_SandyBridge:
%endif
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 896
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm8, [rdi]
	VMOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c0]
	VMULSD xmm10, xmm8, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c1]
	VADDSD xmm10, xmm10, xmm9
	VPSLLQ xmm11, xmm10, 52
	VSUBSD xmm10, xmm10, xmm9
	VMULSD xmm9, xmm10, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c2]
	VADDSD xmm9, xmm9, xmm8
	VMULSD xmm12, xmm10, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c3]
	VADDSD xmm9, xmm9, xmm12
	VPMINSD xmm10, xmm11,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c4]
	VPMAXSD xmm10, xmm10,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c5]
	VPSUBD xmm11, xmm11, xmm10
	VMOVDQA xmm12,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c4]
	VPADDD xmm10, xmm10, xmm12
	VPADDD xmm11, xmm11, xmm12
	VMOVSD xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c6]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c7]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c8]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c9]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c10]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c11]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c12]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c13]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c14]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c15]
	VMULSD xmm12, xmm12, xmm9
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, xmm9
	VMULSD xmm12, xmm12, xmm10
	VADDSD xmm12, xmm12, xmm10
	VMULSD xmm12, xmm12, xmm11
	VCMPLTSD xmm9, xmm8, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c16]
	VANDNPD xmm12, xmm9, xmm12
	VCMPGTSD xmm8, xmm8, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c17]
	VBLENDVPD xmm12, xmm12,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c18], xmm8
	VMOVSD [rsi], xmm12
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB rdx, 32
	JB .process_restore
	align 32
	.process_batch_fast:
	VMOVAPD ymm8, [rdi]
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c19]
	VCMPLTPD ymm10, ymm8, ymm9
	VMOVAPS ymm11,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c20]
	VCMPGTPD ymm12, ymm8, ymm11
	VORPD ymm10, ymm10, ymm12
	VTESTPD ymm10, ymm10
	JNZ .process_batch_full
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c21]
	VMULPD ymm8, ymm8, ymm10
	VMOVAPS ymm12,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c22]
	VADDPD ymm8, ymm8, ymm12
	VMOVAPD ymm13, [byte rdi + 32]
	VCMPLTPD ymm14, ymm13, ymm9
	VCMPGTPD ymm15, ymm13, ymm11
	VORPD ymm14, ymm14, ymm15
	VTESTPD ymm14, ymm14
	JNZ .process_batch_full
	VMULPD ymm13, ymm13, ymm10
	VADDPD ymm13, ymm13, ymm12
	VMOVAPD ymm14, [byte rdi + 64]
	VCMPLTPD ymm15, ymm14, ymm9
	VCMPGTPD ymm7, ymm14, ymm11
	VORPD ymm15, ymm15, ymm7
	VTESTPD ymm15, ymm15
	JNZ .process_batch_full
	VMULPD ymm14, ymm14, ymm10
	VADDPD ymm14, ymm14, ymm12
	VMOVAPD ymm15, [byte rdi + 96]
	VCMPLTPD ymm7, ymm15, ymm9
	VCMPGTPD ymm6, ymm15, ymm11
	VORPD ymm7, ymm7, ymm6
	VTESTPD ymm7, ymm7
	JNZ .process_batch_full
	VMULPD ymm15, ymm15, ymm10
	VADDPD ymm15, ymm15, ymm12
	VMOVAPD ymm7, [dword rdi + 128]
	VCMPLTPD ymm6, ymm7, ymm9
	VCMPGTPD ymm5, ymm7, ymm11
	VORPD ymm6, ymm6, ymm5
	VTESTPD ymm6, ymm6
	JNZ .process_batch_full
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm12
	VMOVAPD ymm6, [dword rdi + 160]
	VCMPLTPD ymm5, ymm6, ymm9
	VCMPGTPD ymm4, ymm6, ymm11
	VORPD ymm5, ymm5, ymm4
	VTESTPD ymm5, ymm5
	JNZ .process_batch_full
	VMULPD ymm6, ymm6, ymm10
	VADDPD ymm6, ymm6, ymm12
	VMOVAPD ymm5, [dword rdi + 192]
	VCMPLTPD ymm4, ymm5, ymm9
	VCMPGTPD ymm3, ymm5, ymm11
	VORPD ymm4, ymm4, ymm3
	VTESTPD ymm4, ymm4
	JNZ .process_batch_full
	VMULPD ymm5, ymm5, ymm10
	VADDPD ymm5, ymm5, ymm12
	VMOVAPD ymm4, [dword rdi + 224]
	VCMPLTPD ymm9, ymm4, ymm9
	VCMPGTPD ymm11, ymm4, ymm11
	VORPD ymm9, ymm9, ymm11
	VTESTPD ymm9, ymm9
	JNZ .process_batch_full
	VMULPD ymm9, ymm4, ymm10
	VADDPD ymm9, ymm9, ymm12
	VEXTRACTF128 xmm10, ymm8, 1
	VPSLLQ xmm11, xmm8, 52
	VPSLLQ xmm10, xmm10, 52
	VSUBPD ymm8, ymm8, ymm12
	VMOVDQA xmm4,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c4]
	VPADDD xmm11, xmm11, xmm4
	VPADDD xmm10, xmm10, xmm4
	VMOVDQA   [rsp], xmm11
	VMOVDQA   [rsp + 16], xmm10
	VEXTRACTF128 xmm10, ymm13, 1
	VPSLLQ xmm11, xmm13, 52
	VPSLLQ xmm10, xmm10, 52
	VSUBPD ymm13, ymm13, ymm12
	VPADDD xmm11, xmm11, xmm4
	VPADDD xmm10, xmm10, xmm4
	VMOVDQA   [rsp + 32], xmm11
	VMOVDQA   [rsp + 48], xmm10
	VEXTRACTF128 xmm10, ymm14, 1
	VPSLLQ xmm11, xmm14, 52
	VPSLLQ xmm10, xmm10, 52
	VSUBPD ymm14, ymm14, ymm12
	VPADDD xmm11, xmm11, xmm4
	VPADDD xmm10, xmm10, xmm4
	VMOVDQA   [rsp + 64], xmm11
	VMOVDQA   [rsp + 80], xmm10
	VEXTRACTF128 xmm10, ymm15, 1
	VPSLLQ xmm11, xmm15, 52
	VPSLLQ xmm10, xmm10, 52
	VSUBPD ymm15, ymm15, ymm12
	VPADDD xmm11, xmm11, xmm4
	VPADDD xmm10, xmm10, xmm4
	VMOVDQA   [rsp + 96], xmm11
	VMOVDQA   [rsp + 112], xmm10
	VEXTRACTF128 xmm10, ymm7, 1
	VPSLLQ xmm11, xmm7, 52
	VPSLLQ xmm10, xmm10, 52
	VSUBPD ymm7, ymm7, ymm12
	VPADDD xmm11, xmm11, xmm4
	VPADDD xmm10, xmm10, xmm4
	VMOVDQA   [rsp + 128], xmm11
	VMOVDQA   [rsp + 144], xmm10
	VEXTRACTF128 xmm10, ymm6, 1
	VPSLLQ xmm11, xmm6, 52
	VPSLLQ xmm10, xmm10, 52
	VSUBPD ymm6, ymm6, ymm12
	VPADDD xmm11, xmm11, xmm4
	VPADDD xmm10, xmm10, xmm4
	VMOVDQA   [rsp + 160], xmm11
	VMOVDQA   [rsp + 176], xmm10
	VEXTRACTF128 xmm10, ymm5, 1
	VPSLLQ xmm11, xmm5, 52
	VPSLLQ xmm10, xmm10, 52
	VSUBPD ymm5, ymm5, ymm12
	VPADDD xmm11, xmm11, xmm4
	VPADDD xmm10, xmm10, xmm4
	VMOVDQA   [rsp + 192], xmm11
	VMOVDQA   [rsp + 208], xmm10
	VEXTRACTF128 xmm10, ymm9, 1
	VPSLLQ xmm11, xmm9, 52
	VPSLLQ xmm10, xmm10, 52
	VSUBPD ymm9, ymm9, ymm12
	VPADDD xmm11, xmm11, xmm4
	VPADDD xmm10, xmm10, xmm4
	VMOVDQA   [rsp + 224], xmm11
	VMOVDQA   [rsp + 240], xmm10
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c23]
	VMULPD ymm11, ymm8, ymm10
	VADDPD ymm11, ymm11, [rdi]
	VMULPD ymm12, ymm13, ymm10
	VADDPD ymm12, ymm12, [byte rdi + 32]
	VMULPD ymm4, ymm14, ymm10
	VADDPD ymm4, ymm4, [byte rdi + 64]
	VMULPD ymm3, ymm15, ymm10
	VADDPD ymm3, ymm3, [byte rdi + 96]
	VMULPD ymm2, ymm7, ymm10
	VADDPD ymm2, ymm2, [dword rdi + 128]
	VMULPD ymm1, ymm6, ymm10
	VADDPD ymm1, ymm1, [dword rdi + 160]
	VMULPD ymm0, ymm5, ymm10
	VADDPD ymm0, ymm0, [dword rdi + 192]
	VMULPD ymm10, ymm9, ymm10
	VADDPD ymm10, ymm10, [dword rdi + 224]
	VMULPD ymm8, ymm8,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm11, ymm11, ymm8
	VMULPD ymm8, ymm13,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm12, ymm12, ymm8
	VMULPD ymm8, ymm14,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm4, ymm4, ymm8
	VMULPD ymm8, ymm15,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm3, ymm3, ymm8
	VMULPD ymm8, ymm7,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm2, ymm2, ymm8
	VMOVAPD   [rsp + 256], ymm2
	VMULPD ymm8, ymm6,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm1, ymm1, ymm8
	VMULPD ymm8, ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm0, ymm0, ymm8
	VMOVAPD   [rsp + 288], ymm0
	VMULPD ymm8, ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm10, ymm10, ymm8
	VMOVAPS ymm8,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c25]
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c26]
	VMULPD ymm13, ymm8, ymm11
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm8, ymm12
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm8, ymm4
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm8, ymm3
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm6, ymm8,   [rsp + 256]
	VADDPD ymm6, ymm6, ymm9
	VMULPD ymm5, ymm8, ymm1
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm2, ymm8,   [rsp + 288]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c27]
	VMULPD ymm13, ymm13, ymm11
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm14, ymm12
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm15, ymm4
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm3
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm6, ymm6,   [rsp + 256]
	VADDPD ymm6, ymm6, ymm9
	VMULPD ymm5, ymm5, ymm1
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm2, ymm2,   [rsp + 288]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c28]
	VMULPD ymm13, ymm13, ymm11
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm14, ymm12
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm15, ymm4
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm3
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm6, ymm6,   [rsp + 256]
	VADDPD ymm6, ymm6, ymm9
	VMULPD ymm5, ymm5, ymm1
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm2, ymm2,   [rsp + 288]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c29]
	VMULPD ymm13, ymm13, ymm11
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm14, ymm12
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm15, ymm4
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm3
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm6, ymm6,   [rsp + 256]
	VADDPD ymm6, ymm6, ymm9
	VMULPD ymm5, ymm5, ymm1
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm2, ymm2,   [rsp + 288]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c30]
	VMULPD ymm13, ymm13, ymm11
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm14, ymm12
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm15, ymm4
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm3
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm6, ymm6,   [rsp + 256]
	VADDPD ymm6, ymm6, ymm9
	VMULPD ymm5, ymm5, ymm1
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm2, ymm2,   [rsp + 288]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c31]
	VMULPD ymm13, ymm13, ymm11
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm14, ymm12
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm15, ymm4
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm3
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm6, ymm6,   [rsp + 256]
	VADDPD ymm6, ymm6, ymm9
	VMULPD ymm5, ymm5, ymm1
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm2, ymm2,   [rsp + 288]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c32]
	VMULPD ymm13, ymm13, ymm11
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm14, ymm12
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm15, ymm4
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm3
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm6, ymm6,   [rsp + 256]
	VADDPD ymm6, ymm6, ymm9
	VMULPD ymm5, ymm5, ymm1
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm2, ymm2,   [rsp + 288]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c33]
	VMULPD ymm13, ymm13, ymm11
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm14, ymm12
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm15, ymm4
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm3
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm6, ymm6,   [rsp + 256]
	VADDPD ymm6, ymm6, ymm9
	VMULPD ymm5, ymm5, ymm1
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm2, ymm2,   [rsp + 288]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c34]
	VMULPD ymm13, ymm13, ymm11
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm14, ymm12
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm15, ymm4
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm3
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm6, ymm6,   [rsp + 256]
	VADDPD ymm6, ymm6, ymm9
	VMULPD ymm5, ymm5, ymm1
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm2, ymm2,   [rsp + 288]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMULPD ymm13, ymm13, ymm11
	VMULPD ymm14, ymm14, ymm12
	VMULPD ymm15, ymm15, ymm4
	VMULPD ymm7, ymm7, ymm3
	VMOVAPD ymm9,   [rsp + 256]
	VMULPD ymm6, ymm6, ymm9
	VMULPD ymm5, ymm5, ymm1
	VMOVAPD ymm0,   [rsp + 288]
	VMULPD ymm2, ymm2, ymm0
	VMULPD ymm8, ymm8, ymm10
	VMULPD ymm13, ymm13, ymm11
	VADDPD ymm13, ymm13, ymm11
	VMOVAPD ymm11,   [rsp]
	VMULPD ymm14, ymm14, ymm12
	VADDPD ymm14, ymm14, ymm12
	VMOVAPD ymm12,   [rsp + 32]
	VMULPD ymm15, ymm15, ymm4
	VADDPD ymm15, ymm15, ymm4
	VMOVAPD ymm4,   [rsp + 64]
	VMULPD ymm7, ymm7, ymm3
	VADDPD ymm7, ymm7, ymm3
	VMOVAPD ymm3,   [rsp + 96]
	VMULPD ymm6, ymm6, ymm9
	VADDPD ymm6, ymm6, ymm9
	VMOVAPD ymm9,   [rsp + 128]
	VMULPD ymm5, ymm5, ymm1
	VADDPD ymm5, ymm5, ymm1
	VMOVAPD ymm1,   [rsp + 160]
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm0
	VMOVAPD ymm0,   [rsp + 192]
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm10
	VMOVAPD ymm10,   [rsp + 224]
	VMULPD ymm13, ymm13, ymm11
	VADDPD ymm13, ymm13, ymm11
	VMOVUPD [rsi], xmm13
	VEXTRACTF128 [byte rsi + 16], ymm13, 1
	VMULPD ymm14, ymm14, ymm12
	VADDPD ymm14, ymm14, ymm12
	VMOVUPD [byte rsi + 32], xmm14
	VEXTRACTF128 [byte rsi + 48], ymm14, 1
	VMULPD ymm15, ymm15, ymm4
	VADDPD ymm15, ymm15, ymm4
	VMOVUPD [byte rsi + 64], xmm15
	VEXTRACTF128 [byte rsi + 80], ymm15, 1
	VMULPD ymm7, ymm7, ymm3
	VADDPD ymm7, ymm7, ymm3
	VMOVUPD [byte rsi + 96], xmm7
	VEXTRACTF128 [byte rsi + 112], ymm7, 1
	VMULPD ymm6, ymm6, ymm9
	VADDPD ymm6, ymm6, ymm9
	VMOVUPD [dword rsi + 128], xmm6
	VEXTRACTF128 [dword rsi + 144], ymm6, 1
	VMULPD ymm5, ymm5, ymm1
	VADDPD ymm5, ymm5, ymm1
	VMOVUPD [dword rsi + 160], xmm5
	VEXTRACTF128 [dword rsi + 176], ymm5, 1
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm0
	VMOVUPD [dword rsi + 192], xmm2
	VEXTRACTF128 [dword rsi + 208], ymm2, 1
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm10
	VMOVUPD [dword rsi + 224], xmm8
	VEXTRACTF128 [dword rsi + 240], ymm8, 1
	.process_batch_increment:
	ADD rdi, 256
	ADD rsi, 256
	SUB rdx, 32
	JAE .process_batch_fast
	.process_restore:
	ADD rdx, 32
	JZ .return_ok
	.process_single:
	VMOVSD xmm8, [rdi]
	VMOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c0]
	VMULSD xmm10, xmm8, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c1]
	VADDSD xmm10, xmm10, xmm9
	VPSLLQ xmm11, xmm10, 52
	VSUBSD xmm10, xmm10, xmm9
	VMULSD xmm9, xmm10, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c2]
	VADDSD xmm9, xmm9, xmm8
	VMULSD xmm12, xmm10, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c3]
	VADDSD xmm9, xmm9, xmm12
	VPMINSD xmm10, xmm11,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c4]
	VPMAXSD xmm10, xmm10,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c5]
	VPSUBD xmm11, xmm11, xmm10
	VMOVDQA xmm12,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c4]
	VPADDD xmm10, xmm10, xmm12
	VPADDD xmm11, xmm11, xmm12
	VMOVSD xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c6]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c7]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c8]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c9]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c10]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c11]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c12]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c13]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c14]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c15]
	VMULSD xmm12, xmm12, xmm9
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, xmm9
	VMULSD xmm12, xmm12, xmm10
	VADDSD xmm12, xmm12, xmm10
	VMULSD xmm12, xmm12, xmm11
	VCMPLTSD xmm9, xmm8, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c16]
	VANDNPD xmm12, xmm9, xmm12
	VCMPGTSD xmm8, xmm8, [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c17]
	VBLENDVPD xmm12, xmm12,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c18], xmm8
	VMOVSD [rsi], xmm12
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	MOV rsp, [dword rsp + 896]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	VMOVAPD ymm8, [rdi]
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c21]
	VMULPD ymm8, ymm8, ymm9
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c22]
	VADDPD ymm8, ymm8, ymm10
	VMOVAPD ymm11, [byte rdi + 32]
	VMULPD ymm11, ymm11, ymm9
	VADDPD ymm11, ymm11, ymm10
	VMOVAPD ymm12, [byte rdi + 64]
	VMULPD ymm12, ymm12, ymm9
	VADDPD ymm12, ymm12, ymm10
	VMOVAPD ymm13, [byte rdi + 96]
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm10
	VMOVAPD ymm14, [dword rdi + 128]
	VMULPD ymm14, ymm14, ymm9
	VADDPD ymm14, ymm14, ymm10
	VMOVAPD ymm15, [dword rdi + 160]
	VMULPD ymm15, ymm15, ymm9
	VADDPD ymm15, ymm15, ymm10
	VMOVAPD ymm7, [dword rdi + 192]
	VMULPD ymm7, ymm7, ymm9
	VADDPD ymm7, ymm7, ymm10
	VMOVAPD ymm6, [dword rdi + 224]
	VMULPD ymm9, ymm6, ymm9
	VADDPD ymm9, ymm9, ymm10
	VEXTRACTF128 xmm6, ymm8, 1
	VPSLLQ xmm5, xmm8, 52
	VPSLLQ xmm6, xmm6, 52
	VSUBPD ymm8, ymm8, ymm10
	VMOVDQA xmm4,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c4]
	VPMINSW xmm3, xmm5, xmm4
	VPMINSW xmm2, xmm6, xmm4
	VMOVDQA xmm1,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c5]
	VPMAXSW xmm3, xmm3, xmm1
	VPMAXSW xmm2, xmm2, xmm1
	VPSUBD xmm5, xmm5, xmm3
	VPSUBD xmm6, xmm6, xmm2
	VMOVDQA xmm0,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c4]
	VPADDD xmm3, xmm3, xmm0
	VPADDD xmm2, xmm2, xmm0
	VMOVDQA   [rsp + 320], xmm3
	VMOVDQA   [rsp + 336], xmm2
	VPADDD xmm5, xmm5, xmm0
	VPADDD xmm6, xmm6, xmm0
	VMOVDQA   [rsp + 352], xmm5
	VMOVDQA   [rsp + 368], xmm6
	VEXTRACTF128 xmm6, ymm11, 1
	VPSLLQ xmm5, xmm11, 52
	VPSLLQ xmm6, xmm6, 52
	VSUBPD ymm11, ymm11, ymm10
	VPMINSW xmm3, xmm5, xmm4
	VPMINSW xmm2, xmm6, xmm4
	VPMAXSW xmm3, xmm3, xmm1
	VPMAXSW xmm2, xmm2, xmm1
	VPSUBD xmm5, xmm5, xmm3
	VPSUBD xmm6, xmm6, xmm2
	VPADDD xmm3, xmm3, xmm0
	VPADDD xmm2, xmm2, xmm0
	VMOVDQA   [rsp + 384], xmm3
	VMOVDQA   [rsp + 400], xmm2
	VPADDD xmm5, xmm5, xmm0
	VPADDD xmm6, xmm6, xmm0
	VMOVDQA   [rsp + 416], xmm5
	VMOVDQA   [rsp + 432], xmm6
	VEXTRACTF128 xmm6, ymm12, 1
	VPSLLQ xmm5, xmm12, 52
	VPSLLQ xmm6, xmm6, 52
	VSUBPD ymm12, ymm12, ymm10
	VPMINSW xmm3, xmm5, xmm4
	VPMINSW xmm2, xmm6, xmm4
	VPMAXSW xmm3, xmm3, xmm1
	VPMAXSW xmm2, xmm2, xmm1
	VPSUBD xmm5, xmm5, xmm3
	VPSUBD xmm6, xmm6, xmm2
	VPADDD xmm3, xmm3, xmm0
	VPADDD xmm2, xmm2, xmm0
	VMOVDQA   [rsp + 448], xmm3
	VMOVDQA   [rsp + 464], xmm2
	VPADDD xmm5, xmm5, xmm0
	VPADDD xmm6, xmm6, xmm0
	VMOVDQA   [rsp + 480], xmm5
	VMOVDQA   [rsp + 496], xmm6
	VEXTRACTF128 xmm6, ymm13, 1
	VPSLLQ xmm5, xmm13, 52
	VPSLLQ xmm6, xmm6, 52
	VSUBPD ymm13, ymm13, ymm10
	VPMINSW xmm3, xmm5, xmm4
	VPMINSW xmm2, xmm6, xmm4
	VPMAXSW xmm3, xmm3, xmm1
	VPMAXSW xmm2, xmm2, xmm1
	VPSUBD xmm5, xmm5, xmm3
	VPSUBD xmm6, xmm6, xmm2
	VPADDD xmm3, xmm3, xmm0
	VPADDD xmm2, xmm2, xmm0
	VMOVDQA   [rsp + 512], xmm3
	VMOVDQA   [rsp + 528], xmm2
	VPADDD xmm5, xmm5, xmm0
	VPADDD xmm6, xmm6, xmm0
	VMOVDQA   [rsp + 544], xmm5
	VMOVDQA   [rsp + 560], xmm6
	VEXTRACTF128 xmm6, ymm14, 1
	VPSLLQ xmm5, xmm14, 52
	VPSLLQ xmm6, xmm6, 52
	VSUBPD ymm14, ymm14, ymm10
	VPMINSW xmm3, xmm5, xmm4
	VPMINSW xmm2, xmm6, xmm4
	VPMAXSW xmm3, xmm3, xmm1
	VPMAXSW xmm2, xmm2, xmm1
	VPSUBD xmm5, xmm5, xmm3
	VPSUBD xmm6, xmm6, xmm2
	VPADDD xmm3, xmm3, xmm0
	VPADDD xmm2, xmm2, xmm0
	VMOVDQA   [rsp + 576], xmm3
	VMOVDQA   [rsp + 592], xmm2
	VPADDD xmm5, xmm5, xmm0
	VPADDD xmm6, xmm6, xmm0
	VMOVDQA   [rsp + 608], xmm5
	VMOVDQA   [rsp + 624], xmm6
	VEXTRACTF128 xmm6, ymm15, 1
	VPSLLQ xmm5, xmm15, 52
	VPSLLQ xmm6, xmm6, 52
	VSUBPD ymm15, ymm15, ymm10
	VPMINSW xmm3, xmm5, xmm4
	VPMINSW xmm2, xmm6, xmm4
	VPMAXSW xmm3, xmm3, xmm1
	VPMAXSW xmm2, xmm2, xmm1
	VPSUBD xmm5, xmm5, xmm3
	VPSUBD xmm6, xmm6, xmm2
	VPADDD xmm3, xmm3, xmm0
	VPADDD xmm2, xmm2, xmm0
	VMOVDQA   [rsp + 640], xmm3
	VMOVDQA   [rsp + 656], xmm2
	VPADDD xmm5, xmm5, xmm0
	VPADDD xmm6, xmm6, xmm0
	VMOVDQA   [rsp + 672], xmm5
	VMOVDQA   [rsp + 688], xmm6
	VEXTRACTF128 xmm6, ymm7, 1
	VPSLLQ xmm5, xmm7, 52
	VPSLLQ xmm6, xmm6, 52
	VSUBPD ymm7, ymm7, ymm10
	VPMINSW xmm3, xmm5, xmm4
	VPMINSW xmm2, xmm6, xmm4
	VPMAXSW xmm3, xmm3, xmm1
	VPMAXSW xmm2, xmm2, xmm1
	VPSUBD xmm5, xmm5, xmm3
	VPSUBD xmm6, xmm6, xmm2
	VPADDD xmm3, xmm3, xmm0
	VPADDD xmm2, xmm2, xmm0
	VMOVDQA   [rsp + 704], xmm3
	VMOVDQA   [rsp + 720], xmm2
	VPADDD xmm5, xmm5, xmm0
	VPADDD xmm6, xmm6, xmm0
	VMOVDQA   [rsp + 736], xmm5
	VMOVDQA   [rsp + 752], xmm6
	VEXTRACTF128 xmm6, ymm9, 1
	VPSLLQ xmm5, xmm9, 52
	VPSLLQ xmm6, xmm6, 52
	VSUBPD ymm9, ymm9, ymm10
	VPMINSW xmm10, xmm5, xmm4
	VPMINSW xmm4, xmm6, xmm4
	VPMAXSW xmm10, xmm10, xmm1
	VPMAXSW xmm4, xmm4, xmm1
	VPSUBD xmm5, xmm5, xmm10
	VPSUBD xmm6, xmm6, xmm4
	VPADDD xmm10, xmm10, xmm0
	VPADDD xmm4, xmm4, xmm0
	VMOVDQA   [rsp + 768], xmm10
	VMOVDQA   [rsp + 784], xmm4
	VPADDD xmm5, xmm5, xmm0
	VPADDD xmm6, xmm6, xmm0
	VMOVDQA   [rsp + 800], xmm5
	VMOVDQA   [rsp + 816], xmm6
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c23]
	VMULPD ymm6, ymm8, ymm10
	VADDPD ymm6, ymm6, [rdi]
	VMULPD ymm5, ymm11, ymm10
	VADDPD ymm5, ymm5, [byte rdi + 32]
	VMULPD ymm4, ymm12, ymm10
	VADDPD ymm4, ymm4, [byte rdi + 64]
	VMULPD ymm3, ymm13, ymm10
	VADDPD ymm3, ymm3, [byte rdi + 96]
	VMULPD ymm2, ymm14, ymm10
	VADDPD ymm2, ymm2, [dword rdi + 128]
	VMULPD ymm1, ymm15, ymm10
	VADDPD ymm1, ymm1, [dword rdi + 160]
	VMULPD ymm0, ymm7, ymm10
	VADDPD ymm0, ymm0, [dword rdi + 192]
	VMULPD ymm10, ymm9, ymm10
	VADDPD ymm10, ymm10, [dword rdi + 224]
	VMULPD ymm8, ymm8,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm6, ymm6, ymm8
	VMULPD ymm8, ymm11,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm5, ymm5, ymm8
	VMULPD ymm8, ymm12,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm4, ymm4, ymm8
	VMULPD ymm8, ymm13,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm3, ymm3, ymm8
	VMULPD ymm8, ymm14,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm2, ymm2, ymm8
	VMOVAPD   [rsp + 832], ymm2
	VMULPD ymm8, ymm15,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm1, ymm1, ymm8
	VMULPD ymm8, ymm7,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm0, ymm0, ymm8
	VMOVAPD   [rsp + 864], ymm0
	VMULPD ymm8, ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm10, ymm10, ymm8
	VMOVAPS ymm8,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c25]
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c26]
	VMULPD ymm11, ymm8, ymm6
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm12, ymm8, ymm5
	VADDPD ymm12, ymm12, ymm9
	VMULPD ymm13, ymm8, ymm4
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm8, ymm3
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm8,   [rsp + 832]
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm8, ymm1
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm2, ymm8,   [rsp + 864]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c27]
	VMULPD ymm11, ymm11, ymm6
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm12, ymm12, ymm5
	VADDPD ymm12, ymm12, ymm9
	VMULPD ymm13, ymm13, ymm4
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm14, ymm3
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm15,   [rsp + 832]
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm1
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm2, ymm2,   [rsp + 864]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c28]
	VMULPD ymm11, ymm11, ymm6
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm12, ymm12, ymm5
	VADDPD ymm12, ymm12, ymm9
	VMULPD ymm13, ymm13, ymm4
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm14, ymm3
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm15,   [rsp + 832]
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm1
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm2, ymm2,   [rsp + 864]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c29]
	VMULPD ymm11, ymm11, ymm6
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm12, ymm12, ymm5
	VADDPD ymm12, ymm12, ymm9
	VMULPD ymm13, ymm13, ymm4
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm14, ymm3
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm15,   [rsp + 832]
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm1
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm2, ymm2,   [rsp + 864]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c30]
	VMULPD ymm11, ymm11, ymm6
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm12, ymm12, ymm5
	VADDPD ymm12, ymm12, ymm9
	VMULPD ymm13, ymm13, ymm4
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm14, ymm3
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm15,   [rsp + 832]
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm1
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm2, ymm2,   [rsp + 864]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c31]
	VMULPD ymm11, ymm11, ymm6
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm12, ymm12, ymm5
	VADDPD ymm12, ymm12, ymm9
	VMULPD ymm13, ymm13, ymm4
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm14, ymm3
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm15,   [rsp + 832]
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm1
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm2, ymm2,   [rsp + 864]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c32]
	VMULPD ymm11, ymm11, ymm6
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm12, ymm12, ymm5
	VADDPD ymm12, ymm12, ymm9
	VMULPD ymm13, ymm13, ymm4
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm14, ymm3
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm15,   [rsp + 832]
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm1
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm2, ymm2,   [rsp + 864]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c33]
	VMULPD ymm11, ymm11, ymm6
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm12, ymm12, ymm5
	VADDPD ymm12, ymm12, ymm9
	VMULPD ymm13, ymm13, ymm4
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm14, ymm3
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm15,   [rsp + 832]
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm1
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm2, ymm2,   [rsp + 864]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c34]
	VMULPD ymm11, ymm11, ymm6
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm12, ymm12, ymm5
	VADDPD ymm12, ymm12, ymm9
	VMULPD ymm13, ymm13, ymm4
	VADDPD ymm13, ymm13, ymm9
	VMULPD ymm14, ymm14, ymm3
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm15, ymm15,   [rsp + 832]
	VADDPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm1
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm2, ymm2,   [rsp + 864]
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMULPD ymm11, ymm11, ymm6
	VMULPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm4
	VMULPD ymm14, ymm14, ymm3
	VMOVAPD ymm9,   [rsp + 832]
	VMULPD ymm15, ymm15, ymm9
	VMULPD ymm7, ymm7, ymm1
	VMOVAPD ymm0,   [rsp + 864]
	VMULPD ymm2, ymm2, ymm0
	VMULPD ymm8, ymm8, ymm10
	VMULPD ymm11, ymm11, ymm6
	VADDPD ymm11, ymm11, ymm6
	VMOVAPD ymm6,   [rsp + 320]
	VMULPD ymm12, ymm12, ymm5
	VADDPD ymm12, ymm12, ymm5
	VMOVAPD ymm5,   [rsp + 384]
	VMULPD ymm13, ymm13, ymm4
	VADDPD ymm13, ymm13, ymm4
	VMOVAPD ymm4,   [rsp + 448]
	VMULPD ymm14, ymm14, ymm3
	VADDPD ymm14, ymm14, ymm3
	VMOVAPD ymm3,   [rsp + 512]
	VMULPD ymm15, ymm15, ymm9
	VADDPD ymm15, ymm15, ymm9
	VMOVAPD ymm9,   [rsp + 576]
	VMULPD ymm7, ymm7, ymm1
	VADDPD ymm7, ymm7, ymm1
	VMOVAPD ymm1,   [rsp + 640]
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm0
	VMOVAPD ymm0,   [rsp + 704]
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm10
	VMOVAPD ymm10,   [rsp + 768]
	VMULPD ymm11, ymm11, ymm6
	VADDPD ymm11, ymm11, ymm6
	VMOVAPD ymm6,   [rsp + 352]
	VMULPD ymm12, ymm12, ymm5
	VADDPD ymm12, ymm12, ymm5
	VMOVAPD ymm5,   [rsp + 416]
	VMULPD ymm13, ymm13, ymm4
	VADDPD ymm13, ymm13, ymm4
	VMOVAPD ymm4,   [rsp + 480]
	VMULPD ymm14, ymm14, ymm3
	VADDPD ymm14, ymm14, ymm3
	VMOVAPD ymm3,   [rsp + 544]
	VMULPD ymm15, ymm15, ymm9
	VADDPD ymm15, ymm15, ymm9
	VMOVAPD ymm9,   [rsp + 608]
	VMULPD ymm7, ymm7, ymm1
	VADDPD ymm7, ymm7, ymm1
	VMOVAPD ymm1,   [rsp + 672]
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm0
	VMOVAPD ymm0,   [rsp + 736]
	VMULPD ymm8, ymm8, ymm10
	VADDPD ymm8, ymm8, ymm10
	VMOVAPD ymm10,   [rsp + 800]
	VMULPD ymm11, ymm11, ymm6
	VMOVAPD ymm6, [rdi]
	VCMPLTPD ymm6, ymm6,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c35]
	VANDNPD ymm11, ymm6, ymm11
	VMULPD ymm12, ymm12, ymm5
	VMOVAPD ymm6, [byte rdi + 32]
	VMOVAPS ymm5,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c35]
	VCMPLTPD ymm6, ymm6, ymm5
	VANDNPD ymm12, ymm6, ymm12
	VMULPD ymm13, ymm13, ymm4
	VMOVAPD ymm6, [byte rdi + 64]
	VCMPLTPD ymm6, ymm6, ymm5
	VANDNPD ymm13, ymm6, ymm13
	VMULPD ymm14, ymm14, ymm3
	VMOVAPD ymm6, [byte rdi + 96]
	VCMPLTPD ymm4, ymm6, ymm5
	VANDNPD ymm14, ymm4, ymm14
	VMULPD ymm15, ymm15, ymm9
	VMOVAPD ymm9, [dword rdi + 128]
	VCMPLTPD ymm4, ymm9, ymm5
	VANDNPD ymm15, ymm4, ymm15
	VMULPD ymm7, ymm7, ymm1
	VMOVAPD ymm4, [dword rdi + 160]
	VCMPLTPD ymm3, ymm4, ymm5
	VANDNPD ymm7, ymm3, ymm7
	VMULPD ymm2, ymm2, ymm0
	VMOVAPD ymm3, [dword rdi + 192]
	VCMPLTPD ymm1, ymm3, ymm5
	VANDNPD ymm2, ymm1, ymm2
	VMULPD ymm8, ymm8, ymm10
	VMOVAPD ymm10, [dword rdi + 224]
	VCMPLTPD ymm5, ymm10, ymm5
	VANDNPD ymm8, ymm5, ymm8
	VMOVAPD ymm5, [rdi]
	VMOVAPS ymm1,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c36]
	VCMPGTPD ymm5, ymm5, ymm1
	VMOVAPS ymm0,  [rel _yepMath_Exp_V64f_V64f_SandyBridge_constants.c37]
	VBLENDVPD ymm11, ymm11, ymm0, ymm5
	VMOVUPD [rsi], xmm11
	VEXTRACTF128 [byte rsi + 16], ymm11, 1
	VMOVAPD ymm11, [byte rdi + 32]
	VCMPGTPD ymm11, ymm11, ymm1
	VBLENDVPD ymm12, ymm12, ymm0, ymm11
	VMOVUPD [byte rsi + 32], xmm12
	VEXTRACTF128 [byte rsi + 48], ymm12, 1
	VMOVAPD ymm11, [byte rdi + 64]
	VCMPGTPD ymm11, ymm11, ymm1
	VBLENDVPD ymm13, ymm13, ymm0, ymm11
	VMOVUPD [byte rsi + 64], xmm13
	VEXTRACTF128 [byte rsi + 80], ymm13, 1
	VCMPGTPD ymm11, ymm6, ymm1
	VBLENDVPD ymm14, ymm14, ymm0, ymm11
	VMOVUPD [byte rsi + 96], xmm14
	VEXTRACTF128 [byte rsi + 112], ymm14, 1
	VCMPGTPD ymm9, ymm9, ymm1
	VBLENDVPD ymm15, ymm15, ymm0, ymm9
	VMOVUPD [dword rsi + 128], xmm15
	VEXTRACTF128 [dword rsi + 144], ymm15, 1
	VCMPGTPD ymm9, ymm4, ymm1
	VBLENDVPD ymm7, ymm7, ymm0, ymm9
	VMOVUPD [dword rsi + 160], xmm7
	VEXTRACTF128 [dword rsi + 176], ymm7, 1
	VCMPGTPD ymm9, ymm3, ymm1
	VBLENDVPD ymm2, ymm2, ymm0, ymm9
	VMOVUPD [dword rsi + 192], xmm2
	VEXTRACTF128 [dword rsi + 208], ymm2, 1
	VCMPGTPD ymm9, ymm10, ymm1
	VBLENDVPD ymm8, ymm8, ymm0, ymm9
	VMOVUPD [dword rsi + 224], xmm8
	VEXTRACTF128 [dword rsi + 240], ymm8, 1
	JMP .process_batch_increment

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.Bulldozer progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Exp_V64f_V64f_Bulldozer_constants:
	.c0: DQ 0x4338000000000000
	.c1: DQ 0x3FF71547652B82FE
	.c2: DQ 0xBFE62E42FEFA39EF
	.c3: DQ 0xBC7ABC9E3B39803F
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c5: DQ 0xC020000000000000, 0xC020000000000000
	.c6: DQ 0x3E5AE9043CA87A40
	.c7: DQ 0x3E928A284098D813
	.c8: DQ 0x3EC71DE71651CE7A
	.c9: DQ 0x3EFA019A6AC02A7D
	.c10: DQ 0x3F2A01A017EEB164
	.c11: DQ 0x3F56C16C17F2BF99
	.c12: DQ 0x3F811111111173CA
	.c13: DQ 0x3FA5555555552115
	.c14: DQ 0x3FC5555555555540
	.c15: DQ 0x3FE0000000000005
	.c16: DQ 0xC0874910D52D3051
	.c17: DQ 0x40862E42FEFA39EF
	.c18: DQ 0x7FF0000000000000, 0x7FF0000000000000
	.c33: DQ 0xC0874910D52D3051, 0xC0874910D52D3051
	.c19: DQ 0x4338000000000000, 0x4338000000000000, 0x4338000000000000, 0x4338000000000000
	.c20: DQ 0x3FF71547652B82FE, 0x3FF71547652B82FE, 0x3FF71547652B82FE, 0x3FF71547652B82FE
	.c21: DQ 0xBFE62E42FEFA39EF, 0xBFE62E42FEFA39EF, 0xBFE62E42FEFA39EF, 0xBFE62E42FEFA39EF
	.c22: DQ 0xBC7ABC9E3B39803F, 0xBC7ABC9E3B39803F, 0xBC7ABC9E3B39803F, 0xBC7ABC9E3B39803F
	.c23: DQ 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40
	.c24: DQ 0x3E928A284098D813, 0x3E928A284098D813, 0x3E928A284098D813, 0x3E928A284098D813
	.c25: DQ 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A
	.c26: DQ 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D
	.c27: DQ 0x3F2A01A017EEB164, 0x3F2A01A017EEB164, 0x3F2A01A017EEB164, 0x3F2A01A017EEB164
	.c28: DQ 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99
	.c29: DQ 0x3F811111111173CA, 0x3F811111111173CA, 0x3F811111111173CA, 0x3F811111111173CA
	.c30: DQ 0x3FA5555555552115, 0x3FA5555555552115, 0x3FA5555555552115, 0x3FA5555555552115
	.c31: DQ 0x3FC5555555555540, 0x3FC5555555555540, 0x3FC5555555555540, 0x3FC5555555555540
	.c32: DQ 0x3FE0000000000005, 0x3FE0000000000005, 0x3FE0000000000005, 0x3FE0000000000005
	.c34: DQ 0x40862E42FEFA39EF, 0x40862E42FEFA39EF


%ifidn __OUTPUT_FORMAT__, elf64
section .text.Bulldozer progbits alloc exec nowrite align=16
global _yepMath_Exp_V64f_V64f_Bulldozer
_yepMath_Exp_V64f_V64f_Bulldozer:
%else
section .text
global __yepMath_Exp_V64f_V64f_Bulldozer
__yepMath_Exp_V64f_V64f_Bulldozer:
%endif
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 480
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm8, [rdi]
	VMOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c0]
	VFMADDSD xmm10, xmm8, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c1], xmm9
	VPSLLQ xmm11, xmm10, 52
	VSUBSD xmm10, xmm10, xmm9
	VFMADDSD xmm9, xmm10, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c2], xmm8
	VFMADDSD xmm9, xmm10, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c3], xmm9
	VPMINSD xmm10, xmm11,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c4]
	VPMAXSD xmm10, xmm10,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c5]
	VPSUBD xmm11, xmm11, xmm10
	VMOVDQA xmm12,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c4]
	VPADDD xmm10, xmm10, xmm12
	VPADDD xmm11, xmm11, xmm12
	VMOVSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c6]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c7]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c8]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c9]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c10]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c11]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c12]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c13]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c14]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c15]
	VMULSD xmm12, xmm12, xmm9
	VFMADDSD xmm12, xmm12, xmm9, xmm9
	VFMADDSD xmm12, xmm12, xmm10, xmm10
	VMULSD xmm12, xmm12, xmm11
	VCMPLTSD xmm9, xmm8, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c16]
	VANDNPD xmm12, xmm9, xmm12
	VCMPGTSD xmm8, xmm8, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c17]
	VBLENDVPD xmm12, xmm12,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c18], xmm8
	VMOVSD [rsi], xmm12
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB rdx, 20
	JB .process_restore
	align 32
	.process_batch_fast:
	VMOVAPS ymm8,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c19]
	VMOVAPD ymm9, [rdi]
	MOV rax, 13872817421961305113
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c20]
	VFMADDPD ymm9, ymm9, ymm10, ymm8
	MOV r10, 4649451482093607592
	VMOVAPD ymm11, [byte rdi + 32]
	MOV r11, [rdi]
	VFMADDPD ymm11, ymm11, ymm10, ymm8
	CMP r11, rax
	JA .process_batch_full
	VMOVAPD ymm12, [byte rdi + 64]
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm12, ymm12, ymm10, ymm8
	MOV r11, [byte rdi + 8]
	VMOVAPD ymm13, [byte rdi + 96]
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm13, ymm13, ymm10, ymm8
	CMP r11, r10
	JG .process_batch_full
	VMOVAPD ymm14, [dword rdi + 128]
	MOV r11, [byte rdi + 16]
	VFMADDPD ymm10, ymm14, ymm10, ymm8
	CMP r11, rax
	JA .process_batch_full
	VEXTRACTF128 xmm14, ymm9, 1
	VPSLLQ xmm15, xmm9, 52
	CMP r11, r10
	JG .process_batch_full
	VPSLLQ xmm14, xmm14, 52
	VSUBPD ymm9, ymm9, ymm8
	MOV r11, [byte rdi + 24]
	VEXTRACTF128 xmm7, ymm11, 1
	VPSLLQ xmm6, xmm11, 52
	CMP r11, rax
	JA .process_batch_full
	VPSLLQ xmm7, xmm7, 52
	VSUBPD ymm11, ymm11, ymm8
	CMP r11, r10
	JG .process_batch_full
	VEXTRACTF128 xmm5, ymm12, 1
	VPSLLQ xmm4, xmm12, 52
	MOV r11, [byte rdi + 32]
	VPSLLQ xmm5, xmm5, 52
	VSUBPD ymm12, ymm12, ymm8
	CMP r11, rax
	JA .process_batch_full
	VEXTRACTF128 xmm3, ymm13, 1
	VPSLLQ xmm2, xmm13, 52
	CMP r11, r10
	JG .process_batch_full
	VPSLLQ xmm3, xmm3, 52
	VSUBPD ymm13, ymm13, ymm8
	MOV r11, [byte rdi + 40]
	VEXTRACTF128 xmm1, ymm10, 1
	VPSLLQ xmm0, xmm10, 52
	CMP r11, rax
	JA .process_batch_full
	VPSLLQ xmm1, xmm1, 52
	VSUBPD ymm10, ymm10, ymm8
	CMP r11, r10
	JG .process_batch_full
	VMOVDQA xmm8,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c4]
	VPADDD xmm15, xmm15, xmm8
	VPADDD xmm14, xmm14, xmm8
	VMOVDQA   [rsp], xmm15
	VMOVDQA   [rsp + 16], xmm14
	VMOVAPS ymm14,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c21]
	VFMADDPD ymm15, ymm9, ymm14, [rdi]
	VPADDD xmm6, xmm6, xmm8
	VPADDD xmm7, xmm7, xmm8
	VMOVDQA   [rsp + 32], xmm6
	VMOVDQA   [rsp + 48], xmm7
	VFMADDPD ymm7, ymm11, ymm14, [byte rdi + 32]
	VPADDD xmm4, xmm4, xmm8
	VPADDD xmm5, xmm5, xmm8
	VMOVDQA   [rsp + 64], xmm4
	VMOVDQA   [rsp + 80], xmm5
	VFMADDPD ymm6, ymm12, ymm14, [byte rdi + 64]
	VPADDD xmm2, xmm2, xmm8
	VPADDD xmm3, xmm3, xmm8
	VMOVDQA   [rsp + 96], xmm2
	VMOVDQA   [rsp + 112], xmm3
	VFMADDPD ymm5, ymm13, ymm14, [byte rdi + 96]
	VPADDD xmm0, xmm0, xmm8
	VPADDD xmm1, xmm1, xmm8
	VMOVDQA   [rsp + 128], xmm0
	VMOVDQA   [rsp + 144], xmm1
	VFMADDPD ymm8, ymm10, ymm14, [dword rdi + 128]
	VMOVAPS ymm14,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c22]
	VFMADDPD ymm15, ymm9, ymm14, ymm15
	MOV r11, [byte rdi + 48]
	VFMADDPD ymm7, ymm11, ymm14, ymm7
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm6, ymm12, ymm14, ymm6
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm5, ymm13, ymm14, ymm5
	MOV r11, [byte rdi + 56]
	VFMADDPD ymm8, ymm10, ymm14, ymm8
	CMP r11, rax
	JA .process_batch_full
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c23]
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c24]
	VFMADDPD ymm11, ymm9, ymm15, ymm10
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm12, ymm9, ymm7, ymm10
	MOV r11, [byte rdi + 64]
	VFMADDPD ymm13, ymm9, ymm6, ymm10
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm14, ymm9, ymm5, ymm10
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm9, ymm9, ymm8, ymm10
	MOV r11, [byte rdi + 72]
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c25]
	VFMADDPD ymm11, ymm11, ymm15, ymm10
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm12, ymm12, ymm7, ymm10
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm13, ymm13, ymm6, ymm10
	MOV r11, [byte rdi + 80]
	VFMADDPD ymm14, ymm14, ymm5, ymm10
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm9, ymm9, ymm8, ymm10
	CMP r11, r10
	JG .process_batch_full
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c26]
	VFMADDPD ymm11, ymm11, ymm15, ymm10
	MOV r11, [byte rdi + 88]
	VFMADDPD ymm12, ymm12, ymm7, ymm10
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm13, ymm13, ymm6, ymm10
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm14, ymm14, ymm5, ymm10
	MOV r11, [byte rdi + 96]
	VFMADDPD ymm9, ymm9, ymm8, ymm10
	CMP r11, rax
	JA .process_batch_full
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c27]
	VFMADDPD ymm11, ymm11, ymm15, ymm10
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm12, ymm12, ymm7, ymm10
	MOV r11, [byte rdi + 104]
	VFMADDPD ymm13, ymm13, ymm6, ymm10
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm14, ymm14, ymm5, ymm10
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm9, ymm9, ymm8, ymm10
	MOV r11, [byte rdi + 112]
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c28]
	VFMADDPD ymm11, ymm11, ymm15, ymm10
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm12, ymm12, ymm7, ymm10
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm13, ymm13, ymm6, ymm10
	MOV r11, [byte rdi + 120]
	VFMADDPD ymm14, ymm14, ymm5, ymm10
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm9, ymm9, ymm8, ymm10
	CMP r11, r10
	JG .process_batch_full
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c29]
	VFMADDPD ymm11, ymm11, ymm15, ymm10
	MOV r11, [dword rdi + 128]
	VFMADDPD ymm12, ymm12, ymm7, ymm10
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm13, ymm13, ymm6, ymm10
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm14, ymm14, ymm5, ymm10
	MOV r11, [dword rdi + 136]
	VFMADDPD ymm9, ymm9, ymm8, ymm10
	CMP r11, rax
	JA .process_batch_full
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c30]
	VFMADDPD ymm11, ymm11, ymm15, ymm10
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm12, ymm12, ymm7, ymm10
	MOV r11, [dword rdi + 144]
	VFMADDPD ymm13, ymm13, ymm6, ymm10
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm14, ymm14, ymm5, ymm10
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm9, ymm9, ymm8, ymm10
	MOV r11, [dword rdi + 152]
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c31]
	VFMADDPD ymm11, ymm11, ymm15, ymm10
	CMP r11, rax
	JA .process_batch_full
	VFMADDPD ymm12, ymm12, ymm7, ymm10
	CMP r11, r10
	JG .process_batch_full
	VFMADDPD ymm13, ymm13, ymm6, ymm10
	VFMADDPD ymm14, ymm14, ymm5, ymm10
	VFMADDPD ymm9, ymm9, ymm8, ymm10
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c32]
	VFMADDPD ymm11, ymm11, ymm15, ymm10
	VFMADDPD ymm12, ymm12, ymm7, ymm10
	VFMADDPD ymm13, ymm13, ymm6, ymm10
	VFMADDPD ymm14, ymm14, ymm5, ymm10
	VFMADDPD ymm9, ymm9, ymm8, ymm10
	VMULPD ymm11, ymm11, ymm15
	VMULPD ymm12, ymm12, ymm7
	VMULPD ymm13, ymm13, ymm6
	VMULPD ymm14, ymm14, ymm5
	VMULPD ymm9, ymm9, ymm8
	VFMADDPD ymm11, ymm11, ymm15, ymm15
	VMOVAPD xmm10,   [rsp]
	VMOVAPD xmm15,   [rsp + 16]
	VFMADDPD ymm12, ymm12, ymm7, ymm7
	VMOVAPD xmm7,   [rsp + 32]
	VMOVAPD xmm4,   [rsp + 48]
	VFMADDPD ymm13, ymm13, ymm6, ymm6
	VMOVAPD xmm6,   [rsp + 64]
	VMOVAPD xmm3,   [rsp + 80]
	VFMADDPD ymm14, ymm14, ymm5, ymm5
	VMOVAPD xmm5,   [rsp + 96]
	VMOVAPD xmm2,   [rsp + 112]
	VFMADDPD ymm9, ymm9, ymm8, ymm8
	VMOVAPD xmm8,   [rsp + 128]
	VMOVAPD xmm1,   [rsp + 144]
	VEXTRACTF128 xmm0, ymm11, 1
	VFMADDPD xmm11, xmm11, xmm10, xmm10
	VMOVUPD [rsi], xmm11
	VFMADDPD xmm0, xmm0, xmm15, xmm15
	VMOVUPD [byte rsi + 16], xmm0
	VEXTRACTF128 xmm10, ymm12, 1
	VFMADDPD xmm12, xmm12, xmm7, xmm7
	VMOVUPD [byte rsi + 32], xmm12
	VFMADDPD xmm10, xmm10, xmm4, xmm4
	VMOVUPD [byte rsi + 48], xmm10
	VEXTRACTF128 xmm10, ymm13, 1
	VFMADDPD xmm13, xmm13, xmm6, xmm6
	VMOVUPD [byte rsi + 64], xmm13
	VFMADDPD xmm10, xmm10, xmm3, xmm3
	VMOVUPD [byte rsi + 80], xmm10
	VEXTRACTF128 xmm10, ymm14, 1
	VFMADDPD xmm14, xmm14, xmm5, xmm5
	VMOVUPD [byte rsi + 96], xmm14
	VFMADDPD xmm10, xmm10, xmm2, xmm2
	VMOVUPD [byte rsi + 112], xmm10
	VEXTRACTF128 xmm10, ymm9, 1
	VFMADDPD xmm9, xmm9, xmm8, xmm8
	VMOVUPD [dword rsi + 128], xmm9
	VFMADDPD xmm10, xmm10, xmm1, xmm1
	VMOVUPD [dword rsi + 144], xmm10
	.process_batch_increment:
	ADD rdi, 160
	ADD rsi, 160
	SUB rdx, 20
	JAE .process_batch_fast
	.process_restore:
	ADD rdx, 20
	JZ .return_ok
	.process_single:
	VMOVSD xmm8, [rdi]
	VMOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c0]
	VFMADDSD xmm10, xmm8, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c1], xmm9
	VPSLLQ xmm11, xmm10, 52
	VSUBSD xmm10, xmm10, xmm9
	VFMADDSD xmm9, xmm10, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c2], xmm8
	VFMADDSD xmm9, xmm10, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c3], xmm9
	VPMINSD xmm10, xmm11,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c4]
	VPMAXSD xmm10, xmm10,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c5]
	VPSUBD xmm11, xmm11, xmm10
	VMOVDQA xmm12,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c4]
	VPADDD xmm10, xmm10, xmm12
	VPADDD xmm11, xmm11, xmm12
	VMOVSD xmm12, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c6]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c7]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c8]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c9]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c10]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c11]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c12]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c13]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c14]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c15]
	VMULSD xmm12, xmm12, xmm9
	VFMADDSD xmm12, xmm12, xmm9, xmm9
	VFMADDSD xmm12, xmm12, xmm10, xmm10
	VMULSD xmm12, xmm12, xmm11
	VCMPLTSD xmm9, xmm8, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c16]
	VANDNPD xmm12, xmm9, xmm12
	VCMPGTSD xmm8, xmm8, [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c17]
	VBLENDVPD xmm12, xmm12,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c18], xmm8
	VMOVSD [rsi], xmm12
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	MOV rsp, [dword rsp + 480]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	VMOVAPS ymm8,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c19]
	VMOVAPD ymm9, [rdi]
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c20]
	VFMADDPD ymm9, ymm9, ymm10, ymm8
	VMOVAPD ymm11, [byte rdi + 32]
	VFMADDPD ymm11, ymm11, ymm10, ymm8
	VMOVAPD ymm12, [byte rdi + 64]
	VFMADDPD ymm12, ymm12, ymm10, ymm8
	VMOVAPD ymm13, [byte rdi + 96]
	VFMADDPD ymm13, ymm13, ymm10, ymm8
	VMOVAPD ymm14, [dword rdi + 128]
	VFMADDPD ymm10, ymm14, ymm10, ymm8
	VEXTRACTF128 xmm14, ymm9, 1
	VPSLLQ xmm15, xmm9, 52
	VPSLLQ xmm14, xmm14, 52
	VSUBPD ymm9, ymm9, ymm8
	VMOVDQA xmm7,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c4]
	VPMINSD xmm6, xmm15, xmm7
	VPMINSD xmm5, xmm14, xmm7
	VMOVDQA xmm4,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c5]
	VPMAXSD xmm6, xmm6, xmm4
	VPMAXSD xmm5, xmm5, xmm4
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c21]
	VFMADDPD ymm2, ymm9, ymm3, [rdi]
	VPSUBD xmm15, xmm15, xmm6
	VPSUBD xmm14, xmm14, xmm5
	VMOVDQA xmm1,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c4]
	VPADDD xmm6, xmm6, xmm1
	VPADDD xmm5, xmm5, xmm1
	VMOVDQA   [rsp + 160], xmm6
	VMOVDQA   [rsp + 176], xmm5
	VMOVAPS ymm6,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c22]
	VFMADDPD ymm2, ymm9, ymm6, ymm2
	VPADDD xmm15, xmm15, xmm1
	VPADDD xmm14, xmm14, xmm1
	VMOVDQA   [rsp + 192], xmm15
	VMOVDQA   [rsp + 208], xmm14
	VEXTRACTF128 xmm9, ymm11, 1
	VPSLLQ xmm14, xmm11, 52
	VPSLLQ xmm9, xmm9, 52
	VSUBPD ymm11, ymm11, ymm8
	VPMINSD xmm15, xmm14, xmm7
	VPMINSD xmm5, xmm9, xmm7
	VPMAXSD xmm15, xmm15, xmm4
	VPMAXSD xmm5, xmm5, xmm4
	VFMADDPD ymm0, ymm11, ymm3, [byte rdi + 32]
	VPSUBD xmm14, xmm14, xmm15
	VPSUBD xmm9, xmm9, xmm5
	VPADDD xmm15, xmm15, xmm1
	VPADDD xmm5, xmm5, xmm1
	VMOVDQA   [rsp + 224], xmm15
	VMOVDQA   [rsp + 240], xmm5
	VFMADDPD ymm0, ymm11, ymm6, ymm0
	VPADDD xmm14, xmm14, xmm1
	VPADDD xmm9, xmm9, xmm1
	VMOVDQA   [rsp + 256], xmm14
	VMOVDQA   [rsp + 272], xmm9
	VEXTRACTF128 xmm9, ymm12, 1
	VPSLLQ xmm11, xmm12, 52
	VPSLLQ xmm9, xmm9, 52
	VSUBPD ymm12, ymm12, ymm8
	VPMINSD xmm14, xmm11, xmm7
	VPMINSD xmm15, xmm9, xmm7
	VPMAXSD xmm14, xmm14, xmm4
	VPMAXSD xmm15, xmm15, xmm4
	VFMADDPD ymm5, ymm12, ymm3, [byte rdi + 64]
	VPSUBD xmm11, xmm11, xmm14
	VPSUBD xmm9, xmm9, xmm15
	VPADDD xmm14, xmm14, xmm1
	VPADDD xmm15, xmm15, xmm1
	VMOVDQA   [rsp + 288], xmm14
	VMOVDQA   [rsp + 304], xmm15
	VFMADDPD ymm5, ymm12, ymm6, ymm5
	VPADDD xmm11, xmm11, xmm1
	VPADDD xmm9, xmm9, xmm1
	VMOVDQA   [rsp + 320], xmm11
	VMOVDQA   [rsp + 336], xmm9
	VEXTRACTF128 xmm9, ymm13, 1
	VPSLLQ xmm11, xmm13, 52
	VPSLLQ xmm9, xmm9, 52
	VSUBPD ymm13, ymm13, ymm8
	VPMINSD xmm12, xmm11, xmm7
	VPMINSD xmm14, xmm9, xmm7
	VPMAXSD xmm12, xmm12, xmm4
	VPMAXSD xmm14, xmm14, xmm4
	VFMADDPD ymm15, ymm13, ymm3, [byte rdi + 96]
	VPSUBD xmm11, xmm11, xmm12
	VPSUBD xmm9, xmm9, xmm14
	VPADDD xmm12, xmm12, xmm1
	VPADDD xmm14, xmm14, xmm1
	VMOVDQA   [rsp + 352], xmm12
	VMOVDQA   [rsp + 368], xmm14
	VFMADDPD ymm15, ymm13, ymm6, ymm15
	VPADDD xmm11, xmm11, xmm1
	VPADDD xmm9, xmm9, xmm1
	VMOVDQA   [rsp + 384], xmm11
	VMOVDQA   [rsp + 400], xmm9
	VEXTRACTF128 xmm9, ymm10, 1
	VPSLLQ xmm11, xmm10, 52
	VPSLLQ xmm9, xmm9, 52
	VSUBPD ymm10, ymm10, ymm8
	VPMINSD xmm8, xmm11, xmm7
	VPMINSD xmm12, xmm9, xmm7
	VPMAXSD xmm8, xmm8, xmm4
	VPMAXSD xmm12, xmm12, xmm4
	VFMADDPD ymm13, ymm10, ymm3, [dword rdi + 128]
	VPSUBD xmm11, xmm11, xmm8
	VPSUBD xmm9, xmm9, xmm12
	VPADDD xmm8, xmm8, xmm1
	VPADDD xmm12, xmm12, xmm1
	VMOVDQA   [rsp + 416], xmm8
	VMOVDQA   [rsp + 432], xmm12
	VFMADDPD ymm13, ymm10, ymm6, ymm13
	VPADDD xmm11, xmm11, xmm1
	VPADDD xmm9, xmm9, xmm1
	VMOVDQA   [rsp + 448], xmm11
	VMOVDQA   [rsp + 464], xmm9
	VMOVAPS ymm8,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c23]
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c24]
	VFMADDPD ymm10, ymm8, ymm2, ymm9
	VFMADDPD ymm11, ymm8, ymm0, ymm9
	VFMADDPD ymm12, ymm8, ymm5, ymm9
	VFMADDPD ymm14, ymm8, ymm15, ymm9
	VFMADDPD ymm8, ymm8, ymm13, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c25]
	VFMADDPD ymm10, ymm10, ymm2, ymm9
	VFMADDPD ymm11, ymm11, ymm0, ymm9
	VFMADDPD ymm12, ymm12, ymm5, ymm9
	VFMADDPD ymm14, ymm14, ymm15, ymm9
	VFMADDPD ymm8, ymm8, ymm13, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c26]
	VFMADDPD ymm10, ymm10, ymm2, ymm9
	VFMADDPD ymm11, ymm11, ymm0, ymm9
	VFMADDPD ymm12, ymm12, ymm5, ymm9
	VFMADDPD ymm14, ymm14, ymm15, ymm9
	VFMADDPD ymm8, ymm8, ymm13, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c27]
	VFMADDPD ymm10, ymm10, ymm2, ymm9
	VFMADDPD ymm11, ymm11, ymm0, ymm9
	VFMADDPD ymm12, ymm12, ymm5, ymm9
	VFMADDPD ymm14, ymm14, ymm15, ymm9
	VFMADDPD ymm8, ymm8, ymm13, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c28]
	VFMADDPD ymm10, ymm10, ymm2, ymm9
	VFMADDPD ymm11, ymm11, ymm0, ymm9
	VFMADDPD ymm12, ymm12, ymm5, ymm9
	VFMADDPD ymm14, ymm14, ymm15, ymm9
	VFMADDPD ymm8, ymm8, ymm13, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c29]
	VFMADDPD ymm10, ymm10, ymm2, ymm9
	VFMADDPD ymm11, ymm11, ymm0, ymm9
	VFMADDPD ymm12, ymm12, ymm5, ymm9
	VFMADDPD ymm14, ymm14, ymm15, ymm9
	VFMADDPD ymm8, ymm8, ymm13, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c30]
	VFMADDPD ymm10, ymm10, ymm2, ymm9
	VFMADDPD ymm11, ymm11, ymm0, ymm9
	VFMADDPD ymm12, ymm12, ymm5, ymm9
	VFMADDPD ymm14, ymm14, ymm15, ymm9
	VFMADDPD ymm8, ymm8, ymm13, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c31]
	VFMADDPD ymm10, ymm10, ymm2, ymm9
	VFMADDPD ymm11, ymm11, ymm0, ymm9
	VFMADDPD ymm12, ymm12, ymm5, ymm9
	VFMADDPD ymm14, ymm14, ymm15, ymm9
	VFMADDPD ymm8, ymm8, ymm13, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c32]
	VFMADDPD ymm10, ymm10, ymm2, ymm9
	VFMADDPD ymm11, ymm11, ymm0, ymm9
	VFMADDPD ymm12, ymm12, ymm5, ymm9
	VFMADDPD ymm14, ymm14, ymm15, ymm9
	VFMADDPD ymm8, ymm8, ymm13, ymm9
	VMULPD ymm10, ymm10, ymm2
	VMULPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm5
	VMULPD ymm14, ymm14, ymm15
	VMULPD ymm8, ymm8, ymm13
	VFMADDPD ymm10, ymm10, ymm2, ymm2
	VFMADDPD ymm11, ymm11, ymm0, ymm0
	VFMADDPD ymm12, ymm12, ymm5, ymm5
	VFMADDPD ymm14, ymm14, ymm15, ymm15
	VFMADDPD ymm8, ymm8, ymm13, ymm13
	VMOVAPD ymm9,   [rsp + 160]
	VFMADDPD ymm10, ymm10, ymm9, ymm9
	VMOVAPD ymm9,   [rsp + 224]
	VFMADDPD ymm11, ymm11, ymm9, ymm9
	VMOVAPD ymm9,   [rsp + 288]
	VFMADDPD ymm12, ymm12, ymm9, ymm9
	VMOVAPD ymm9,   [rsp + 352]
	VFMADDPD ymm14, ymm14, ymm9, ymm9
	VMOVAPD ymm9,   [rsp + 416]
	VFMADDPD ymm8, ymm8, ymm9, ymm9
	VMULPD ymm10, ymm10,   [rsp + 192]
	VMULPD ymm11, ymm11,   [rsp + 256]
	VMULPD ymm12, ymm12,   [rsp + 320]
	VMULPD ymm14, ymm14,   [rsp + 384]
	VMULPD ymm8, ymm8,   [rsp + 448]
	VEXTRACTF128 xmm9, ymm10, 1
	VMOVAPD xmm13, [rdi]
	VMOVAPD xmm15, [byte rdi + 16]
	VMOVAPD xmm7,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c33]
	VCMPLTPD xmm6, xmm13, xmm7
	VCMPLTPD xmm5, xmm15, xmm7
	VMOVAPD xmm4,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c34]
	VANDNPD xmm10, xmm6, xmm10
	VANDNPD xmm9, xmm5, xmm9
	VMOVAPD xmm6,  [rel _yepMath_Exp_V64f_V64f_Bulldozer_constants.c18]
	VCMPGTPD xmm13, xmm13, xmm4
	VCMPGTPD xmm15, xmm15, xmm4
	VBLENDVPD xmm10, xmm10, xmm6, xmm13
	VBLENDVPD xmm9, xmm9, xmm6, xmm15
	VMOVUPD [rsi], xmm10
	VMOVUPD [byte rsi + 16], xmm9
	VEXTRACTF128 xmm9, ymm11, 1
	VMOVAPD xmm10, [byte rdi + 32]
	VMOVAPD xmm13, [byte rdi + 48]
	VCMPLTPD xmm15, xmm10, xmm7
	VCMPLTPD xmm5, xmm13, xmm7
	VANDNPD xmm11, xmm15, xmm11
	VANDNPD xmm9, xmm5, xmm9
	VCMPGTPD xmm10, xmm10, xmm4
	VCMPGTPD xmm13, xmm13, xmm4
	VBLENDVPD xmm11, xmm11, xmm6, xmm10
	VBLENDVPD xmm9, xmm9, xmm6, xmm13
	VMOVUPD [byte rsi + 32], xmm11
	VMOVUPD [byte rsi + 48], xmm9
	VEXTRACTF128 xmm9, ymm12, 1
	VMOVAPD xmm10, [byte rdi + 64]
	VMOVAPD xmm11, [byte rdi + 80]
	VCMPLTPD xmm13, xmm10, xmm7
	VCMPLTPD xmm15, xmm11, xmm7
	VANDNPD xmm12, xmm13, xmm12
	VANDNPD xmm9, xmm15, xmm9
	VCMPGTPD xmm10, xmm10, xmm4
	VCMPGTPD xmm11, xmm11, xmm4
	VBLENDVPD xmm12, xmm12, xmm6, xmm10
	VBLENDVPD xmm9, xmm9, xmm6, xmm11
	VMOVUPD [byte rsi + 64], xmm12
	VMOVUPD [byte rsi + 80], xmm9
	VEXTRACTF128 xmm9, ymm14, 1
	VMOVAPD xmm10, [byte rdi + 96]
	VMOVAPD xmm11, [byte rdi + 112]
	VCMPLTPD xmm12, xmm10, xmm7
	VCMPLTPD xmm13, xmm11, xmm7
	VANDNPD xmm14, xmm12, xmm14
	VANDNPD xmm9, xmm13, xmm9
	VCMPGTPD xmm10, xmm10, xmm4
	VCMPGTPD xmm11, xmm11, xmm4
	VBLENDVPD xmm14, xmm14, xmm6, xmm10
	VBLENDVPD xmm9, xmm9, xmm6, xmm11
	VMOVUPD [byte rsi + 96], xmm14
	VMOVUPD [byte rsi + 112], xmm9
	VEXTRACTF128 xmm9, ymm8, 1
	VMOVAPD xmm10, [dword rdi + 128]
	VMOVAPD xmm11, [dword rdi + 144]
	VCMPLTPD xmm12, xmm10, xmm7
	VCMPLTPD xmm13, xmm11, xmm7
	VANDNPD xmm8, xmm12, xmm8
	VANDNPD xmm9, xmm13, xmm9
	VCMPGTPD xmm10, xmm10, xmm4
	VCMPGTPD xmm11, xmm11, xmm4
	VBLENDVPD xmm8, xmm8, xmm6, xmm10
	VBLENDVPD xmm9, xmm9, xmm6, xmm11
	VMOVUPD [dword rsi + 128], xmm8
	VMOVUPD [dword rsi + 144], xmm9
	JMP .process_batch_increment

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.Haswell progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Exp_V64f_V64f_Haswell_constants:
	.c0: DQ 0x4338000000000000
	.c1: DQ 0x3FF71547652B82FE
	.c2: DQ 0xBFE62E42FEFA39EF
	.c3: DQ 0xBC7ABC9E3B39803F
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c5: DQ 0xC020000000000000, 0xC020000000000000
	.c6: DQ 0x3E5AE9043CA87A40
	.c7: DQ 0x3E928A284098D813
	.c8: DQ 0x3EC71DE71651CE7A
	.c9: DQ 0x3EFA019A6AC02A7D
	.c10: DQ 0x3F2A01A017EEB164
	.c11: DQ 0x3F56C16C17F2BF99
	.c12: DQ 0x3F811111111173CA
	.c13: DQ 0x3FA5555555552115
	.c14: DQ 0x3FC5555555555540
	.c15: DQ 0x3FE0000000000005
	.c16: DQ 0xC0874910D52D3051
	.c17: DQ 0x40862E42FEFA39EF
	.c18: DQ 0x7FF0000000000000, 0x7FF0000000000000
	ALIGN 32
	.c19: DQ 0xC08625F1A5DA9C19, 0xC08625F1A5DA9C19, 0xC08625F1A5DA9C19, 0xC08625F1A5DA9C19
	.c20: DQ 0x40862B7D369A5AA8, 0x40862B7D369A5AA8, 0x40862B7D369A5AA8, 0x40862B7D369A5AA8
	.c21: DQ 0x3FF71547652B82FE, 0x3FF71547652B82FE, 0x3FF71547652B82FE, 0x3FF71547652B82FE
	.c22: DQ 0x4338000000000000, 0x4338000000000000, 0x4338000000000000, 0x4338000000000000
	.c23: DQ 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000
	.c24: DQ 0xBFE62E42FEFA39EF, 0xBFE62E42FEFA39EF, 0xBFE62E42FEFA39EF, 0xBFE62E42FEFA39EF
	.c25: DQ 0xBC7ABC9E3B39803F, 0xBC7ABC9E3B39803F, 0xBC7ABC9E3B39803F, 0xBC7ABC9E3B39803F
	.c26: DQ 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40, 0x3E5AE9043CA87A40
	.c27: DQ 0x3E928A284098D813, 0x3E928A284098D813, 0x3E928A284098D813, 0x3E928A284098D813
	.c28: DQ 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A, 0x3EC71DE71651CE7A
	.c29: DQ 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D, 0x3EFA019A6AC02A7D
	.c30: DQ 0x3F2A01A017EEB164, 0x3F2A01A017EEB164, 0x3F2A01A017EEB164, 0x3F2A01A017EEB164
	.c31: DQ 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99, 0x3F56C16C17F2BF99
	.c32: DQ 0x3F811111111173CA, 0x3F811111111173CA, 0x3F811111111173CA, 0x3F811111111173CA
	.c33: DQ 0x3FA5555555552115, 0x3FA5555555552115, 0x3FA5555555552115, 0x3FA5555555552115
	.c34: DQ 0x3FC5555555555540, 0x3FC5555555555540, 0x3FC5555555555540, 0x3FC5555555555540
	.c35: DQ 0x3FE0000000000005, 0x3FE0000000000005, 0x3FE0000000000005, 0x3FE0000000000005
	.c36: DQ 0xC020000000000000, 0xC020000000000000, 0xC020000000000000, 0xC020000000000000
	.c37: DQ 0xC0874910D52D3051, 0xC0874910D52D3051, 0xC0874910D52D3051, 0xC0874910D52D3051
	.c38: DQ 0x40862E42FEFA39EF, 0x40862E42FEFA39EF, 0x40862E42FEFA39EF, 0x40862E42FEFA39EF
	.c39: DQ 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000


%ifidn __OUTPUT_FORMAT__, elf64
section .text.Haswell progbits alloc exec nowrite align=16
global _yepMath_Exp_V64f_V64f_Haswell
_yepMath_Exp_V64f_V64f_Haswell:
%else
section .text
global __yepMath_Exp_V64f_V64f_Haswell
__yepMath_Exp_V64f_V64f_Haswell:
%endif
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 1280
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm8, [rdi]
	VMOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c0]
	VMOVSD xmm10, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c1]
	VFMADD132SD xmm10, xmm9, xmm8
	VPSLLQ xmm11, xmm10, 52
	VSUBSD xmm10, xmm10, xmm9
	VMOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c2]
	VFMADD132SD xmm9, xmm8, xmm10
	VFMADD231SD xmm9, xmm10, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c3]
	VPMINSD xmm10, xmm11,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c4]
	VPMAXSD xmm10, xmm10,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c5]
	VPSUBD xmm11, xmm11, xmm10
	VMOVDQA xmm12,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c4]
	VPADDD xmm10, xmm10, xmm12
	VPADDD xmm11, xmm11, xmm12
	VMOVSD xmm12, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c6]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c7]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c8]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c9]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c10]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c11]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c12]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c13]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c14]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c15]
	VMULSD xmm12, xmm12, xmm9
	VFMADD132SD xmm12, xmm9, xmm9
	VFMADD132SD xmm12, xmm10, xmm10
	VMULSD xmm12, xmm12, xmm11
	VCMPLTSD xmm9, xmm8, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c16]
	VANDNPD xmm12, xmm9, xmm12
	VCMPGTSD xmm8, xmm8, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c17]
	VBLENDVPD xmm12, xmm12,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c18], xmm8
	VMOVSD [rsi], xmm12
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB rdx, 40
	JB .process_restore
	align 32
	.process_batch_fast:
	VMOVAPD ymm8, [rdi]
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c19]
	VCMPLTPD ymm10, ymm8, ymm9
	VMOVAPS ymm11,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c20]
	VCMPGTPD ymm12, ymm8, ymm11
	VORPD ymm10, ymm10, ymm12
	VTESTPD ymm10, ymm10
	JNZ .process_batch_full
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c21]
	VMOVAPS ymm12,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c22]
	VFMADD132PD ymm8, ymm12, ymm10
	VMOVAPD ymm13, [byte rdi + 32]
	VCMPLTPD ymm14, ymm13, ymm9
	VCMPGTPD ymm15, ymm13, ymm11
	VORPD ymm14, ymm14, ymm15
	VTESTPD ymm14, ymm14
	JNZ .process_batch_full
	VFMADD132PD ymm13, ymm12, ymm10
	VMOVAPD ymm14, [byte rdi + 64]
	VCMPLTPD ymm15, ymm14, ymm9
	VCMPGTPD ymm7, ymm14, ymm11
	VORPD ymm15, ymm15, ymm7
	VTESTPD ymm15, ymm15
	JNZ .process_batch_full
	VFMADD132PD ymm14, ymm12, ymm10
	VMOVAPD ymm15, [byte rdi + 96]
	VCMPLTPD ymm7, ymm15, ymm9
	VCMPGTPD ymm6, ymm15, ymm11
	VORPD ymm7, ymm7, ymm6
	VTESTPD ymm7, ymm7
	JNZ .process_batch_full
	VFMADD132PD ymm15, ymm12, ymm10
	VMOVAPD ymm7, [dword rdi + 128]
	VCMPLTPD ymm6, ymm7, ymm9
	VCMPGTPD ymm5, ymm7, ymm11
	VORPD ymm6, ymm6, ymm5
	VTESTPD ymm6, ymm6
	JNZ .process_batch_full
	VFMADD132PD ymm7, ymm12, ymm10
	VMOVAPD ymm6, [dword rdi + 160]
	VCMPLTPD ymm5, ymm6, ymm9
	VCMPGTPD ymm4, ymm6, ymm11
	VORPD ymm5, ymm5, ymm4
	VTESTPD ymm5, ymm5
	JNZ .process_batch_full
	VFMADD132PD ymm6, ymm12, ymm10
	VMOVAPD ymm5, [dword rdi + 192]
	VCMPLTPD ymm4, ymm5, ymm9
	VCMPGTPD ymm3, ymm5, ymm11
	VORPD ymm4, ymm4, ymm3
	VTESTPD ymm4, ymm4
	JNZ .process_batch_full
	VFMADD132PD ymm5, ymm12, ymm10
	VMOVAPD ymm4, [dword rdi + 224]
	VCMPLTPD ymm3, ymm4, ymm9
	VCMPGTPD ymm2, ymm4, ymm11
	VORPD ymm3, ymm3, ymm2
	VTESTPD ymm3, ymm3
	JNZ .process_batch_full
	VFMADD132PD ymm4, ymm12, ymm10
	VMOVAPD ymm3, [dword rdi + 256]
	VCMPLTPD ymm2, ymm3, ymm9
	VCMPGTPD ymm1, ymm3, ymm11
	VORPD ymm2, ymm2, ymm1
	VTESTPD ymm2, ymm2
	JNZ .process_batch_full
	VFMADD132PD ymm3, ymm12, ymm10
	VMOVAPD ymm2, [dword rdi + 288]
	VCMPLTPD ymm9, ymm2, ymm9
	VCMPGTPD ymm11, ymm2, ymm11
	VORPD ymm9, ymm9, ymm11
	VTESTPD ymm9, ymm9
	JNZ .process_batch_full
	VFMADD132PD ymm2, ymm12, ymm10
	VPSLLQ ymm9, ymm8, 52
	VSUBPD ymm8, ymm8, ymm12
	VMOVDQA ymm10,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c23]
	VPADDD ymm9, ymm9, ymm10
	VMOVDQA   [rsp], ymm9
	VPSLLQ ymm9, ymm13, 52
	VSUBPD ymm13, ymm13, ymm12
	VPADDD ymm9, ymm9, ymm10
	VMOVDQA   [rsp + 32], ymm9
	VPSLLQ ymm9, ymm14, 52
	VSUBPD ymm14, ymm14, ymm12
	VPADDD ymm9, ymm9, ymm10
	VMOVDQA   [rsp + 64], ymm9
	VPSLLQ ymm9, ymm15, 52
	VSUBPD ymm15, ymm15, ymm12
	VPADDD ymm9, ymm9, ymm10
	VMOVDQA   [rsp + 96], ymm9
	VPSLLQ ymm9, ymm7, 52
	VSUBPD ymm7, ymm7, ymm12
	VPADDD ymm9, ymm9, ymm10
	VMOVDQA   [rsp + 128], ymm9
	VPSLLQ ymm9, ymm6, 52
	VSUBPD ymm6, ymm6, ymm12
	VPADDD ymm9, ymm9, ymm10
	VMOVDQA   [rsp + 160], ymm9
	VPSLLQ ymm9, ymm5, 52
	VSUBPD ymm5, ymm5, ymm12
	VPADDD ymm9, ymm9, ymm10
	VMOVDQA   [rsp + 192], ymm9
	VPSLLQ ymm9, ymm4, 52
	VSUBPD ymm4, ymm4, ymm12
	VPADDD ymm9, ymm9, ymm10
	VMOVDQA   [rsp + 224], ymm9
	VPSLLQ ymm9, ymm3, 52
	VSUBPD ymm3, ymm3, ymm12
	VPADDD ymm9, ymm9, ymm10
	VMOVDQA   [rsp + 256], ymm9
	VPSLLQ ymm9, ymm2, 52
	VSUBPD ymm2, ymm2, ymm12
	VPADDD ymm9, ymm9, ymm10
	VMOVDQA   [rsp + 288], ymm9
	VMOVAPD ymm9, [rdi]
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c24]
	VFMADD231PD ymm9, ymm8, ymm10
	VMOVAPS ymm11,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c25]
	VFMADD231PD ymm9, ymm8, ymm11
	VMOVAPD ymm8, [byte rdi + 32]
	VFMADD231PD ymm8, ymm13, ymm10
	VFMADD231PD ymm8, ymm13, ymm11
	VMOVAPD   [rsp + 320], ymm8
	VMOVAPD ymm12, [byte rdi + 64]
	VFMADD231PD ymm12, ymm14, ymm10
	VFMADD231PD ymm12, ymm14, ymm11
	VMOVAPD ymm13, [byte rdi + 96]
	VFMADD231PD ymm13, ymm15, ymm10
	VFMADD231PD ymm13, ymm15, ymm11
	VMOVAPD   [rsp + 352], ymm13
	VMOVAPD ymm14, [dword rdi + 128]
	VFMADD231PD ymm14, ymm7, ymm10
	VFMADD231PD ymm14, ymm7, ymm11
	VMOVAPD ymm15, [dword rdi + 160]
	VFMADD231PD ymm15, ymm6, ymm10
	VFMADD231PD ymm15, ymm6, ymm11
	VMOVAPD   [rsp + 384], ymm15
	VMOVAPD ymm7, [dword rdi + 192]
	VFMADD231PD ymm7, ymm5, ymm10
	VFMADD231PD ymm7, ymm5, ymm11
	VMOVAPD ymm6, [dword rdi + 224]
	VFMADD231PD ymm6, ymm4, ymm10
	VFMADD231PD ymm6, ymm4, ymm11
	VMOVAPD   [rsp + 416], ymm6
	VMOVAPD ymm5, [dword rdi + 256]
	VFMADD231PD ymm5, ymm3, ymm10
	VFMADD231PD ymm5, ymm3, ymm11
	VMOVAPD ymm4, [dword rdi + 288]
	VFMADD231PD ymm4, ymm2, ymm10
	VFMADD231PD ymm4, ymm2, ymm11
	VMOVAPD   [rsp + 448], ymm4
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c26]
	VMOVAPS ymm11,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c27]
	VMOVAPD ymm4, ymm10
	VFMADD132PD ymm4, ymm11, ymm9
	VMOVAPD ymm3, ymm10
	VFMADD132PD ymm3, ymm11, ymm8
	VMOVAPD ymm8, ymm10
	VFMADD132PD ymm8, ymm11, ymm12
	VMOVAPD ymm2, ymm10
	VFMADD132PD ymm2, ymm11, ymm13
	VMOVAPD ymm13, ymm10
	VFMADD132PD ymm13, ymm11, ymm14
	VMOVAPD ymm1, ymm10
	VFMADD132PD ymm1, ymm11, ymm15
	VMOVAPD ymm15, ymm10
	VFMADD132PD ymm15, ymm11, ymm7
	VMOVAPD ymm0, ymm10
	VFMADD132PD ymm0, ymm11, ymm6
	VMOVAPD ymm6, ymm10
	VFMADD132PD ymm6, ymm11, ymm5
	VFMADD132PD ymm10, ymm11,   [rsp + 448]
	VMOVAPS ymm11,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c28]
	VFMADD132PD ymm4, ymm11, ymm9
	VFMADD132PD ymm3, ymm11,   [rsp + 320]
	VFMADD132PD ymm8, ymm11, ymm12
	VFMADD132PD ymm2, ymm11,   [rsp + 352]
	VFMADD132PD ymm13, ymm11, ymm14
	VFMADD132PD ymm1, ymm11,   [rsp + 384]
	VFMADD132PD ymm15, ymm11, ymm7
	VFMADD132PD ymm0, ymm11,   [rsp + 416]
	VFMADD132PD ymm6, ymm11, ymm5
	VFMADD132PD ymm10, ymm11,   [rsp + 448]
	VMOVAPS ymm11,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c29]
	VFMADD132PD ymm4, ymm11, ymm9
	VFMADD132PD ymm3, ymm11,   [rsp + 320]
	VFMADD132PD ymm8, ymm11, ymm12
	VFMADD132PD ymm2, ymm11,   [rsp + 352]
	VFMADD132PD ymm13, ymm11, ymm14
	VFMADD132PD ymm1, ymm11,   [rsp + 384]
	VFMADD132PD ymm15, ymm11, ymm7
	VFMADD132PD ymm0, ymm11,   [rsp + 416]
	VFMADD132PD ymm6, ymm11, ymm5
	VFMADD132PD ymm10, ymm11,   [rsp + 448]
	VMOVAPS ymm11,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c30]
	VFMADD132PD ymm4, ymm11, ymm9
	VFMADD132PD ymm3, ymm11,   [rsp + 320]
	VFMADD132PD ymm8, ymm11, ymm12
	VFMADD132PD ymm2, ymm11,   [rsp + 352]
	VFMADD132PD ymm13, ymm11, ymm14
	VFMADD132PD ymm1, ymm11,   [rsp + 384]
	VFMADD132PD ymm15, ymm11, ymm7
	VFMADD132PD ymm0, ymm11,   [rsp + 416]
	VFMADD132PD ymm6, ymm11, ymm5
	VFMADD132PD ymm10, ymm11,   [rsp + 448]
	VMOVAPS ymm11,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c31]
	VFMADD132PD ymm4, ymm11, ymm9
	VFMADD132PD ymm3, ymm11,   [rsp + 320]
	VFMADD132PD ymm8, ymm11, ymm12
	VFMADD132PD ymm2, ymm11,   [rsp + 352]
	VFMADD132PD ymm13, ymm11, ymm14
	VFMADD132PD ymm1, ymm11,   [rsp + 384]
	VFMADD132PD ymm15, ymm11, ymm7
	VFMADD132PD ymm0, ymm11,   [rsp + 416]
	VFMADD132PD ymm6, ymm11, ymm5
	VFMADD132PD ymm10, ymm11,   [rsp + 448]
	VMOVAPS ymm11,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c32]
	VFMADD132PD ymm4, ymm11, ymm9
	VFMADD132PD ymm3, ymm11,   [rsp + 320]
	VFMADD132PD ymm8, ymm11, ymm12
	VFMADD132PD ymm2, ymm11,   [rsp + 352]
	VFMADD132PD ymm13, ymm11, ymm14
	VFMADD132PD ymm1, ymm11,   [rsp + 384]
	VFMADD132PD ymm15, ymm11, ymm7
	VFMADD132PD ymm0, ymm11,   [rsp + 416]
	VFMADD132PD ymm6, ymm11, ymm5
	VFMADD132PD ymm10, ymm11,   [rsp + 448]
	VMOVAPS ymm11,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c33]
	VFMADD132PD ymm4, ymm11, ymm9
	VFMADD132PD ymm3, ymm11,   [rsp + 320]
	VFMADD132PD ymm8, ymm11, ymm12
	VFMADD132PD ymm2, ymm11,   [rsp + 352]
	VFMADD132PD ymm13, ymm11, ymm14
	VFMADD132PD ymm1, ymm11,   [rsp + 384]
	VFMADD132PD ymm15, ymm11, ymm7
	VFMADD132PD ymm0, ymm11,   [rsp + 416]
	VFMADD132PD ymm6, ymm11, ymm5
	VFMADD132PD ymm10, ymm11,   [rsp + 448]
	VMOVAPS ymm11,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c34]
	VFMADD132PD ymm4, ymm11, ymm9
	VFMADD132PD ymm3, ymm11,   [rsp + 320]
	VFMADD132PD ymm8, ymm11, ymm12
	VFMADD132PD ymm2, ymm11,   [rsp + 352]
	VFMADD132PD ymm13, ymm11, ymm14
	VFMADD132PD ymm1, ymm11,   [rsp + 384]
	VFMADD132PD ymm15, ymm11, ymm7
	VFMADD132PD ymm0, ymm11,   [rsp + 416]
	VFMADD132PD ymm6, ymm11, ymm5
	VFMADD132PD ymm10, ymm11,   [rsp + 448]
	VMOVAPS ymm11,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c35]
	VFMADD132PD ymm4, ymm11, ymm9
	VFMADD132PD ymm3, ymm11,   [rsp + 320]
	VFMADD132PD ymm8, ymm11, ymm12
	VFMADD132PD ymm2, ymm11,   [rsp + 352]
	VFMADD132PD ymm13, ymm11, ymm14
	VFMADD132PD ymm1, ymm11,   [rsp + 384]
	VFMADD132PD ymm15, ymm11, ymm7
	VFMADD132PD ymm0, ymm11,   [rsp + 416]
	VFMADD132PD ymm6, ymm11, ymm5
	VFMADD132PD ymm10, ymm11,   [rsp + 448]
	VMULPD ymm4, ymm4, ymm9
	VFMADD132PD ymm4, ymm9, ymm9
	VMOVAPD ymm9,   [rsp + 320]
	VMULPD ymm3, ymm3, ymm9
	VFMADD132PD ymm3, ymm9, ymm9
	VMULPD ymm8, ymm8, ymm12
	VFMADD132PD ymm8, ymm12, ymm12
	VMOVAPD ymm9,   [rsp + 352]
	VMULPD ymm2, ymm2, ymm9
	VFMADD132PD ymm2, ymm9, ymm9
	VMULPD ymm13, ymm13, ymm14
	VFMADD132PD ymm13, ymm14, ymm14
	VMOVAPD ymm9,   [rsp + 384]
	VMULPD ymm1, ymm1, ymm9
	VFMADD132PD ymm1, ymm9, ymm9
	VMULPD ymm15, ymm15, ymm7
	VFMADD132PD ymm15, ymm7, ymm7
	VMOVAPD ymm9,   [rsp + 416]
	VMULPD ymm0, ymm0, ymm9
	VFMADD132PD ymm0, ymm9, ymm9
	VMULPD ymm6, ymm6, ymm5
	VFMADD132PD ymm6, ymm5, ymm5
	VMOVAPD ymm9,   [rsp + 448]
	VMULPD ymm10, ymm10, ymm9
	VFMADD132PD ymm10, ymm9, ymm9
	VMOVAPD ymm9,   [rsp]
	VFMADD132PD ymm4, ymm9, ymm9
	VMOVUPD [rsi], ymm4
	VMOVAPD ymm9,   [rsp + 32]
	VFMADD132PD ymm3, ymm9, ymm9
	VMOVUPD [byte rsi + 32], ymm3
	VMOVAPD ymm9,   [rsp + 64]
	VFMADD132PD ymm8, ymm9, ymm9
	VMOVUPD [byte rsi + 64], ymm8
	VMOVAPD ymm8,   [rsp + 96]
	VFMADD132PD ymm2, ymm8, ymm8
	VMOVUPD [byte rsi + 96], ymm2
	VMOVAPD ymm8,   [rsp + 128]
	VFMADD132PD ymm13, ymm8, ymm8
	VMOVUPD [dword rsi + 128], ymm13
	VMOVAPD ymm8,   [rsp + 160]
	VFMADD132PD ymm1, ymm8, ymm8
	VMOVUPD [dword rsi + 160], ymm1
	VMOVAPD ymm8,   [rsp + 192]
	VFMADD132PD ymm15, ymm8, ymm8
	VMOVUPD [dword rsi + 192], ymm15
	VMOVAPD ymm8,   [rsp + 224]
	VFMADD132PD ymm0, ymm8, ymm8
	VMOVUPD [dword rsi + 224], ymm0
	VMOVAPD ymm8,   [rsp + 256]
	VFMADD132PD ymm6, ymm8, ymm8
	VMOVUPD [dword rsi + 256], ymm6
	VMOVAPD ymm8,   [rsp + 288]
	VFMADD132PD ymm10, ymm8, ymm8
	VMOVUPD [dword rsi + 288], ymm10
	.process_batch_increment:
	ADD rdi, 320
	ADD rsi, 320
	SUB rdx, 40
	JAE .process_batch_fast
	.process_restore:
	ADD rdx, 40
	JZ .return_ok
	.process_single:
	VMOVSD xmm8, [rdi]
	VMOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c0]
	VMOVSD xmm10, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c1]
	VFMADD132SD xmm10, xmm9, xmm8
	VPSLLQ xmm11, xmm10, 52
	VSUBSD xmm10, xmm10, xmm9
	VMOVSD xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c2]
	VFMADD132SD xmm9, xmm8, xmm10
	VFMADD231SD xmm9, xmm10, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c3]
	VPMINSD xmm10, xmm11,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c4]
	VPMAXSD xmm10, xmm10,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c5]
	VPSUBD xmm11, xmm11, xmm10
	VMOVDQA xmm12,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c4]
	VPADDD xmm10, xmm10, xmm12
	VPADDD xmm11, xmm11, xmm12
	VMOVSD xmm12, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c6]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c7]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c8]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c9]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c10]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c11]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c12]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c13]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c14]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c15]
	VMULSD xmm12, xmm12, xmm9
	VFMADD132SD xmm12, xmm9, xmm9
	VFMADD132SD xmm12, xmm10, xmm10
	VMULSD xmm12, xmm12, xmm11
	VCMPLTSD xmm9, xmm8, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c16]
	VANDNPD xmm12, xmm9, xmm12
	VCMPGTSD xmm8, xmm8, [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c17]
	VBLENDVPD xmm12, xmm12,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c18], xmm8
	VMOVSD [rsi], xmm12
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	MOV rsp, [dword rsp + 1280]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	VMOVAPD ymm8, [rdi]
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c21]
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c22]
	VFMADD213PD ymm8, ymm9, ymm10
	VMOVAPD ymm11, [byte rdi + 32]
	VFMADD213PD ymm11, ymm9, ymm10
	VMOVAPD ymm12, [byte rdi + 64]
	VFMADD213PD ymm12, ymm9, ymm10
	VMOVAPD ymm13, [byte rdi + 96]
	VFMADD213PD ymm13, ymm9, ymm10
	VMOVAPD ymm14, [dword rdi + 128]
	VFMADD213PD ymm14, ymm9, ymm10
	VMOVAPD ymm15, [dword rdi + 160]
	VFMADD213PD ymm15, ymm9, ymm10
	VMOVAPD ymm7, [dword rdi + 192]
	VFMADD213PD ymm7, ymm9, ymm10
	VMOVAPD ymm6, [dword rdi + 224]
	VFMADD213PD ymm6, ymm9, ymm10
	VMOVAPD ymm5, [dword rdi + 256]
	VFMADD213PD ymm5, ymm9, ymm10
	VMOVAPD ymm4, [dword rdi + 288]
	VFMADD213PD ymm4, ymm9, ymm10
	VPSLLQ ymm9, ymm8, 52
	VSUBPD ymm8, ymm8, ymm10
	VMOVDQA ymm3,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c23]
	VPMINSW ymm2, ymm9, ymm3
	VMOVDQA ymm1,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c36]
	VPMAXSW ymm2, ymm2, ymm1
	VPSUBD ymm9, ymm9, ymm2
	VMOVDQA ymm0,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c23]
	VPADDD ymm2, ymm2, ymm0
	VMOVDQA   [rsp + 480], ymm2
	VPADDD ymm9, ymm9, ymm0
	VMOVDQA   [rsp + 512], ymm9
	VPSLLQ ymm9, ymm11, 52
	VSUBPD ymm11, ymm11, ymm10
	VPMINSW ymm2, ymm9, ymm3
	VPMAXSW ymm2, ymm2, ymm1
	VPSUBD ymm9, ymm9, ymm2
	VPADDD ymm2, ymm2, ymm0
	VMOVDQA   [rsp + 544], ymm2
	VPADDD ymm9, ymm9, ymm0
	VMOVDQA   [rsp + 576], ymm9
	VPSLLQ ymm9, ymm12, 52
	VSUBPD ymm12, ymm12, ymm10
	VPMINSW ymm2, ymm9, ymm3
	VPMAXSW ymm2, ymm2, ymm1
	VPSUBD ymm9, ymm9, ymm2
	VPADDD ymm2, ymm2, ymm0
	VMOVDQA   [rsp + 608], ymm2
	VPADDD ymm9, ymm9, ymm0
	VMOVDQA   [rsp + 640], ymm9
	VPSLLQ ymm9, ymm13, 52
	VSUBPD ymm13, ymm13, ymm10
	VPMINSW ymm2, ymm9, ymm3
	VPMAXSW ymm2, ymm2, ymm1
	VPSUBD ymm9, ymm9, ymm2
	VPADDD ymm2, ymm2, ymm0
	VMOVDQA   [rsp + 672], ymm2
	VPADDD ymm9, ymm9, ymm0
	VMOVDQA   [rsp + 704], ymm9
	VPSLLQ ymm9, ymm14, 52
	VSUBPD ymm14, ymm14, ymm10
	VPMINSW ymm2, ymm9, ymm3
	VPMAXSW ymm2, ymm2, ymm1
	VPSUBD ymm9, ymm9, ymm2
	VPADDD ymm2, ymm2, ymm0
	VMOVDQA   [rsp + 736], ymm2
	VPADDD ymm9, ymm9, ymm0
	VMOVDQA   [rsp + 768], ymm9
	VPSLLQ ymm9, ymm15, 52
	VSUBPD ymm15, ymm15, ymm10
	VPMINSW ymm2, ymm9, ymm3
	VPMAXSW ymm2, ymm2, ymm1
	VPSUBD ymm9, ymm9, ymm2
	VPADDD ymm2, ymm2, ymm0
	VMOVDQA   [rsp + 800], ymm2
	VPADDD ymm9, ymm9, ymm0
	VMOVDQA   [rsp + 832], ymm9
	VPSLLQ ymm9, ymm7, 52
	VSUBPD ymm7, ymm7, ymm10
	VPMINSW ymm2, ymm9, ymm3
	VPMAXSW ymm2, ymm2, ymm1
	VPSUBD ymm9, ymm9, ymm2
	VPADDD ymm2, ymm2, ymm0
	VMOVDQA   [rsp + 864], ymm2
	VPADDD ymm9, ymm9, ymm0
	VMOVDQA   [rsp + 896], ymm9
	VPSLLQ ymm9, ymm6, 52
	VSUBPD ymm6, ymm6, ymm10
	VPMINSW ymm2, ymm9, ymm3
	VPMAXSW ymm2, ymm2, ymm1
	VPSUBD ymm9, ymm9, ymm2
	VPADDD ymm2, ymm2, ymm0
	VMOVDQA   [rsp + 928], ymm2
	VPADDD ymm9, ymm9, ymm0
	VMOVDQA   [rsp + 960], ymm9
	VPSLLQ ymm9, ymm5, 52
	VSUBPD ymm5, ymm5, ymm10
	VPMINSW ymm2, ymm9, ymm3
	VPMAXSW ymm2, ymm2, ymm1
	VPSUBD ymm9, ymm9, ymm2
	VPADDD ymm2, ymm2, ymm0
	VMOVDQA   [rsp + 992], ymm2
	VPADDD ymm9, ymm9, ymm0
	VMOVDQA   [rsp + 1024], ymm9
	VPSLLQ ymm9, ymm4, 52
	VSUBPD ymm4, ymm4, ymm10
	VPMINSW ymm10, ymm9, ymm3
	VPMAXSW ymm10, ymm10, ymm1
	VPSUBD ymm9, ymm9, ymm10
	VPADDD ymm10, ymm10, ymm0
	VMOVDQA   [rsp + 1056], ymm10
	VPADDD ymm9, ymm9, ymm0
	VMOVDQA   [rsp + 1088], ymm9
	VMOVAPD ymm9, [rdi]
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c24]
	VFMADD231PD ymm9, ymm8, ymm10
	VMOVAPS ymm3,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c25]
	VFMADD231PD ymm9, ymm8, ymm3
	VMOVAPD ymm8, [byte rdi + 32]
	VFMADD231PD ymm8, ymm11, ymm10
	VFMADD231PD ymm8, ymm11, ymm3
	VMOVAPD   [rsp + 1120], ymm8
	VMOVAPD ymm8, [byte rdi + 64]
	VFMADD231PD ymm8, ymm12, ymm10
	VFMADD231PD ymm8, ymm12, ymm3
	VMOVAPD ymm11, [byte rdi + 96]
	VFMADD231PD ymm11, ymm13, ymm10
	VFMADD231PD ymm11, ymm13, ymm3
	VMOVAPD   [rsp + 1152], ymm11
	VMOVAPD ymm11, [dword rdi + 128]
	VFMADD231PD ymm11, ymm14, ymm10
	VFMADD231PD ymm11, ymm14, ymm3
	VMOVAPD ymm12, [dword rdi + 160]
	VFMADD231PD ymm12, ymm15, ymm10
	VFMADD231PD ymm12, ymm15, ymm3
	VMOVAPD   [rsp + 1184], ymm12
	VMOVAPD ymm12, [dword rdi + 192]
	VFMADD231PD ymm12, ymm7, ymm10
	VFMADD231PD ymm12, ymm7, ymm3
	VMOVAPD ymm13, [dword rdi + 224]
	VFMADD231PD ymm13, ymm6, ymm10
	VFMADD231PD ymm13, ymm6, ymm3
	VMOVAPD   [rsp + 1216], ymm13
	VMOVAPD ymm13, [dword rdi + 256]
	VFMADD231PD ymm13, ymm5, ymm10
	VFMADD231PD ymm13, ymm5, ymm3
	VMOVAPD ymm14, [dword rdi + 288]
	VFMADD231PD ymm14, ymm4, ymm10
	VFMADD231PD ymm14, ymm4, ymm3
	VMOVAPD   [rsp + 1248], ymm14
	VMOVAPS ymm10,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c26]
	VMOVAPS ymm14,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c27]
	VMOVAPD ymm15, ymm10
	VFMADD132PD ymm15, ymm14, ymm9
	VMOVAPD ymm7, ymm10
	VFMADD132PD ymm7, ymm14,   [rsp + 1120]
	VMOVAPD ymm6, ymm10
	VFMADD132PD ymm6, ymm14, ymm8
	VMOVAPD ymm5, ymm10
	VFMADD132PD ymm5, ymm14,   [rsp + 1152]
	VMOVAPD ymm4, ymm10
	VFMADD132PD ymm4, ymm14, ymm11
	VMOVAPD ymm3, ymm10
	VFMADD132PD ymm3, ymm14,   [rsp + 1184]
	VMOVAPD ymm2, ymm10
	VFMADD132PD ymm2, ymm14, ymm12
	VMOVAPD ymm1, ymm10
	VFMADD132PD ymm1, ymm14,   [rsp + 1216]
	VMOVAPD ymm0, ymm10
	VFMADD132PD ymm0, ymm14, ymm13
	VFMADD132PD ymm10, ymm14,   [rsp + 1248]
	VMOVAPS ymm14,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c28]
	VFMADD132PD ymm15, ymm14, ymm9
	VFMADD132PD ymm7, ymm14,   [rsp + 1120]
	VFMADD132PD ymm6, ymm14, ymm8
	VFMADD132PD ymm5, ymm14,   [rsp + 1152]
	VFMADD132PD ymm4, ymm14, ymm11
	VFMADD132PD ymm3, ymm14,   [rsp + 1184]
	VFMADD132PD ymm2, ymm14, ymm12
	VFMADD132PD ymm1, ymm14,   [rsp + 1216]
	VFMADD132PD ymm0, ymm14, ymm13
	VFMADD132PD ymm10, ymm14,   [rsp + 1248]
	VMOVAPS ymm14,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c29]
	VFMADD132PD ymm15, ymm14, ymm9
	VFMADD132PD ymm7, ymm14,   [rsp + 1120]
	VFMADD132PD ymm6, ymm14, ymm8
	VFMADD132PD ymm5, ymm14,   [rsp + 1152]
	VFMADD132PD ymm4, ymm14, ymm11
	VFMADD132PD ymm3, ymm14,   [rsp + 1184]
	VFMADD132PD ymm2, ymm14, ymm12
	VFMADD132PD ymm1, ymm14,   [rsp + 1216]
	VFMADD132PD ymm0, ymm14, ymm13
	VFMADD132PD ymm10, ymm14,   [rsp + 1248]
	VMOVAPS ymm14,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c30]
	VFMADD132PD ymm15, ymm14, ymm9
	VFMADD132PD ymm7, ymm14,   [rsp + 1120]
	VFMADD132PD ymm6, ymm14, ymm8
	VFMADD132PD ymm5, ymm14,   [rsp + 1152]
	VFMADD132PD ymm4, ymm14, ymm11
	VFMADD132PD ymm3, ymm14,   [rsp + 1184]
	VFMADD132PD ymm2, ymm14, ymm12
	VFMADD132PD ymm1, ymm14,   [rsp + 1216]
	VFMADD132PD ymm0, ymm14, ymm13
	VFMADD132PD ymm10, ymm14,   [rsp + 1248]
	VMOVAPS ymm14,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c31]
	VFMADD132PD ymm15, ymm14, ymm9
	VFMADD132PD ymm7, ymm14,   [rsp + 1120]
	VFMADD132PD ymm6, ymm14, ymm8
	VFMADD132PD ymm5, ymm14,   [rsp + 1152]
	VFMADD132PD ymm4, ymm14, ymm11
	VFMADD132PD ymm3, ymm14,   [rsp + 1184]
	VFMADD132PD ymm2, ymm14, ymm12
	VFMADD132PD ymm1, ymm14,   [rsp + 1216]
	VFMADD132PD ymm0, ymm14, ymm13
	VFMADD132PD ymm10, ymm14,   [rsp + 1248]
	VMOVAPS ymm14,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c32]
	VFMADD132PD ymm15, ymm14, ymm9
	VFMADD132PD ymm7, ymm14,   [rsp + 1120]
	VFMADD132PD ymm6, ymm14, ymm8
	VFMADD132PD ymm5, ymm14,   [rsp + 1152]
	VFMADD132PD ymm4, ymm14, ymm11
	VFMADD132PD ymm3, ymm14,   [rsp + 1184]
	VFMADD132PD ymm2, ymm14, ymm12
	VFMADD132PD ymm1, ymm14,   [rsp + 1216]
	VFMADD132PD ymm0, ymm14, ymm13
	VFMADD132PD ymm10, ymm14,   [rsp + 1248]
	VMOVAPS ymm14,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c33]
	VFMADD132PD ymm15, ymm14, ymm9
	VFMADD132PD ymm7, ymm14,   [rsp + 1120]
	VFMADD132PD ymm6, ymm14, ymm8
	VFMADD132PD ymm5, ymm14,   [rsp + 1152]
	VFMADD132PD ymm4, ymm14, ymm11
	VFMADD132PD ymm3, ymm14,   [rsp + 1184]
	VFMADD132PD ymm2, ymm14, ymm12
	VFMADD132PD ymm1, ymm14,   [rsp + 1216]
	VFMADD132PD ymm0, ymm14, ymm13
	VFMADD132PD ymm10, ymm14,   [rsp + 1248]
	VMOVAPS ymm14,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c34]
	VFMADD132PD ymm15, ymm14, ymm9
	VFMADD132PD ymm7, ymm14,   [rsp + 1120]
	VFMADD132PD ymm6, ymm14, ymm8
	VFMADD132PD ymm5, ymm14,   [rsp + 1152]
	VFMADD132PD ymm4, ymm14, ymm11
	VFMADD132PD ymm3, ymm14,   [rsp + 1184]
	VFMADD132PD ymm2, ymm14, ymm12
	VFMADD132PD ymm1, ymm14,   [rsp + 1216]
	VFMADD132PD ymm0, ymm14, ymm13
	VFMADD132PD ymm10, ymm14,   [rsp + 1248]
	VMOVAPS ymm14,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c35]
	VFMADD132PD ymm15, ymm14, ymm9
	VFMADD132PD ymm7, ymm14,   [rsp + 1120]
	VFMADD132PD ymm6, ymm14, ymm8
	VFMADD132PD ymm5, ymm14,   [rsp + 1152]
	VFMADD132PD ymm4, ymm14, ymm11
	VFMADD132PD ymm3, ymm14,   [rsp + 1184]
	VFMADD132PD ymm2, ymm14, ymm12
	VFMADD132PD ymm1, ymm14,   [rsp + 1216]
	VFMADD132PD ymm0, ymm14, ymm13
	VFMADD132PD ymm10, ymm14,   [rsp + 1248]
	VMULPD ymm15, ymm15, ymm9
	VFMADD132PD ymm15, ymm9, ymm9
	VMOVAPD ymm9,   [rsp + 1120]
	VMULPD ymm7, ymm7, ymm9
	VFMADD132PD ymm7, ymm9, ymm9
	VMULPD ymm6, ymm6, ymm8
	VFMADD132PD ymm6, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 1152]
	VMULPD ymm5, ymm5, ymm8
	VFMADD132PD ymm5, ymm8, ymm8
	VMULPD ymm4, ymm4, ymm11
	VFMADD132PD ymm4, ymm11, ymm11
	VMOVAPD ymm8,   [rsp + 1184]
	VMULPD ymm3, ymm3, ymm8
	VFMADD132PD ymm3, ymm8, ymm8
	VMULPD ymm2, ymm2, ymm12
	VFMADD132PD ymm2, ymm12, ymm12
	VMOVAPD ymm8,   [rsp + 1216]
	VMULPD ymm1, ymm1, ymm8
	VFMADD132PD ymm1, ymm8, ymm8
	VMULPD ymm0, ymm0, ymm13
	VFMADD132PD ymm0, ymm13, ymm13
	VMOVAPD ymm8,   [rsp + 1248]
	VMULPD ymm10, ymm10, ymm8
	VFMADD132PD ymm10, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 480]
	VFMADD132PD ymm15, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 544]
	VFMADD132PD ymm7, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 608]
	VFMADD132PD ymm6, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 672]
	VFMADD132PD ymm5, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 736]
	VFMADD132PD ymm4, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 800]
	VFMADD132PD ymm3, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 864]
	VFMADD132PD ymm2, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 928]
	VFMADD132PD ymm1, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 992]
	VFMADD132PD ymm0, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 1056]
	VFMADD132PD ymm10, ymm8, ymm8
	VMULPD ymm15, ymm15,   [rsp + 512]
	VMULPD ymm7, ymm7,   [rsp + 576]
	VMULPD ymm6, ymm6,   [rsp + 640]
	VMULPD ymm5, ymm5,   [rsp + 704]
	VMULPD ymm4, ymm4,   [rsp + 768]
	VMULPD ymm3, ymm3,   [rsp + 832]
	VMULPD ymm2, ymm2,   [rsp + 896]
	VMULPD ymm1, ymm1,   [rsp + 960]
	VMULPD ymm0, ymm0,   [rsp + 1024]
	VMULPD ymm10, ymm10,   [rsp + 1088]
	VMOVAPD ymm8, [rdi]
	VCMPLTPD ymm9, ymm8,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm15, ymm9, ymm15
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm15, ymm15, ymm9, ymm8
	VMOVUPD [rsi], ymm15
	VMOVAPD ymm8, [byte rdi + 32]
	VCMPLTPD ymm9, ymm8,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm7, ymm9, ymm7
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm7, ymm7, ymm9, ymm8
	VMOVUPD [byte rsi + 32], ymm7
	VMOVAPD ymm8, [byte rdi + 64]
	VCMPLTPD ymm9, ymm8,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm6, ymm9, ymm6
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm6, ymm6, ymm9, ymm8
	VMOVUPD [byte rsi + 64], ymm6
	VMOVAPD ymm8, [byte rdi + 96]
	VCMPLTPD ymm9, ymm8,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm5, ymm9, ymm5
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm5, ymm5, ymm9, ymm8
	VMOVUPD [byte rsi + 96], ymm5
	VMOVAPD ymm8, [dword rdi + 128]
	VCMPLTPD ymm9, ymm8,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm4, ymm9, ymm4
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm4, ymm4, ymm9, ymm8
	VMOVUPD [dword rsi + 128], ymm4
	VMOVAPD ymm8, [dword rdi + 160]
	VCMPLTPD ymm9, ymm8,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm3, ymm9, ymm3
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm3, ymm3, ymm9, ymm8
	VMOVUPD [dword rsi + 160], ymm3
	VMOVAPD ymm8, [dword rdi + 192]
	VCMPLTPD ymm9, ymm8,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm2, ymm9, ymm2
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm2, ymm2, ymm9, ymm8
	VMOVUPD [dword rsi + 192], ymm2
	VMOVAPD ymm8, [dword rdi + 224]
	VCMPLTPD ymm9, ymm8,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm1, ymm9, ymm1
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm1, ymm1, ymm9, ymm8
	VMOVUPD [dword rsi + 224], ymm1
	VMOVAPD ymm8, [dword rdi + 256]
	VCMPLTPD ymm9, ymm8,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm0, ymm9, ymm0
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm0, ymm0, ymm9, ymm8
	VMOVUPD [dword rsi + 256], ymm0
	VMOVAPD ymm8, [dword rdi + 288]
	VCMPLTPD ymm9, ymm8,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c37]
	VANDNPD ymm10, ymm9, ymm10
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c38]
	VCMPGTPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Exp_V64f_V64f_Haswell_constants.c39]
	VBLENDVPD ymm10, ymm10, ymm9, ymm8
	VMOVUPD [dword rsi + 288], ymm10
	JMP .process_batch_increment
