;                       Yeppp! library implementation
;                   This file is auto-generated by Peach-Py,
;        Portable Efficient Assembly Code-generator in Higher-level Python,
;                  part of the Yeppp! library infrastructure
; This file is part of Yeppp! library and licensed under the New BSD license.
; See LICENSE.txt for the full text of the license.

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.Bobcat progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Log_V64f_V64f_Bobcat_constants:
	.c0: DQ 0x4330000000000000, 0x4330000000000000
	.c1: DQ 0x4330000000000000
	.c5: DQ 0x3FF6A09E667F3BCD
	.c2: DQ 0x0000000000000432, 0x0000000000000432
	.c3: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c6: DQ 0x0010000000000000, 0x0010000000000000
	.c7: DQ 0x3FF0000000000000
	.c8: DQ 0xBF9CC4EC078138E3
	.c9: DQ 0x3FB0266CD08DB2F2
	.c10: DQ 0xBFB1654764F478EC
	.c11: DQ 0x3FAEA17E14773369
	.c12: DQ 0xBFAEED2E2BB64B2E
	.c13: DQ 0x3FB0F23916A44515
	.c14: DQ 0xBFB25480A82633AF
	.c15: DQ 0x3FB3B4ED39194B87
	.c16: DQ 0xBFB554D5ACD502AB
	.c17: DQ 0x3FB745980F3FB889
	.c18: DQ 0xBFB9999C5BE751E3
	.c19: DQ 0x3FBC71C90DB06248
	.c20: DQ 0xBFBFFFFFFBD8606D
	.c21: DQ 0x3FC249248DAE4B2A
	.c22: DQ 0xBFC55555554A6A2B
	.c23: DQ 0x3FC9999999A43E4F
	.c24: DQ 0xBFD00000000013C7
	.c25: DQ 0x3FD5555555555103
	.c26: DQ 0xBFDFFFFFFFFFFFF2
	.c27: DQ 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01
	.c28: DQ 0x4338000000000000, 0x4338000000000000
	.c29: DQ 0x3D2EF35793C76730
	.c30: DQ 0x3FE62E42FEFA3800
	.c31: DQ 0xFFF0000000000000
	.c32: DQ 0x7FF8000000000000
	.c33: DQ 0x7FF0000000000000
	ALIGN 16
	.c34: DQ 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD
	.c35: DQ 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3
	.c36: DQ 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2
	.c37: DQ 0xBFB1654764F478EC, 0xBFB1654764F478EC
	.c38: DQ 0x3FAEA17E14773369, 0x3FAEA17E14773369
	.c39: DQ 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E
	.c40: DQ 0x3FB0F23916A44515, 0x3FB0F23916A44515
	.c41: DQ 0xBFB25480A82633AF, 0xBFB25480A82633AF
	.c42: DQ 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87
	.c43: DQ 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB
	.c44: DQ 0x3FB745980F3FB889, 0x3FB745980F3FB889
	.c45: DQ 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3
	.c46: DQ 0x3FBC71C90DB06248, 0x3FBC71C90DB06248
	.c47: DQ 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D
	.c48: DQ 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A
	.c49: DQ 0xBFC55555554A6A2B, 0xBFC55555554A6A2B
	.c50: DQ 0x3FC9999999A43E4F, 0x3FC9999999A43E4F
	.c51: DQ 0xBFD00000000013C7, 0xBFD00000000013C7
	.c52: DQ 0x3FD5555555555103, 0x3FD5555555555103
	.c53: DQ 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2
	.c54: DQ 0x3D2EF35793C76730, 0x3D2EF35793C76730
	.c55: DQ 0x3FE62E42FEFA3800, 0x3FE62E42FEFA3800
	.c56: DQ 0xFFF0000000000000, 0xFFF0000000000000
	.c57: DQ 0x7FF0000000000000, 0x7FF0000000000000
	.c58: DQ 0x7FF8000000000000, 0x7FF8000000000000


%ifidn __OUTPUT_FORMAT__, elf64
section .text.Bobcat progbits alloc exec nowrite align=16
global _yepMath_Log_V64f_V64f_Bobcat
_yepMath_Log_V64f_V64f_Bobcat:
%else
section .text
global __yepMath_Log_V64f_V64f_Bobcat
__yepMath_Log_V64f_V64f_Bobcat:
%endif
	.ENTRY:
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 15
	JZ .source_16b_aligned
	.source_16b_misaligned:
	MOVSD xmm8, [rdi]
	MOVSD xmm9, xmm8
	PSRLQ xmm9, 52
	MOVSD xmm10, xmm8
	ORPS xmm10,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c0]
	SUBSD xmm10, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c1]
	PXOR xmm11, xmm11
	CMPEQSD xmm11, xmm9
	MOVDQA xmm12, xmm10
	PSRLQ xmm12, 52
	PSUBQ xmm12,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c2]
	PAND xmm12, xmm11
	POR xmm12, xmm9
	PAND xmm10, xmm11
	PANDN xmm11, xmm8
	POR xmm11, xmm10
	PAND xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c3]
	POR xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c4]
	MOVSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c5]
	CMPLTSD xmm8, xmm11
	PSUBQ xmm12, xmm8
	PAND xmm8,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c6]
	PSUBD xmm11, xmm8
	SUBSD xmm11, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c7]
	MOVSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c8]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c9]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c10]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c11]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c12]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c13]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c14]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c15]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c16]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c17]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c18]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c19]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c20]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c21]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c22]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c23]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c24]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c25]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c26]
	MULSD xmm8, xmm11
	MULSD xmm8, xmm11
	ADDSD xmm8, xmm11
	PADDQ xmm12,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c27]
	SUBSD xmm12,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c28]
	MOVSD xmm9, xmm12
	MULSD xmm9, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c29]
	ADDSD xmm9, xmm8
	MULSD xmm12, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c30]
	ADDSD xmm9, xmm12
	MOVSD xmm8, [rdi]
	PXOR xmm10, xmm10
	MOVSD xmm11, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c31]
	CMPEQSD xmm10, xmm8
	PAND xmm11, xmm10
	PANDN xmm10, xmm9
	POR xmm10, xmm11
	PSHUFLW xmm9, xmm8, 238
	PSRAD xmm9, 31
	MOVSD xmm11, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c32]
	PAND xmm11, xmm9
	PANDN xmm9, xmm10
	POR xmm9, xmm11
	MOVSD xmm10, xmm8
	CMPNLTSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c33]
	PAND xmm10, xmm8
	PANDN xmm8, xmm9
	POR xmm8, xmm10
	MOVSD [rsi], xmm8
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 15
	JNZ .source_16b_misaligned
	.source_16b_aligned:
	SUB rdx, 6
	JB .process_restore
	align 32
	.process_batch_fast:
	MOV rax, 4503599627370496
	MOV r10, 9214364837600034815
	MOVAPS xmm8, [rdi]
	MOVAPS xmm9, xmm8
	PSRLQ xmm9, 52
	MOVAPS xmm10, [byte rdi + 16]
	MOVAPS xmm11, xmm10
	PSRLQ xmm11, 52
	MOVAPS xmm12, [byte rdi + 32]
	MOVAPS xmm13, xmm12
	PSRLQ xmm13, 52
	MOVAPS xmm14,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c3]
	MOVAPS xmm15,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c4]
	MOVAPS xmm7,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c34]
	PAND xmm8, xmm14
	MOV r11, [rdi]
	POR xmm8, xmm15
	PAND xmm10, xmm14
	SUB r11, rax
	POR xmm10, xmm15
	PAND xmm12, xmm14
	CMP r11, r10
	POR xmm12, xmm15
	MOVAPS xmm14,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c6]
	MOVAPS xmm6, xmm7
	MOVAPS xmm5, xmm7
	CMPLTPD xmm7, xmm8
	PSUBQ xmm9, xmm7
	JA .process_batch_full
	PAND xmm7, xmm14
	PSUBD xmm8, xmm7
	MOV r11, [byte rdi + 8]
	CMPLTPD xmm6, xmm10
	PSUBQ xmm11, xmm6
	SUB r11, rax
	PAND xmm6, xmm14
	PSUBD xmm10, xmm6
	CMP r11, r10
	CMPLTPD xmm5, xmm12
	PSUBQ xmm13, xmm5
	JA .process_batch_full
	PAND xmm5, xmm14
	PSUBD xmm12, xmm5
	MOV r11, [byte rdi + 16]
	MOVAPS xmm14,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c35]
	SUBPD xmm8, xmm15
	SUB r11, rax
	SUBPD xmm10, xmm15
	CMP r11, r10
	SUBPD xmm12, xmm15
	JA .process_batch_full
	MOVAPS xmm15, xmm14
	MOVAPS xmm7, xmm14
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c36]
	MULPD xmm14, xmm8
	MOV r11, [byte rdi + 24]
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	SUB r11, rax
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	CMP r11, r10
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c37]
	MULPD xmm14, xmm8
	JA .process_batch_full
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	MOV r11, [byte rdi + 32]
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	SUB r11, rax
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c38]
	MULPD xmm14, xmm8
	CMP r11, r10
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	JA .process_batch_full
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	MOV r11, [byte rdi + 40]
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c39]
	MULPD xmm14, xmm8
	SUB r11, rax
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	CMP r11, r10
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	JA .process_batch_full
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c40]
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c41]
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c42]
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c43]
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c44]
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c45]
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c46]
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c47]
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c48]
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c49]
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c50]
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c51]
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c52]
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c53]
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm6
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm6
	MULPD xmm14, xmm8
	MULPD xmm15, xmm10
	MULPD xmm7, xmm12
	MOVDQA xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c27]
	MOVAPD xmm5,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c28]
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm8
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm10
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm12
	MOVAPD xmm8,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c54]
	PADDQ xmm9, xmm6
	SUBPD xmm9, xmm5
	PADDQ xmm11, xmm6
	SUBPD xmm11, xmm5
	PADDQ xmm13, xmm6
	SUBPD xmm13, xmm5
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c55]
	MOVAPS xmm12, xmm9
	MULPD xmm12, xmm8
	ADDPD xmm12, xmm14
	MOVAPS xmm14, xmm11
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm15
	MOVAPS xmm15, xmm13
	MULPD xmm15, xmm8
	ADDPD xmm15, xmm7
	MULPD xmm9, xmm10
	ADDPD xmm12, xmm9
	MOVUPS [rsi], xmm12
	MULPD xmm11, xmm10
	ADDPD xmm14, xmm11
	MOVUPS [byte rsi + 16], xmm14
	MULPD xmm13, xmm10
	ADDPD xmm15, xmm13
	MOVUPS [byte rsi + 32], xmm15
	.process_batch_increment:
	ADD rdi, 48
	ADD rsi, 48
	SUB rdx, 6
	JAE .process_batch_fast
	.process_restore:
	ADD rdx, 6
	JZ .return_ok
	.process_single:
	MOVSD xmm8, [rdi]
	MOVSD xmm9, xmm8
	PSRLQ xmm9, 52
	MOVSD xmm10, xmm8
	ORPS xmm10,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c0]
	SUBSD xmm10, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c1]
	PXOR xmm11, xmm11
	CMPEQSD xmm11, xmm9
	MOVDQA xmm12, xmm10
	PSRLQ xmm12, 52
	PSUBQ xmm12,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c2]
	PAND xmm12, xmm11
	POR xmm12, xmm9
	PAND xmm10, xmm11
	PANDN xmm11, xmm8
	POR xmm11, xmm10
	PAND xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c3]
	POR xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c4]
	MOVSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c5]
	CMPLTSD xmm8, xmm11
	PSUBQ xmm12, xmm8
	PAND xmm8,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c6]
	PSUBD xmm11, xmm8
	SUBSD xmm11, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c7]
	MOVSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c8]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c9]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c10]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c11]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c12]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c13]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c14]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c15]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c16]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c17]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c18]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c19]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c20]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c21]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c22]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c23]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c24]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c25]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c26]
	MULSD xmm8, xmm11
	MULSD xmm8, xmm11
	ADDSD xmm8, xmm11
	PADDQ xmm12,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c27]
	SUBSD xmm12,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c28]
	MOVSD xmm9, xmm12
	MULSD xmm9, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c29]
	ADDSD xmm9, xmm8
	MULSD xmm12, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c30]
	ADDSD xmm9, xmm12
	MOVSD xmm8, [rdi]
	PXOR xmm10, xmm10
	MOVSD xmm11, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c31]
	CMPEQSD xmm10, xmm8
	PAND xmm11, xmm10
	PANDN xmm10, xmm9
	POR xmm10, xmm11
	PSHUFLW xmm9, xmm8, 238
	PSRAD xmm9, 31
	MOVSD xmm11, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c32]
	PAND xmm11, xmm9
	PANDN xmm9, xmm10
	POR xmm9, xmm11
	MOVSD xmm10, xmm8
	CMPNLTSD xmm8, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c33]
	PAND xmm10, xmm8
	PANDN xmm8, xmm9
	POR xmm8, xmm10
	MOVSD [rsi], xmm8
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	MOVAPS xmm8, [rdi]
	MOVAPS xmm9, xmm8
	MOVAPS xmm10, [byte rdi + 16]
	MOVAPS xmm11, xmm10
	MOVAPS xmm12, [byte rdi + 32]
	MOVAPS xmm13, xmm12
	MOVAPS xmm14,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c0]
	PSRLQ xmm9, 52
	MOVAPS xmm15, xmm8
	PSRLQ xmm11, 52
	MOVAPS xmm7, xmm10
	PSRLQ xmm13, 52
	MOVAPS xmm6, xmm12
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c2]
	ORPS xmm15, xmm14
	SUBPD xmm15, xmm14
	ORPS xmm7, xmm14
	SUBPD xmm7, xmm14
	ORPS xmm6, xmm14
	SUBPD xmm6, xmm14
	PXOR xmm14, xmm14
	CMPEQPD xmm14, xmm9
	PXOR xmm4, xmm4
	CMPEQPD xmm4, xmm11
	PXOR xmm3, xmm3
	CMPEQPD xmm3, xmm13
	MOVDQA xmm2, xmm15
	PSRLQ xmm2, 52
	PSUBQ xmm2, xmm5
	MOVDQA xmm1, xmm7
	PSRLQ xmm1, 52
	PSUBQ xmm1, xmm5
	MOVDQA xmm0, xmm6
	PSRLQ xmm0, 52
	PSUBQ xmm0, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c3]
	PAND xmm2, xmm14
	POR xmm2, xmm9
	PAND xmm1, xmm4
	POR xmm1, xmm11
	PAND xmm0, xmm3
	POR xmm0, xmm13
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c4]
	PAND xmm15, xmm14
	PANDN xmm14, xmm8
	POR xmm14, xmm15
	PAND xmm7, xmm4
	PANDN xmm4, xmm10
	POR xmm4, xmm7
	PAND xmm6, xmm3
	PANDN xmm3, xmm12
	POR xmm3, xmm6
	MOVAPS xmm8,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c34]
	PAND xmm14, xmm5
	POR xmm14, xmm9
	PAND xmm4, xmm5
	POR xmm4, xmm9
	PAND xmm3, xmm5
	POR xmm3, xmm9
	MOVAPS xmm10,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c6]
	MOVAPS xmm11, xmm8
	MOVAPS xmm12, xmm8
	CMPLTPD xmm8, xmm14
	PSUBQ xmm2, xmm8
	PAND xmm8, xmm10
	PSUBD xmm14, xmm8
	CMPLTPD xmm11, xmm4
	PSUBQ xmm1, xmm11
	PAND xmm11, xmm10
	PSUBD xmm4, xmm11
	CMPLTPD xmm12, xmm3
	PSUBQ xmm0, xmm12
	PAND xmm12, xmm10
	PSUBD xmm3, xmm12
	MOVAPS xmm8,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c35]
	SUBPD xmm14, xmm9
	SUBPD xmm4, xmm9
	SUBPD xmm3, xmm9
	MOVAPS xmm9, xmm8
	MOVAPS xmm10, xmm8
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c36]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c37]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c38]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c39]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c40]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c41]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c42]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c43]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c44]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c45]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c46]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c47]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c48]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c49]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c50]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c51]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c52]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c53]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm11
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm11
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm11
	MULPD xmm8, xmm14
	MULPD xmm9, xmm4
	MULPD xmm10, xmm3
	MOVDQA xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c27]
	MOVAPD xmm12,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c28]
	MULPD xmm8, xmm14
	ADDPD xmm8, xmm14
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm4
	MULPD xmm10, xmm3
	ADDPD xmm10, xmm3
	MOVAPD xmm13,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c54]
	PADDQ xmm2, xmm11
	SUBPD xmm2, xmm12
	PADDQ xmm1, xmm11
	SUBPD xmm1, xmm12
	PADDQ xmm0, xmm11
	SUBPD xmm0, xmm12
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c55]
	MOVAPS xmm12, xmm2
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm8
	MOVAPS xmm8, xmm1
	MULPD xmm8, xmm13
	ADDPD xmm8, xmm9
	MOVAPS xmm9, xmm0
	MULPD xmm9, xmm13
	ADDPD xmm9, xmm10
	MULPD xmm2, xmm11
	ADDPD xmm12, xmm2
	MULPD xmm1, xmm11
	ADDPD xmm8, xmm1
	MULPD xmm0, xmm11
	ADDPD xmm9, xmm0
	MOVAPS xmm10, [rdi]
	PXOR xmm11, xmm11
	MOVAPS xmm13,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c56]
	CMPEQPD xmm11, xmm10
	PAND xmm13, xmm11
	PANDN xmm11, xmm12
	POR xmm11, xmm13
	MOVAPS xmm12, [byte rdi + 16]
	PXOR xmm13, xmm13
	MOVAPS xmm14,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c56]
	CMPEQPD xmm13, xmm12
	PAND xmm14, xmm13
	PANDN xmm13, xmm8
	POR xmm13, xmm14
	MOVAPS xmm8, [byte rdi + 32]
	PXOR xmm14, xmm14
	MOVAPS xmm15,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c56]
	CMPEQPD xmm14, xmm8
	PAND xmm15, xmm14
	PANDN xmm14, xmm9
	POR xmm14, xmm15
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c57]
	PSHUFD xmm15, xmm10, 245
	PSRAD xmm15, 31
	MOVAPS xmm7,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c58]
	PAND xmm7, xmm15
	PANDN xmm15, xmm11
	POR xmm15, xmm7
	PSHUFD xmm11, xmm12, 245
	PSRAD xmm11, 31
	MOVAPS xmm7,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c58]
	PAND xmm7, xmm11
	PANDN xmm11, xmm13
	POR xmm11, xmm7
	PSHUFD xmm13, xmm8, 245
	PSRAD xmm13, 31
	MOVAPS xmm7,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c58]
	PAND xmm7, xmm13
	PANDN xmm13, xmm14
	POR xmm13, xmm7
	MOVAPS xmm14, xmm10
	CMPNLTPD xmm10, xmm9
	PAND xmm14, xmm10
	PANDN xmm10, xmm15
	POR xmm10, xmm14
	MOVUPS [rsi], xmm10
	MOVAPS xmm10, xmm12
	CMPNLTPD xmm12, xmm9
	PAND xmm10, xmm12
	PANDN xmm12, xmm11
	POR xmm12, xmm10
	MOVUPS [byte rsi + 16], xmm12
	MOVAPS xmm10, xmm8
	CMPNLTPD xmm8, xmm9
	PAND xmm10, xmm8
	PANDN xmm8, xmm13
	POR xmm8, xmm10
	MOVUPS [byte rsi + 32], xmm8
	JMP .process_batch_increment

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.K10 progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Log_V64f_V64f_K10_constants:
	.c0: DQ 0x4330000000000000, 0x4330000000000000
	.c1: DQ 0x4330000000000000
	.c5: DQ 0x3FF6A09E667F3BCD
	.c2: DQ 0x0000000000000432, 0x0000000000000432
	.c3: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c6: DQ 0x0010000000000000, 0x0010000000000000
	.c7: DQ 0x3FF0000000000000
	.c8: DQ 0xBF9CC4EC078138E3
	.c9: DQ 0x3FB0266CD08DB2F2
	.c10: DQ 0xBFB1654764F478EC
	.c11: DQ 0x3FAEA17E14773369
	.c12: DQ 0xBFAEED2E2BB64B2E
	.c13: DQ 0x3FB0F23916A44515
	.c14: DQ 0xBFB25480A82633AF
	.c15: DQ 0x3FB3B4ED39194B87
	.c16: DQ 0xBFB554D5ACD502AB
	.c17: DQ 0x3FB745980F3FB889
	.c18: DQ 0xBFB9999C5BE751E3
	.c19: DQ 0x3FBC71C90DB06248
	.c20: DQ 0xBFBFFFFFFBD8606D
	.c21: DQ 0x3FC249248DAE4B2A
	.c22: DQ 0xBFC55555554A6A2B
	.c23: DQ 0x3FC9999999A43E4F
	.c24: DQ 0xBFD00000000013C7
	.c25: DQ 0x3FD5555555555103
	.c26: DQ 0xBFDFFFFFFFFFFFF2
	.c27: DQ 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01
	.c28: DQ 0x4338000000000000, 0x4338000000000000
	.c29: DQ 0x3D2EF35793C76730
	.c30: DQ 0x3FE62E42FEFA3800
	.c31: DQ 0xFFF0000000000000
	.c32: DQ 0x7FF8000000000000
	.c33: DQ 0x7FF0000000000000
	ALIGN 16
	.c34: DQ 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD
	.c35: DQ 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3
	.c36: DQ 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2
	.c37: DQ 0xBFB1654764F478EC, 0xBFB1654764F478EC
	.c38: DQ 0x3FAEA17E14773369, 0x3FAEA17E14773369
	.c39: DQ 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E
	.c40: DQ 0x3FB0F23916A44515, 0x3FB0F23916A44515
	.c41: DQ 0xBFB25480A82633AF, 0xBFB25480A82633AF
	.c42: DQ 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87
	.c43: DQ 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB
	.c44: DQ 0x3FB745980F3FB889, 0x3FB745980F3FB889
	.c45: DQ 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3
	.c46: DQ 0x3FBC71C90DB06248, 0x3FBC71C90DB06248
	.c47: DQ 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D
	.c48: DQ 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A
	.c49: DQ 0xBFC55555554A6A2B, 0xBFC55555554A6A2B
	.c50: DQ 0x3FC9999999A43E4F, 0x3FC9999999A43E4F
	.c51: DQ 0xBFD00000000013C7, 0xBFD00000000013C7
	.c52: DQ 0x3FD5555555555103, 0x3FD5555555555103
	.c53: DQ 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2
	.c54: DQ 0x3D2EF35793C76730, 0x3D2EF35793C76730
	.c55: DQ 0x3FE62E42FEFA3800, 0x3FE62E42FEFA3800
	.c56: DQ 0x7FF0000000000000, 0x7FF0000000000000
	.c57: DQ 0xFFF0000000000000, 0xFFF0000000000000
	.c58: DQ 0x7FF8000000000000, 0x7FF8000000000000


%ifidn __OUTPUT_FORMAT__, elf64
section .text.K10 progbits alloc exec nowrite align=16
global _yepMath_Log_V64f_V64f_K10
_yepMath_Log_V64f_V64f_K10:
%else
section .text
global __yepMath_Log_V64f_V64f_K10
__yepMath_Log_V64f_V64f_K10:
%endif
	.ENTRY:
	SUB rsp, 328
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 15
	JZ .source_16b_aligned
	.source_16b_misaligned:
	MOVSD xmm8, [rdi]
	MOVAPS xmm9, xmm8
	PSRLQ xmm9, 52
	MOVAPS xmm10, xmm8
	ORPS xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c0]
	SUBSD xmm10, [rel _yepMath_Log_V64f_V64f_K10_constants.c1]
	PXOR xmm11, xmm11
	CMPEQSD xmm11, xmm9
	MOVDQA xmm12, xmm10
	PSRLQ xmm12, 52
	PSUBQ xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm12, xmm11
	POR xmm12, xmm9
	PAND xmm10, xmm11
	PANDN xmm11, xmm8
	POR xmm11, xmm10
	PAND xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c4]
	MOVSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c5]
	CMPLTSD xmm8, xmm11
	PSUBQ xmm12, xmm8
	PAND xmm8,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm11, xmm8
	SUBSD xmm11, [rel _yepMath_Log_V64f_V64f_K10_constants.c7]
	MOVSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c8]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c9]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c10]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c11]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c12]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c13]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c14]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c15]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c16]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c17]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c18]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c19]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c20]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c21]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c22]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c23]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c24]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c25]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c26]
	MULSD xmm8, xmm11
	MULSD xmm8, xmm11
	ADDSD xmm8, xmm11
	PADDQ xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c27]
	SUBSD xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c28]
	MOVAPS xmm9, xmm12
	MULSD xmm9, [rel _yepMath_Log_V64f_V64f_K10_constants.c29]
	ADDSD xmm9, xmm8
	MULSD xmm12, [rel _yepMath_Log_V64f_V64f_K10_constants.c30]
	ADDSD xmm9, xmm12
	MOVSD xmm8, [rdi]
	PXOR xmm10, xmm10
	MOVSD xmm11, [rel _yepMath_Log_V64f_V64f_K10_constants.c31]
	CMPEQSD xmm10, xmm8
	PAND xmm11, xmm10
	PANDN xmm10, xmm9
	POR xmm10, xmm11
	PSHUFD xmm9, xmm8, 245
	PSRAD xmm9, 31
	MOVSD xmm11, [rel _yepMath_Log_V64f_V64f_K10_constants.c32]
	PAND xmm11, xmm9
	PANDN xmm9, xmm10
	POR xmm9, xmm11
	MOVAPS xmm10, xmm8
	CMPNLTSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c33]
	PAND xmm10, xmm8
	PANDN xmm8, xmm9
	POR xmm8, xmm10
	MOVSD [rsi], xmm8
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 15
	JNZ .source_16b_misaligned
	.source_16b_aligned:
	SUB rdx, 16
	JB .process_restore
	align 32
	.process_batch_fast:
	MOV rax, 4503599627370496
	MOV r10, 9214364837600034815
	MOVAPS xmm8, [rdi]
	MOVAPS xmm9, xmm8
	PSRLQ xmm9, 52
	MOVAPS xmm10, [byte rdi + 16]
	MOVAPS xmm11, xmm10
	PSRLQ xmm11, 52
	MOVAPS xmm12, [byte rdi + 32]
	MOVAPS xmm13, xmm12
	PSRLQ xmm13, 52
	MOVAPS xmm14, [byte rdi + 48]
	MOVAPS xmm15, xmm14
	PSRLQ xmm15, 52
	MOVDQA xmm7,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	PAND xmm8, xmm7
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_K10_constants.c4]
	POR xmm8, xmm6
	PAND xmm10, xmm7
	POR xmm10, xmm6
	PAND xmm12, xmm7
	POR xmm12, xmm6
	PAND xmm14, xmm7
	POR xmm14, xmm6
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm5, xmm8
	MOV r11, [rdi]
	PSUBQ xmm9, xmm5
	PAND xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm8, xmm5
	MOVAPS   [rsp], xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm9, xmm10
	SUB r11, rax
	PSUBQ xmm11, xmm9
	PAND xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm10, xmm9
	MOVAPS   [rsp + 16], xmm11
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm9, xmm12
	CMP r11, r10
	PSUBQ xmm13, xmm9
	PAND xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm12, xmm9
	MOVAPS   [rsp + 32], xmm13
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm9, xmm14
	JA .process_batch_full
	PSUBQ xmm15, xmm9
	PAND xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm14, xmm9
	MOVAPS   [rsp + 48], xmm15
	MOVAPS xmm9, [byte rdi + 64]
	MOVAPS xmm11, xmm9
	PSRLQ xmm11, 52
	MOVAPS xmm13, [byte rdi + 80]
	MOVAPS xmm15, xmm13
	PSRLQ xmm15, 52
	MOVAPS xmm5, [byte rdi + 96]
	MOVAPS xmm4, xmm5
	PSRLQ xmm4, 52
	MOVAPS xmm3, [byte rdi + 112]
	MOVAPS xmm2, xmm3
	PSRLQ xmm2, 52
	PAND xmm9, xmm7
	POR xmm9, xmm6
	PAND xmm13, xmm7
	POR xmm13, xmm6
	PAND xmm5, xmm7
	POR xmm5, xmm6
	PAND xmm3, xmm7
	POR xmm3, xmm6
	MOVAPS xmm7,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm7, xmm9
	MOV r11, [byte rdi + 8]
	PSUBQ xmm11, xmm7
	PAND xmm7,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm9, xmm7
	MOVAPS   [rsp + 64], xmm11
	MOVAPS xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm11, xmm13
	SUB r11, rax
	PSUBQ xmm15, xmm11
	PAND xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm13, xmm11
	MOVAPS   [rsp + 80], xmm15
	MOVAPS xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm11, xmm5
	CMP r11, r10
	PSUBQ xmm4, xmm11
	PAND xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm5, xmm11
	MOVAPS   [rsp + 96], xmm4
	MOVAPS xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm11, xmm3
	JA .process_batch_full
	PSUBQ xmm2, xmm11
	PAND xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm3, xmm11
	MOVAPS   [rsp + 112], xmm2
	SUBPD xmm8, xmm6
	MOV r11, [byte rdi + 16]
	MOVAPS xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c35]
	SUBPD xmm10, xmm6
	SUB r11, rax
	MOVAPS xmm15, xmm11
	SUBPD xmm12, xmm6
	CMP r11, r10
	MOVAPS xmm7, xmm11
	SUBPD xmm14, xmm6
	JA .process_batch_full
	MOVAPS xmm4, xmm11
	SUBPD xmm9, xmm6
	MOV r11, [byte rdi + 24]
	MOVAPS xmm2,  [rel _yepMath_Log_V64f_V64f_K10_constants.c35]
	SUBPD xmm13, xmm6
	SUB r11, rax
	MOVAPS xmm1, xmm2
	SUBPD xmm5, xmm6
	CMP r11, r10
	MOVAPS   [rsp + 128], xmm5
	MOVAPS xmm5, xmm2
	SUBPD xmm3, xmm6
	JA .process_batch_full
	MOVAPS   [rsp + 144], xmm3
	MOVAPS xmm6, xmm2
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c36]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MOV r11, [byte rdi + 32]
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	SUB r11, rax
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	CMP r11, r10
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	JA .process_batch_full
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MOV r11, [byte rdi + 40]
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	SUB r11, rax
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	CMP r11, r10
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	JA .process_batch_full
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c37]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c38]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c39]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c40]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c41]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c42]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c43]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c44]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c45]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c46]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c47]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c48]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c49]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c50]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c51]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c52]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c53]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm3
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm3
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm3
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm3
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm3
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm3
	MULPD xmm5,   [rsp + 128]
	ADDPD xmm5, xmm3
	MULPD xmm6,   [rsp + 144]
	ADDPD xmm6, xmm3
	MULPD xmm11, xmm8
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm8
	MULPD xmm15, xmm10
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm10
	MULPD xmm7, xmm12
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm12
	MULPD xmm4, xmm14
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm14
	MULPD xmm2, xmm9
	MULPD xmm2, xmm9
	ADDPD xmm2, xmm9
	MULPD xmm1, xmm13
	MULPD xmm1, xmm13
	ADDPD xmm1, xmm13
	MOVAPS xmm8,   [rsp + 128]
	MULPD xmm5, xmm8
	MULPD xmm5, xmm8
	ADDPD xmm5, xmm8
	MOVAPS xmm8,   [rsp + 144]
	MULPD xmm6, xmm8
	MULPD xmm6, xmm8
	ADDPD xmm6, xmm8
	MOVDQA xmm8,  [rel _yepMath_Log_V64f_V64f_K10_constants.c27]
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c28]
	MOVAPS xmm10,   [rsp]
	PADDQ xmm10, xmm8
	SUBPD xmm10, xmm9
	MOVAPS xmm12,   [rsp + 16]
	PADDQ xmm12, xmm8
	SUBPD xmm12, xmm9
	MOVAPS xmm13,   [rsp + 32]
	PADDQ xmm13, xmm8
	SUBPD xmm13, xmm9
	MOVAPS xmm14,   [rsp + 48]
	PADDQ xmm14, xmm8
	SUBPD xmm14, xmm9
	MOVAPD xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c54]
	MOVAPS xmm0, xmm10
	MULPD xmm0, xmm3
	ADDPD xmm0, xmm11
	MOVAPS xmm11, xmm12
	MULPD xmm11, xmm3
	ADDPD xmm11, xmm15
	MOVAPS xmm15, xmm13
	MULPD xmm15, xmm3
	ADDPD xmm15, xmm7
	MOVAPS xmm7, xmm14
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm4
	MOVAPD xmm4,  [rel _yepMath_Log_V64f_V64f_K10_constants.c55]
	MULPD xmm10, xmm4
	ADDPD xmm0, xmm10
	MOVUPS [rsi], xmm0
	MULPD xmm12, xmm4
	ADDPD xmm11, xmm12
	MOVUPS [byte rsi + 16], xmm11
	MULPD xmm13, xmm4
	ADDPD xmm15, xmm13
	MOVUPS [byte rsi + 32], xmm15
	MULPD xmm14, xmm4
	ADDPD xmm7, xmm14
	MOVUPS [byte rsi + 48], xmm7
	MOVAPS xmm10,   [rsp + 64]
	PADDQ xmm10, xmm8
	SUBPD xmm10, xmm9
	MOVAPS xmm11,   [rsp + 80]
	PADDQ xmm11, xmm8
	SUBPD xmm11, xmm9
	MOVAPS xmm12,   [rsp + 96]
	PADDQ xmm12, xmm8
	SUBPD xmm12, xmm9
	MOVAPS xmm13,   [rsp + 112]
	PADDQ xmm13, xmm8
	SUBPD xmm13, xmm9
	MOVAPS xmm8, xmm10
	MULPD xmm8, xmm3
	ADDPD xmm8, xmm2
	MOVAPS xmm9, xmm11
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm1
	MOVAPS xmm14, xmm12
	MULPD xmm14, xmm3
	ADDPD xmm14, xmm5
	MOVAPS xmm15, xmm13
	MULPD xmm15, xmm3
	ADDPD xmm15, xmm6
	MULPD xmm10, xmm4
	ADDPD xmm8, xmm10
	MOVUPS [byte rsi + 64], xmm8
	MULPD xmm11, xmm4
	ADDPD xmm9, xmm11
	MOVUPS [byte rsi + 80], xmm9
	MULPD xmm12, xmm4
	ADDPD xmm14, xmm12
	MOVUPS [byte rsi + 96], xmm14
	MULPD xmm13, xmm4
	ADDPD xmm15, xmm13
	MOVUPS [byte rsi + 112], xmm15
	.process_batch_increment:
	ADD rdi, 128
	ADD rsi, 128
	SUB rdx, 16
	JAE .process_batch_fast
	.process_restore:
	ADD rdx, 16
	JZ .return_ok
	.process_single:
	MOVSD xmm8, [rdi]
	MOVAPS xmm9, xmm8
	PSRLQ xmm9, 52
	MOVAPS xmm10, xmm8
	ORPS xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c0]
	SUBSD xmm10, [rel _yepMath_Log_V64f_V64f_K10_constants.c1]
	PXOR xmm11, xmm11
	CMPEQSD xmm11, xmm9
	MOVDQA xmm12, xmm10
	PSRLQ xmm12, 52
	PSUBQ xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm12, xmm11
	POR xmm12, xmm9
	PAND xmm10, xmm11
	PANDN xmm11, xmm8
	POR xmm11, xmm10
	PAND xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c4]
	MOVSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c5]
	CMPLTSD xmm8, xmm11
	PSUBQ xmm12, xmm8
	PAND xmm8,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm11, xmm8
	SUBSD xmm11, [rel _yepMath_Log_V64f_V64f_K10_constants.c7]
	MOVSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c8]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c9]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c10]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c11]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c12]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c13]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c14]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c15]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c16]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c17]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c18]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c19]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c20]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c21]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c22]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c23]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c24]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c25]
	MULSD xmm8, xmm11
	ADDSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c26]
	MULSD xmm8, xmm11
	MULSD xmm8, xmm11
	ADDSD xmm8, xmm11
	PADDQ xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c27]
	SUBSD xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c28]
	MOVAPS xmm9, xmm12
	MULSD xmm9, [rel _yepMath_Log_V64f_V64f_K10_constants.c29]
	ADDSD xmm9, xmm8
	MULSD xmm12, [rel _yepMath_Log_V64f_V64f_K10_constants.c30]
	ADDSD xmm9, xmm12
	MOVSD xmm8, [rdi]
	PXOR xmm10, xmm10
	MOVSD xmm11, [rel _yepMath_Log_V64f_V64f_K10_constants.c31]
	CMPEQSD xmm10, xmm8
	PAND xmm11, xmm10
	PANDN xmm10, xmm9
	POR xmm10, xmm11
	PSHUFD xmm9, xmm8, 245
	PSRAD xmm9, 31
	MOVSD xmm11, [rel _yepMath_Log_V64f_V64f_K10_constants.c32]
	PAND xmm11, xmm9
	PANDN xmm9, xmm10
	POR xmm9, xmm11
	MOVAPS xmm10, xmm8
	CMPNLTSD xmm8, [rel _yepMath_Log_V64f_V64f_K10_constants.c33]
	PAND xmm10, xmm8
	PANDN xmm8, xmm9
	POR xmm8, xmm10
	MOVSD [rsi], xmm8
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	ADD rsp, 328
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	MOVAPS xmm8,  [rel _yepMath_Log_V64f_V64f_K10_constants.c0]
	MOVAPS xmm9, [rdi]
	MOVAPS xmm10, xmm9
	PSRLQ xmm10, 52
	MOVAPS xmm11, [byte rdi + 16]
	MOVAPS xmm12, xmm11
	PSRLQ xmm12, 52
	MOVAPS xmm13, [byte rdi + 32]
	MOVAPS xmm14, xmm13
	PSRLQ xmm14, 52
	MOVAPS xmm15, [byte rdi + 48]
	MOVAPS xmm7, xmm15
	PSRLQ xmm7, 52
	MOVAPS xmm6, xmm9
	ORPS xmm6, xmm8
	SUBPD xmm6, xmm8
	PXOR xmm5, xmm5
	CMPEQPD xmm5, xmm10
	MOVAPS xmm4, xmm6
	PSRLQ xmm4, 52
	PSUBQ xmm4,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm4, xmm5
	POR xmm10, xmm4
	ANDPS xmm6, xmm5
	ANDNPS xmm5, xmm9
	ORPS xmm5, xmm6
	MOVAPS xmm9, xmm11
	ORPS xmm9, xmm8
	SUBPD xmm9, xmm8
	PXOR xmm6, xmm6
	CMPEQPD xmm6, xmm12
	MOVAPS xmm4, xmm9
	PSRLQ xmm4, 52
	PSUBQ xmm4,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm4, xmm6
	POR xmm12, xmm4
	ANDPS xmm9, xmm6
	ANDNPS xmm6, xmm11
	ORPS xmm6, xmm9
	MOVAPS xmm9, xmm13
	ORPS xmm9, xmm8
	SUBPD xmm9, xmm8
	PXOR xmm11, xmm11
	CMPEQPD xmm11, xmm14
	MOVAPS xmm4, xmm9
	PSRLQ xmm4, 52
	PSUBQ xmm4,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm4, xmm11
	POR xmm14, xmm4
	ANDPS xmm9, xmm11
	ANDNPS xmm11, xmm13
	ORPS xmm11, xmm9
	MOVAPS xmm9, xmm15
	ORPS xmm9, xmm8
	SUBPD xmm9, xmm8
	PXOR xmm13, xmm13
	CMPEQPD xmm13, xmm7
	MOVAPS xmm4, xmm9
	PSRLQ xmm4, 52
	PSUBQ xmm4,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm4, xmm13
	POR xmm7, xmm4
	ANDPS xmm9, xmm13
	ANDNPS xmm13, xmm15
	ORPS xmm13, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c4]
	PAND xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm5, xmm9
	PAND xmm6,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm6, xmm9
	PAND xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm11, xmm9
	PAND xmm13,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm13, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm9, xmm5
	PSUBQ xmm10, xmm9
	PAND xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm5, xmm9
	MOVAPS   [rsp + 160], xmm10
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm9, xmm6
	PSUBQ xmm12, xmm9
	PAND xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm6, xmm9
	MOVAPS   [rsp + 176], xmm12
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm9, xmm11
	PSUBQ xmm14, xmm9
	PAND xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm11, xmm9
	MOVAPS   [rsp + 192], xmm14
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm9, xmm13
	PSUBQ xmm7, xmm9
	PAND xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm13, xmm9
	MOVAPS   [rsp + 208], xmm7
	MOVAPS xmm9, [byte rdi + 64]
	MOVAPS xmm10, xmm9
	PSRLQ xmm10, 52
	MOVAPS xmm12, [byte rdi + 80]
	MOVAPS xmm14, xmm12
	PSRLQ xmm14, 52
	MOVAPS xmm15, [byte rdi + 96]
	MOVAPS xmm7, xmm15
	PSRLQ xmm7, 52
	MOVAPS xmm4, [byte rdi + 112]
	MOVAPS xmm3, xmm4
	PSRLQ xmm3, 52
	MOVAPS xmm2, xmm9
	ORPS xmm2, xmm8
	SUBPD xmm2, xmm8
	PXOR xmm1, xmm1
	CMPEQPD xmm1, xmm10
	MOVAPS xmm0, xmm2
	PSRLQ xmm0, 52
	PSUBQ xmm0,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm0, xmm1
	POR xmm10, xmm0
	ANDPS xmm2, xmm1
	ANDNPS xmm1, xmm9
	ORPS xmm1, xmm2
	MOVAPS xmm9, xmm12
	ORPS xmm9, xmm8
	SUBPD xmm9, xmm8
	PXOR xmm2, xmm2
	CMPEQPD xmm2, xmm14
	MOVAPS xmm0, xmm9
	PSRLQ xmm0, 52
	PSUBQ xmm0,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm0, xmm2
	POR xmm14, xmm0
	ANDPS xmm9, xmm2
	ANDNPS xmm2, xmm12
	ORPS xmm2, xmm9
	MOVAPS xmm9, xmm15
	ORPS xmm9, xmm8
	SUBPD xmm9, xmm8
	PXOR xmm12, xmm12
	CMPEQPD xmm12, xmm7
	MOVAPS xmm0, xmm9
	PSRLQ xmm0, 52
	PSUBQ xmm0,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm0, xmm12
	POR xmm7, xmm0
	ANDPS xmm9, xmm12
	ANDNPS xmm12, xmm15
	ORPS xmm12, xmm9
	MOVAPS xmm9, xmm4
	ORPS xmm9, xmm8
	SUBPD xmm9, xmm8
	PXOR xmm8, xmm8
	CMPEQPD xmm8, xmm3
	MOVAPS xmm15, xmm9
	PSRLQ xmm15, 52
	PSUBQ xmm15,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm15, xmm8
	POR xmm3, xmm15
	ANDPS xmm9, xmm8
	ANDNPS xmm8, xmm4
	ORPS xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c4]
	PAND xmm1,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm1, xmm9
	PAND xmm2,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm2, xmm9
	PAND xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm12, xmm9
	PAND xmm8,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm8, xmm9
	MOVAPS xmm15,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm15, xmm1
	PSUBQ xmm10, xmm15
	PAND xmm15,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm1, xmm15
	MOVAPS   [rsp + 224], xmm10
	MOVAPS xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm10, xmm2
	PSUBQ xmm14, xmm10
	PAND xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm2, xmm10
	MOVAPS   [rsp + 240], xmm14
	MOVAPS xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm10, xmm12
	PSUBQ xmm7, xmm10
	PAND xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm12, xmm10
	MOVAPS   [rsp + 256], xmm7
	MOVAPS xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm10, xmm8
	PSUBQ xmm3, xmm10
	PAND xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm8, xmm10
	MOVAPS   [rsp + 272], xmm3
	SUBPD xmm5, xmm9
	MOVAPS xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c35]
	SUBPD xmm6, xmm9
	MOVAPS xmm14, xmm10
	SUBPD xmm11, xmm9
	MOVAPS xmm15, xmm10
	SUBPD xmm13, xmm9
	MOVAPS xmm7, xmm10
	SUBPD xmm1, xmm9
	MOVAPS xmm4,  [rel _yepMath_Log_V64f_V64f_K10_constants.c35]
	SUBPD xmm2, xmm9
	MOVAPS xmm3, xmm4
	SUBPD xmm12, xmm9
	MOVAPS   [rsp + 288], xmm12
	MOVAPS xmm12, xmm4
	SUBPD xmm8, xmm9
	MOVAPS   [rsp + 304], xmm8
	MOVAPS xmm8, xmm4
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c36]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c37]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c38]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c39]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c40]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c41]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c42]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c43]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c44]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c45]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c46]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c47]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c48]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c49]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c50]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c51]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c52]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MOVAPS xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c53]
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm9
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm9
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm9
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm9
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm9
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm9
	MULPD xmm12,   [rsp + 288]
	ADDPD xmm12, xmm9
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm9
	MULPD xmm10, xmm5
	MULPD xmm10, xmm5
	ADDPD xmm10, xmm5
	MULPD xmm14, xmm6
	MULPD xmm14, xmm6
	ADDPD xmm14, xmm6
	MULPD xmm15, xmm11
	MULPD xmm15, xmm11
	ADDPD xmm15, xmm11
	MULPD xmm7, xmm13
	MULPD xmm7, xmm13
	ADDPD xmm7, xmm13
	MULPD xmm4, xmm1
	MULPD xmm4, xmm1
	ADDPD xmm4, xmm1
	MULPD xmm3, xmm2
	MULPD xmm3, xmm2
	ADDPD xmm3, xmm2
	MOVAPS xmm9,   [rsp + 288]
	MULPD xmm12, xmm9
	MULPD xmm12, xmm9
	ADDPD xmm12, xmm9
	MOVAPS xmm9,   [rsp + 304]
	MULPD xmm8, xmm9
	MULPD xmm8, xmm9
	ADDPD xmm8, xmm9
	MOVDQA xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c27]
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c28]
	MOVAPS xmm13,   [rsp + 160]
	PADDQ xmm13, xmm9
	SUBPD xmm13, xmm11
	MOVAPS xmm6,   [rsp + 176]
	PADDQ xmm6, xmm9
	SUBPD xmm6, xmm11
	MOVAPS xmm5,   [rsp + 192]
	PADDQ xmm5, xmm9
	SUBPD xmm5, xmm11
	MOVAPS xmm2,   [rsp + 208]
	PADDQ xmm2, xmm9
	SUBPD xmm2, xmm11
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_K10_constants.c54]
	MOVAPS xmm0, xmm13
	MULPD xmm0, xmm1
	ADDPD xmm0, xmm10
	MOVAPS xmm10, xmm6
	MULPD xmm10, xmm1
	ADDPD xmm10, xmm14
	MOVAPS xmm14, xmm5
	MULPD xmm14, xmm1
	ADDPD xmm14, xmm15
	MOVAPS xmm15, xmm2
	MULPD xmm15, xmm1
	ADDPD xmm15, xmm7
	MOVAPD xmm7,  [rel _yepMath_Log_V64f_V64f_K10_constants.c55]
	MULPD xmm13, xmm7
	ADDPD xmm0, xmm13
	MULPD xmm6, xmm7
	ADDPD xmm10, xmm6
	MULPD xmm5, xmm7
	ADDPD xmm14, xmm5
	MULPD xmm2, xmm7
	ADDPD xmm15, xmm2
	MOVAPS xmm13,   [rsp + 224]
	PADDQ xmm13, xmm9
	SUBPD xmm13, xmm11
	MOVAPS xmm7,   [rsp + 240]
	PADDQ xmm7, xmm9
	SUBPD xmm7, xmm11
	MOVAPS xmm6,   [rsp + 256]
	PADDQ xmm6, xmm9
	SUBPD xmm6, xmm11
	MOVAPS xmm5,   [rsp + 272]
	PADDQ xmm5, xmm9
	SUBPD xmm5, xmm11
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c54]
	MOVAPS xmm11, xmm13
	MULPD xmm11, xmm9
	ADDPD xmm11, xmm4
	MOVAPS xmm4, xmm7
	MULPD xmm4, xmm9
	ADDPD xmm4, xmm3
	MOVAPS xmm3, xmm6
	MULPD xmm3, xmm9
	ADDPD xmm3, xmm12
	MOVAPS xmm12, xmm5
	MULPD xmm12, xmm9
	ADDPD xmm12, xmm8
	MOVAPD xmm8,  [rel _yepMath_Log_V64f_V64f_K10_constants.c55]
	MULPD xmm13, xmm8
	ADDPD xmm11, xmm13
	MULPD xmm7, xmm8
	ADDPD xmm4, xmm7
	MULPD xmm6, xmm8
	ADDPD xmm3, xmm6
	MULPD xmm5, xmm8
	ADDPD xmm12, xmm5
	MOVAPS xmm8,  [rel _yepMath_Log_V64f_V64f_K10_constants.c56]
	MOVAPS xmm9, [rdi]
	PXOR xmm13, xmm13
	MOVAPS xmm7,  [rel _yepMath_Log_V64f_V64f_K10_constants.c57]
	CMPEQPD xmm13, xmm9
	ANDPS xmm7, xmm13
	ANDNPS xmm13, xmm0
	ORPS xmm13, xmm7
	MOVAPS xmm7, [byte rdi + 16]
	PXOR xmm6, xmm6
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c57]
	CMPEQPD xmm6, xmm7
	ANDPS xmm5, xmm6
	ANDNPS xmm6, xmm10
	ORPS xmm6, xmm5
	MOVAPS xmm10, [byte rdi + 32]
	PXOR xmm5, xmm5
	MOVAPS xmm2,  [rel _yepMath_Log_V64f_V64f_K10_constants.c57]
	CMPEQPD xmm5, xmm10
	ANDPS xmm2, xmm5
	ANDNPS xmm5, xmm14
	ORPS xmm5, xmm2
	MOVAPS xmm14, [byte rdi + 48]
	PXOR xmm2, xmm2
	MOVAPS xmm1,  [rel _yepMath_Log_V64f_V64f_K10_constants.c57]
	CMPEQPD xmm2, xmm14
	ANDPS xmm1, xmm2
	ANDNPS xmm2, xmm15
	ORPS xmm2, xmm1
	PSHUFD xmm15, xmm9, 245
	PSRAD xmm15, 31
	MOVAPS xmm1,  [rel _yepMath_Log_V64f_V64f_K10_constants.c58]
	ANDPS xmm1, xmm15
	ANDNPS xmm15, xmm13
	ORPS xmm15, xmm1
	PSHUFD xmm13, xmm7, 245
	PSRAD xmm13, 31
	MOVAPS xmm1,  [rel _yepMath_Log_V64f_V64f_K10_constants.c58]
	ANDPS xmm1, xmm13
	ANDNPS xmm13, xmm6
	ORPS xmm13, xmm1
	PSHUFD xmm6, xmm10, 245
	PSRAD xmm6, 31
	MOVAPS xmm1,  [rel _yepMath_Log_V64f_V64f_K10_constants.c58]
	ANDPS xmm1, xmm6
	ANDNPS xmm6, xmm5
	ORPS xmm6, xmm1
	PSHUFD xmm5, xmm14, 245
	PSRAD xmm5, 31
	MOVAPS xmm1,  [rel _yepMath_Log_V64f_V64f_K10_constants.c58]
	ANDPS xmm1, xmm5
	ANDNPS xmm5, xmm2
	ORPS xmm5, xmm1
	MOVAPS xmm2, xmm9
	CMPNLTPD xmm9, xmm8
	ANDPS xmm2, xmm9
	ANDNPS xmm9, xmm15
	ORPS xmm9, xmm2
	MOVUPS [rsi], xmm9
	MOVAPS xmm9, xmm7
	CMPNLTPD xmm7, xmm8
	ANDPS xmm9, xmm7
	ANDNPS xmm7, xmm13
	ORPS xmm7, xmm9
	MOVUPS [byte rsi + 16], xmm7
	MOVAPS xmm9, xmm10
	CMPNLTPD xmm10, xmm8
	ANDPS xmm9, xmm10
	ANDNPS xmm10, xmm6
	ORPS xmm10, xmm9
	MOVUPS [byte rsi + 32], xmm10
	MOVAPS xmm9, xmm14
	CMPNLTPD xmm14, xmm8
	ANDPS xmm9, xmm14
	ANDNPS xmm14, xmm5
	ORPS xmm14, xmm9
	MOVUPS [byte rsi + 48], xmm14
	MOVAPS xmm9, [byte rdi + 64]
	PXOR xmm10, xmm10
	MOVAPS xmm13,  [rel _yepMath_Log_V64f_V64f_K10_constants.c57]
	CMPEQPD xmm10, xmm9
	ANDPS xmm13, xmm10
	ANDNPS xmm10, xmm11
	ORPS xmm10, xmm13
	MOVAPS xmm11, [byte rdi + 80]
	PXOR xmm13, xmm13
	MOVAPS xmm14,  [rel _yepMath_Log_V64f_V64f_K10_constants.c57]
	CMPEQPD xmm13, xmm11
	ANDPS xmm14, xmm13
	ANDNPS xmm13, xmm4
	ORPS xmm13, xmm14
	MOVAPS xmm14, [byte rdi + 96]
	PXOR xmm15, xmm15
	MOVAPS xmm7,  [rel _yepMath_Log_V64f_V64f_K10_constants.c57]
	CMPEQPD xmm15, xmm14
	ANDPS xmm7, xmm15
	ANDNPS xmm15, xmm3
	ORPS xmm15, xmm7
	MOVAPS xmm7, [byte rdi + 112]
	PXOR xmm6, xmm6
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c57]
	CMPEQPD xmm6, xmm7
	ANDPS xmm5, xmm6
	ANDNPS xmm6, xmm12
	ORPS xmm6, xmm5
	PSHUFD xmm12, xmm9, 245
	PSRAD xmm12, 31
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c58]
	ANDPS xmm5, xmm12
	ANDNPS xmm12, xmm10
	ORPS xmm12, xmm5
	PSHUFD xmm10, xmm11, 245
	PSRAD xmm10, 31
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c58]
	ANDPS xmm5, xmm10
	ANDNPS xmm10, xmm13
	ORPS xmm10, xmm5
	PSHUFD xmm13, xmm14, 245
	PSRAD xmm13, 31
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c58]
	ANDPS xmm5, xmm13
	ANDNPS xmm13, xmm15
	ORPS xmm13, xmm5
	PSHUFD xmm15, xmm7, 245
	PSRAD xmm15, 31
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c58]
	ANDPS xmm5, xmm15
	ANDNPS xmm15, xmm6
	ORPS xmm15, xmm5
	MOVAPS xmm6, xmm9
	CMPNLTPD xmm9, xmm8
	ANDPS xmm6, xmm9
	ANDNPS xmm9, xmm12
	ORPS xmm9, xmm6
	MOVUPS [byte rsi + 64], xmm9
	MOVAPS xmm9, xmm11
	CMPNLTPD xmm11, xmm8
	ANDPS xmm9, xmm11
	ANDNPS xmm11, xmm10
	ORPS xmm11, xmm9
	MOVUPS [byte rsi + 80], xmm11
	MOVAPS xmm9, xmm14
	CMPNLTPD xmm14, xmm8
	ANDPS xmm9, xmm14
	ANDNPS xmm14, xmm13
	ORPS xmm14, xmm9
	MOVUPS [byte rsi + 96], xmm14
	MOVAPS xmm9, xmm7
	CMPNLTPD xmm7, xmm8
	ANDPS xmm9, xmm7
	ANDNPS xmm7, xmm15
	ORPS xmm7, xmm9
	MOVUPS [byte rsi + 112], xmm7
	JMP .process_batch_increment

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.Nehalem progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Log_V64f_V64f_Nehalem_constants:
	.c0: DQ 0x4330000000000000, 0x4330000000000000
	.c1: DQ 0x4330000000000000
	.c5: DQ 0x3FF6A09E667F3BCD
	.c2: DQ 0x0000000000000432, 0x0000000000000432
	.c3: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c6: DQ 0x0010000000000000, 0x0010000000000000
	.c7: DQ 0x3FF0000000000000
	.c8: DQ 0xBF9CC4EC078138E3
	.c9: DQ 0x3FB0266CD08DB2F2
	.c10: DQ 0xBFB1654764F478EC
	.c11: DQ 0x3FAEA17E14773369
	.c12: DQ 0xBFAEED2E2BB64B2E
	.c13: DQ 0x3FB0F23916A44515
	.c14: DQ 0xBFB25480A82633AF
	.c15: DQ 0x3FB3B4ED39194B87
	.c16: DQ 0xBFB554D5ACD502AB
	.c17: DQ 0x3FB745980F3FB889
	.c18: DQ 0xBFB9999C5BE751E3
	.c19: DQ 0x3FBC71C90DB06248
	.c20: DQ 0xBFBFFFFFFBD8606D
	.c21: DQ 0x3FC249248DAE4B2A
	.c22: DQ 0xBFC55555554A6A2B
	.c23: DQ 0x3FC9999999A43E4F
	.c24: DQ 0xBFD00000000013C7
	.c25: DQ 0x3FD5555555555103
	.c26: DQ 0xBFDFFFFFFFFFFFF2
	.c27: DQ 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01
	.c28: DQ 0x4338000000000000, 0x4338000000000000
	.c29: DQ 0x3D2EF35793C76730
	.c30: DQ 0x3FE62E42FEFA3800
	.c31: DQ 0x7FF8000000000000, 0x7FF8000000000000
	.c32: DQ 0xFFF0000000000000
	.c33: DQ 0x7FF0000000000000
	.c34: DD 0x000003FF, 0x000003FF, 0x000003FF, 0x000003FF
	.c35: DQ 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD
	.c36: DQ 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3
	.c37: DQ 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2
	.c38: DQ 0xBFB1654764F478EC, 0xBFB1654764F478EC
	.c39: DQ 0x3FAEA17E14773369, 0x3FAEA17E14773369
	.c40: DQ 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E
	.c41: DQ 0x3FB0F23916A44515, 0x3FB0F23916A44515
	.c42: DQ 0xBFB25480A82633AF, 0xBFB25480A82633AF
	.c43: DQ 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87
	.c44: DQ 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB
	.c45: DQ 0x3FB745980F3FB889, 0x3FB745980F3FB889
	.c46: DQ 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3
	.c47: DQ 0x3FBC71C90DB06248, 0x3FBC71C90DB06248
	.c48: DQ 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D
	.c49: DQ 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A
	.c50: DQ 0xBFC55555554A6A2B, 0xBFC55555554A6A2B
	.c51: DQ 0x3FC9999999A43E4F, 0x3FC9999999A43E4F
	.c52: DQ 0xBFD00000000013C7, 0xBFD00000000013C7
	.c53: DQ 0x3FD5555555555103, 0x3FD5555555555103
	.c54: DQ 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2
	.c55: DQ 0x3D2EF35793C76730, 0x3D2EF35793C76730
	.c56: DQ 0x3FE62E42FEFA3800, 0x3FE62E42FEFA3800
	.c57: DQ 0x7FF0000000000000, 0x7FF0000000000000
	.c58: DQ 0xFFF0000000000000, 0xFFF0000000000000


%ifidn __OUTPUT_FORMAT__, elf64
section .text.Nehalem progbits alloc exec nowrite align=16
global _yepMath_Log_V64f_V64f_Nehalem
_yepMath_Log_V64f_V64f_Nehalem:
%else
section .text
global __yepMath_Log_V64f_V64f_Nehalem
__yepMath_Log_V64f_V64f_Nehalem:
%endif
	.ENTRY:
	SUB rsp, 328
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 15
	JZ .source_16b_aligned
	.source_16b_misaligned:
	MOVSD xmm8, [rdi]
	MOVAPS xmm9, xmm8
	PSRLQ xmm9, 52
	MOVAPS xmm10, xmm8
	ORPS xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	SUBSD xmm10, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c1]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm9
	MOVDQA xmm11, xmm10
	PSRLQ xmm11, 52
	PSUBQ xmm11,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PAND xmm11, xmm0
	POR xmm11, xmm9
	PBLENDVB xmm8, xmm10, xmm0
	PAND xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	MOVSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c5]
	CMPLTSD xmm9, xmm8
	PSUBQ xmm11, xmm9
	PAND xmm9,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm8, xmm9
	SUBSD xmm8, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c7]
	MOVSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c8]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c9]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c10]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c11]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c12]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c13]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c14]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c15]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c16]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c17]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c18]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c19]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c20]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c21]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c22]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c23]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c24]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c25]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c26]
	MULSD xmm9, xmm8
	MULSD xmm9, xmm8
	ADDSD xmm9, xmm8
	PADDQ xmm11,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c27]
	SUBSD xmm11,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c28]
	MOVAPS xmm8, xmm11
	MULSD xmm8, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c29]
	ADDSD xmm8, xmm9
	MULSD xmm11, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c30]
	ADDSD xmm8, xmm11
	MOVSD xmm0, [rdi]
	BLENDVPD xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c31], xmm0
	PXOR xmm9, xmm9
	MOVSD xmm10, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c32]
	PCMPEQQ xmm9, xmm0
	PAND xmm10, xmm9
	PANDN xmm9, xmm8
	POR xmm9, xmm10
	MOVAPS xmm8, xmm0
	CMPNLTSD xmm0, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c33]
	BLENDVPD xmm9, xmm8, xmm0
	MOVSD [rsi], xmm9
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 15
	JNZ .source_16b_misaligned
	.source_16b_aligned:
	SUB rdx, 16
	JB .process_restore
	align 32
	.process_batch_fast:
	MOVAPD xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	MOV rax, 4503599627370496
	MOVDQA xmm9,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	MOV r10, 9214364837600034815
	MOVDQA xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c34]
	MOVAPS xmm11, [rdi]
	MOVAPS xmm12, xmm11
	MOV r11, [rdi]
	PSRLD xmm12, 20
	SUB r11, rax
	PAND xmm11, xmm9
	CMP r11, r10
	JA .process_batch_full
	PSUBD xmm12, xmm10
	POR xmm11, xmm8
	MOVAPS xmm13, [byte rdi + 16]
	MOVAPS xmm14, xmm13
	MOV r11, [byte rdi + 16]
	PSRLD xmm14, 20
	SUB r11, rax
	PAND xmm13, xmm9
	CMP r11, r10
	JA .process_batch_full
	PSUBD xmm14, xmm10
	POR xmm13, xmm8
	MOVAPS xmm15, [byte rdi + 32]
	MOVAPS xmm7, xmm15
	MOV r11, [byte rdi + 32]
	PSRLD xmm7, 20
	SUB r11, rax
	PAND xmm15, xmm9
	CMP r11, r10
	JA .process_batch_full
	PSUBD xmm7, xmm10
	POR xmm15, xmm8
	MOVAPS xmm6, [byte rdi + 48]
	MOVAPS xmm5, xmm6
	MOV r11, [byte rdi + 48]
	PSRLD xmm5, 20
	SUB r11, rax
	PAND xmm6, xmm9
	CMP r11, r10
	JA .process_batch_full
	PSUBD xmm5, xmm10
	POR xmm6, xmm8
	MOVAPD xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	MOVAPD xmm3,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm3, xmm11
	MOV r11, [byte rdi + 8]
	PSUBD xmm12, xmm3
	PAND xmm3, xmm4
	SUB r11, rax
	PSUBD xmm11, xmm3
	PSHUFD xmm12, xmm12, 221
	CMP r11, r10
	JA .process_batch_full
	MOVAPD   [rsp], xmm12
	MOVAPD xmm12,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm12, xmm13
	MOV r11, [byte rdi + 24]
	PSUBD xmm14, xmm12
	PAND xmm12, xmm4
	SUB r11, rax
	PSUBD xmm13, xmm12
	PSHUFD xmm14, xmm14, 221
	CMP r11, r10
	JA .process_batch_full
	MOVAPD   [rsp + 16], xmm14
	MOVAPD xmm12,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm12, xmm15
	MOV r11, [byte rdi + 40]
	PSUBD xmm7, xmm12
	PAND xmm12, xmm4
	SUB r11, rax
	PSUBD xmm15, xmm12
	PSHUFD xmm7, xmm7, 221
	CMP r11, r10
	JA .process_batch_full
	MOVAPD   [rsp + 32], xmm7
	MOVAPD xmm12,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm12, xmm6
	MOV r11, [byte rdi + 56]
	PSUBD xmm5, xmm12
	PAND xmm12, xmm4
	SUB r11, rax
	PSUBD xmm6, xmm12
	PSHUFD xmm5, xmm5, 221
	CMP r11, r10
	JA .process_batch_full
	MOVAPD   [rsp + 48], xmm5
	MOVAPS xmm12, [byte rdi + 64]
	MOVAPS xmm14, xmm12
	MOV r11, [byte rdi + 64]
	PSRLD xmm14, 20
	SUB r11, rax
	PAND xmm12, xmm9
	CMP r11, r10
	JA .process_batch_full
	PSUBD xmm14, xmm10
	POR xmm12, xmm8
	MOVAPS xmm7, [byte rdi + 80]
	MOVAPS xmm5, xmm7
	MOV r11, [byte rdi + 80]
	PSRLD xmm5, 20
	SUB r11, rax
	PAND xmm7, xmm9
	CMP r11, r10
	JA .process_batch_full
	PSUBD xmm5, xmm10
	POR xmm7, xmm8
	MOVAPS xmm3, [byte rdi + 96]
	MOVAPS xmm2, xmm3
	MOV r11, [byte rdi + 96]
	PSRLD xmm2, 20
	SUB r11, rax
	PAND xmm3, xmm9
	CMP r11, r10
	JA .process_batch_full
	PSUBD xmm2, xmm10
	POR xmm3, xmm8
	MOVAPS xmm1, [byte rdi + 112]
	MOVAPS xmm0, xmm1
	MOV r11, [byte rdi + 112]
	PSRLD xmm0, 20
	SUB r11, rax
	PAND xmm1, xmm9
	CMP r11, r10
	JA .process_batch_full
	PSUBD xmm0, xmm10
	POR xmm1, xmm8
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm9, xmm12
	MOV r11, [byte rdi + 72]
	PSUBD xmm14, xmm9
	PAND xmm9, xmm4
	SUB r11, rax
	PSUBD xmm12, xmm9
	PSHUFD xmm14, xmm14, 221
	CMP r11, r10
	JA .process_batch_full
	MOVAPD   [rsp + 64], xmm14
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm9, xmm7
	MOV r11, [byte rdi + 88]
	PSUBD xmm5, xmm9
	PAND xmm9, xmm4
	SUB r11, rax
	PSUBD xmm7, xmm9
	PSHUFD xmm5, xmm5, 221
	CMP r11, r10
	JA .process_batch_full
	MOVAPD   [rsp + 80], xmm5
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm9, xmm3
	MOV r11, [byte rdi + 104]
	PSUBD xmm2, xmm9
	PAND xmm9, xmm4
	SUB r11, rax
	PSUBD xmm3, xmm9
	PSHUFD xmm2, xmm2, 221
	CMP r11, r10
	JA .process_batch_full
	MOVAPD   [rsp + 96], xmm2
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm9, xmm1
	MOV r11, [byte rdi + 120]
	PSUBD xmm0, xmm9
	PAND xmm9, xmm4
	SUB r11, rax
	PSUBD xmm1, xmm9
	PSHUFD xmm0, xmm0, 221
	CMP r11, r10
	JA .process_batch_full
	MOVAPD   [rsp + 112], xmm0
	SUBPD xmm11, xmm8
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c36]
	SUBPD xmm13, xmm8
	MOVAPD xmm10, xmm9
	SUBPD xmm15, xmm8
	MOVAPD xmm14, xmm9
	SUBPD xmm6, xmm8
	MOVAPD xmm5, xmm9
	SUBPD xmm12, xmm8
	MOVAPD xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c36]
	SUBPD xmm7, xmm8
	MOVAPD xmm2, xmm4
	SUBPD xmm3, xmm8
	MOVAPD   [rsp + 128], xmm3
	MOVAPD xmm3, xmm4
	SUBPD xmm1, xmm8
	MOVAPD   [rsp + 144], xmm1
	MOVAPD xmm8, xmm4
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c37]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c38]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c39]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c40]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c41]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c42]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c43]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c44]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c45]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c46]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c47]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c48]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c49]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c50]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c51]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c52]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c53]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c54]
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm1
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm1
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm1
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm1
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm1
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm1
	MULPD xmm3,   [rsp + 128]
	ADDPD xmm3, xmm1
	MULPD xmm8,   [rsp + 144]
	ADDPD xmm8, xmm1
	MULPD xmm9, xmm11
	CVTDQ2PD xmm1,   [rsp + 16]
	MOVAPS   [rsp + 16], xmm1
	MULPD xmm10, xmm13
	MULPD xmm14, xmm15
	CVTDQ2PD xmm1,   [rsp + 48]
	MOVAPS   [rsp + 48], xmm1
	MULPD xmm5, xmm6
	MULPD xmm4, xmm12
	CVTDQ2PD xmm1,   [rsp + 80]
	MOVAPS   [rsp + 80], xmm1
	MULPD xmm2, xmm7
	MOVAPD xmm1,   [rsp + 128]
	MULPD xmm3, xmm1
	CVTDQ2PD xmm0,   [rsp + 112]
	MOVAPS   [rsp + 112], xmm0
	MOVAPD xmm0,   [rsp + 144]
	MULPD xmm8, xmm0
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm11
	CVTDQ2PD xmm11,   [rsp]
	MOVAPS   [rsp], xmm11
	MULPD xmm10, xmm13
	ADDPD xmm10, xmm13
	MULPD xmm14, xmm15
	ADDPD xmm14, xmm15
	CVTDQ2PD xmm13,   [rsp + 32]
	MOVAPS   [rsp + 32], xmm13
	MULPD xmm5, xmm6
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm12
	CVTDQ2PD xmm12,   [rsp + 64]
	MOVAPS   [rsp + 64], xmm12
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm7
	MULPD xmm3, xmm1
	ADDPD xmm3, xmm1
	CVTDQ2PD xmm15,   [rsp + 96]
	MOVAPS   [rsp + 96], xmm15
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm0
	MOVAPD xmm7,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c55]
	MOVAPS xmm6, xmm11
	MULPD xmm11, xmm7
	ADDPD xmm11, xmm9
	MOVAPS xmm9,   [rsp + 16]
	MULPD xmm9, xmm7
	ADDPD xmm9, xmm10
	MOVAPS xmm10, xmm13
	MULPD xmm13, xmm7
	ADDPD xmm13, xmm14
	MOVAPS xmm14,   [rsp + 48]
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm5
	MOVAPS xmm5, xmm12
	MULPD xmm12, xmm7
	ADDPD xmm12, xmm4
	MOVAPS xmm4,   [rsp + 80]
	MULPD xmm4, xmm7
	ADDPD xmm4, xmm2
	MOVAPS xmm2, xmm15
	MULPD xmm15, xmm7
	ADDPD xmm15, xmm3
	MOVAPS xmm3,   [rsp + 112]
	MULPD xmm3, xmm7
	ADDPD xmm3, xmm8
	MOVAPD xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c56]
	MULPD xmm6, xmm8
	ADDPD xmm11, xmm6
	MOVUPD [rsi], xmm11
	MOVAPS xmm11,   [rsp + 16]
	MULPD xmm11, xmm8
	ADDPD xmm9, xmm11
	MOVUPD [byte rsi + 16], xmm9
	MULPD xmm10, xmm8
	ADDPD xmm13, xmm10
	MOVUPD [byte rsi + 32], xmm13
	MOVAPS xmm9,   [rsp + 48]
	MULPD xmm9, xmm8
	ADDPD xmm14, xmm9
	MOVUPD [byte rsi + 48], xmm14
	MULPD xmm5, xmm8
	ADDPD xmm12, xmm5
	MOVUPD [byte rsi + 64], xmm12
	MOVAPS xmm9,   [rsp + 80]
	MULPD xmm9, xmm8
	ADDPD xmm4, xmm9
	MOVUPD [byte rsi + 80], xmm4
	MULPD xmm2, xmm8
	ADDPD xmm15, xmm2
	MOVUPD [byte rsi + 96], xmm15
	MOVAPS xmm9,   [rsp + 112]
	MULPD xmm9, xmm8
	ADDPD xmm3, xmm9
	MOVUPD [byte rsi + 112], xmm3
	.process_batch_increment:
	ADD rdi, 128
	ADD rsi, 128
	SUB rdx, 16
	JAE .process_batch_fast
	.process_restore:
	ADD rdx, 16
	JZ .return_ok
	.process_single:
	MOVSD xmm8, [rdi]
	MOVAPS xmm9, xmm8
	PSRLQ xmm9, 52
	MOVAPS xmm10, xmm8
	ORPS xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	SUBSD xmm10, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c1]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm9
	MOVDQA xmm11, xmm10
	PSRLQ xmm11, 52
	PSUBQ xmm11,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PAND xmm11, xmm0
	POR xmm11, xmm9
	PBLENDVB xmm8, xmm10, xmm0
	PAND xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	MOVSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c5]
	CMPLTSD xmm9, xmm8
	PSUBQ xmm11, xmm9
	PAND xmm9,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm8, xmm9
	SUBSD xmm8, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c7]
	MOVSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c8]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c9]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c10]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c11]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c12]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c13]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c14]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c15]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c16]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c17]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c18]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c19]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c20]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c21]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c22]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c23]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c24]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c25]
	MULSD xmm9, xmm8
	ADDSD xmm9, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c26]
	MULSD xmm9, xmm8
	MULSD xmm9, xmm8
	ADDSD xmm9, xmm8
	PADDQ xmm11,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c27]
	SUBSD xmm11,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c28]
	MOVAPS xmm8, xmm11
	MULSD xmm8, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c29]
	ADDSD xmm8, xmm9
	MULSD xmm11, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c30]
	ADDSD xmm8, xmm11
	MOVSD xmm0, [rdi]
	BLENDVPD xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c31], xmm0
	PXOR xmm9, xmm9
	MOVSD xmm10, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c32]
	PCMPEQQ xmm9, xmm0
	PAND xmm10, xmm9
	PANDN xmm9, xmm8
	POR xmm9, xmm10
	MOVAPS xmm8, xmm0
	CMPNLTSD xmm0, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c33]
	BLENDVPD xmm9, xmm8, xmm0
	MOVSD [rsi], xmm9
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	ADD rsp, 328
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	MOVAPS xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	MOVAPS xmm9, [rdi]
	MOVAPS xmm10, xmm9
	PSRLQ xmm10, 52
	MOVAPS xmm11, xmm9
	ORPS xmm11, xmm8
	SUBPD xmm11,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm10
	MOVDQA xmm12, xmm11
	PSRLQ xmm12, 52
	PSUBQ xmm12,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PBLENDVB xmm9, xmm11, xmm0
	PAND xmm9,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm9,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	PAND xmm12, xmm0
	POR xmm12, xmm10
	MOVAPS xmm10, [byte rdi + 16]
	MOVAPS xmm11, xmm10
	PSRLQ xmm11, 52
	MOVAPS xmm13, xmm10
	ORPS xmm13, xmm8
	SUBPD xmm13,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm11
	MOVDQA xmm14, xmm13
	PSRLQ xmm14, 52
	PSUBQ xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PBLENDVB xmm10, xmm13, xmm0
	PAND xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	PAND xmm14, xmm0
	POR xmm14, xmm11
	MOVAPS xmm11, [byte rdi + 32]
	MOVAPS xmm13, xmm11
	PSRLQ xmm13, 52
	MOVAPS xmm15, xmm11
	ORPS xmm15, xmm8
	SUBPD xmm15,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm13
	MOVDQA xmm7, xmm15
	PSRLQ xmm7, 52
	PSUBQ xmm7,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PBLENDVB xmm11, xmm15, xmm0
	PAND xmm11,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm11,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	PAND xmm7, xmm0
	POR xmm7, xmm13
	MOVAPS xmm13, [byte rdi + 48]
	MOVAPS xmm15, xmm13
	PSRLQ xmm15, 52
	MOVAPS xmm6, xmm13
	ORPS xmm6, xmm8
	SUBPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm15
	MOVDQA xmm5, xmm6
	PSRLQ xmm5, 52
	PSUBQ xmm5,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PBLENDVB xmm13, xmm6, xmm0
	PAND xmm13,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm13,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	PAND xmm5, xmm0
	POR xmm5, xmm15
	MOVAPD xmm15,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm15, xmm9
	PSUBQ xmm12, xmm15
	PAND xmm15,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm9, xmm15
	MOVAPD   [rsp + 160], xmm12
	MOVAPD xmm12,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm12, xmm10
	PSUBQ xmm14, xmm12
	PAND xmm12,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm10, xmm12
	MOVAPD   [rsp + 176], xmm14
	MOVAPD xmm12,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm12, xmm11
	PSUBQ xmm7, xmm12
	PAND xmm12,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm11, xmm12
	MOVAPD   [rsp + 192], xmm7
	MOVAPD xmm12,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm12, xmm13
	PSUBQ xmm5, xmm12
	PAND xmm12,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm13, xmm12
	MOVAPD   [rsp + 208], xmm5
	MOVAPS xmm12, [byte rdi + 64]
	MOVAPS xmm14, xmm12
	PSRLQ xmm14, 52
	MOVAPS xmm15, xmm12
	ORPS xmm15, xmm8
	SUBPD xmm15,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm14
	MOVDQA xmm7, xmm15
	PSRLQ xmm7, 52
	PSUBQ xmm7,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PBLENDVB xmm12, xmm15, xmm0
	PAND xmm12,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm12,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	PAND xmm7, xmm0
	POR xmm7, xmm14
	MOVAPS xmm14, [byte rdi + 80]
	MOVAPS xmm15, xmm14
	PSRLQ xmm15, 52
	MOVAPS xmm6, xmm14
	ORPS xmm6, xmm8
	SUBPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm15
	MOVDQA xmm5, xmm6
	PSRLQ xmm5, 52
	PSUBQ xmm5,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PBLENDVB xmm14, xmm6, xmm0
	PAND xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	PAND xmm5, xmm0
	POR xmm5, xmm15
	MOVAPS xmm15, [byte rdi + 96]
	MOVAPS xmm6, xmm15
	PSRLQ xmm6, 52
	MOVAPS xmm4, xmm15
	ORPS xmm4, xmm8
	SUBPD xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm6
	MOVDQA xmm3, xmm4
	PSRLQ xmm3, 52
	PSUBQ xmm3,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PBLENDVB xmm15, xmm4, xmm0
	PAND xmm15,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm15,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	PAND xmm3, xmm0
	POR xmm3, xmm6
	MOVAPS xmm6, [byte rdi + 112]
	MOVAPS xmm4, xmm6
	PSRLQ xmm4, 52
	MOVAPS xmm2, xmm6
	ORPS xmm2, xmm8
	SUBPD xmm2,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm4
	MOVDQA xmm8, xmm2
	PSRLQ xmm8, 52
	PSUBQ xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PBLENDVB xmm6, xmm2, xmm0
	PAND xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	PAND xmm8, xmm0
	POR xmm8, xmm4
	MOVAPD xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm4, xmm12
	PSUBQ xmm7, xmm4
	PAND xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm12, xmm4
	MOVAPD   [rsp + 224], xmm7
	MOVAPD xmm7,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm7, xmm14
	PSUBQ xmm5, xmm7
	PAND xmm7,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm14, xmm7
	MOVAPD   [rsp + 240], xmm5
	MOVAPD xmm7,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm7, xmm15
	PSUBQ xmm3, xmm7
	PAND xmm7,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm15, xmm7
	MOVAPD   [rsp + 256], xmm3
	MOVAPD xmm7,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm7, xmm6
	PSUBQ xmm8, xmm7
	PAND xmm7,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm6, xmm7
	MOVAPD   [rsp + 272], xmm8
	MOVAPD xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	SUBPD xmm9, xmm8
	MOVAPD xmm7,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c36]
	SUBPD xmm10, xmm8
	MOVAPD xmm5, xmm7
	SUBPD xmm11, xmm8
	MOVAPD xmm4, xmm7
	SUBPD xmm13, xmm8
	MOVAPD xmm3, xmm7
	SUBPD xmm12, xmm8
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c36]
	SUBPD xmm14, xmm8
	MOVAPD xmm1, xmm2
	SUBPD xmm15, xmm8
	MOVAPD   [rsp + 288], xmm15
	MOVAPD xmm15, xmm2
	SUBPD xmm6, xmm8
	MOVAPD   [rsp + 304], xmm6
	MOVAPD xmm8, xmm2
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c37]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c38]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c39]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c40]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c41]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c42]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c43]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c44]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c45]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c46]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c47]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c48]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c49]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c50]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c51]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c52]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c53]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MOVAPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c54]
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm6
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm6
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm6
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm6
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm6
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm6
	MULPD xmm15,   [rsp + 288]
	ADDPD xmm15, xmm6
	MULPD xmm8,   [rsp + 304]
	ADDPD xmm8, xmm6
	MULPD xmm7, xmm9
	MULPD xmm7, xmm9
	ADDPD xmm7, xmm9
	MULPD xmm5, xmm10
	MULPD xmm5, xmm10
	ADDPD xmm5, xmm10
	MULPD xmm4, xmm11
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm11
	MULPD xmm3, xmm13
	MULPD xmm3, xmm13
	ADDPD xmm3, xmm13
	MULPD xmm2, xmm12
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm12
	MULPD xmm1, xmm14
	MULPD xmm1, xmm14
	ADDPD xmm1, xmm14
	MOVAPD xmm9,   [rsp + 288]
	MULPD xmm15, xmm9
	MULPD xmm15, xmm9
	ADDPD xmm15, xmm9
	MOVAPD xmm9,   [rsp + 304]
	MULPD xmm8, xmm9
	MULPD xmm8, xmm9
	ADDPD xmm8, xmm9
	MOVDQA xmm9,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c27]
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c28]
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c55]
	MOVAPD xmm12,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c56]
	MOVAPD xmm13,   [rsp + 160]
	PADDQ xmm13, xmm9
	SUBPD xmm13, xmm10
	MOVAPS xmm14, xmm13
	MULPD xmm14, xmm11
	ADDPD xmm14, xmm7
	MULPD xmm13, xmm12
	ADDPD xmm14, xmm13
	MOVAPD xmm13,   [rsp + 176]
	PADDQ xmm13, xmm9
	SUBPD xmm13, xmm10
	MOVAPS xmm7, xmm13
	MULPD xmm7, xmm11
	ADDPD xmm7, xmm5
	MULPD xmm13, xmm12
	ADDPD xmm7, xmm13
	MOVAPD xmm13,   [rsp + 192]
	PADDQ xmm13, xmm9
	SUBPD xmm13, xmm10
	MOVAPS xmm6, xmm13
	MULPD xmm6, xmm11
	ADDPD xmm6, xmm4
	MULPD xmm13, xmm12
	ADDPD xmm6, xmm13
	MOVAPD xmm13,   [rsp + 208]
	PADDQ xmm13, xmm9
	SUBPD xmm13, xmm10
	MOVAPS xmm5, xmm13
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm3
	MULPD xmm13, xmm12
	ADDPD xmm5, xmm13
	MOVAPD xmm13,   [rsp + 224]
	PADDQ xmm13, xmm9
	SUBPD xmm13, xmm10
	MOVAPS xmm4, xmm13
	MULPD xmm4, xmm11
	ADDPD xmm4, xmm2
	MULPD xmm13, xmm12
	ADDPD xmm4, xmm13
	MOVAPD xmm13,   [rsp + 240]
	PADDQ xmm13, xmm9
	SUBPD xmm13, xmm10
	MOVAPS xmm3, xmm13
	MULPD xmm3, xmm11
	ADDPD xmm3, xmm1
	MULPD xmm13, xmm12
	ADDPD xmm3, xmm13
	MOVAPD xmm13,   [rsp + 256]
	PADDQ xmm13, xmm9
	SUBPD xmm13, xmm10
	MOVAPS xmm2, xmm13
	MULPD xmm2, xmm11
	ADDPD xmm2, xmm15
	MULPD xmm13, xmm12
	ADDPD xmm2, xmm13
	MOVAPD xmm13,   [rsp + 272]
	PADDQ xmm13, xmm9
	SUBPD xmm13, xmm10
	MOVAPS xmm9, xmm13
	MULPD xmm9, xmm11
	ADDPD xmm9, xmm8
	MULPD xmm13, xmm12
	ADDPD xmm9, xmm13
	MOVAPD xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c31]
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c57]
	MOVAPD xmm0, [rdi]
	BLENDVPD xmm14, xmm8, xmm0
	MOVAPS xmm11, xmm0
	CMPNLTPD xmm0, xmm10
	BLENDVPD xmm14, xmm11, xmm0
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm11
	BLENDVPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c58], xmm0
	MOVUPD [rsi], xmm14
	MOVAPD xmm0, [byte rdi + 16]
	BLENDVPD xmm7, xmm8, xmm0
	MOVAPS xmm11, xmm0
	CMPNLTPD xmm0, xmm10
	BLENDVPD xmm7, xmm11, xmm0
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm11
	BLENDVPD xmm7,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c58], xmm0
	MOVUPD [byte rsi + 16], xmm7
	MOVAPD xmm0, [byte rdi + 32]
	BLENDVPD xmm6, xmm8, xmm0
	MOVAPS xmm11, xmm0
	CMPNLTPD xmm0, xmm10
	BLENDVPD xmm6, xmm11, xmm0
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm11
	BLENDVPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c58], xmm0
	MOVUPD [byte rsi + 32], xmm6
	MOVAPD xmm0, [byte rdi + 48]
	BLENDVPD xmm5, xmm8, xmm0
	MOVAPS xmm11, xmm0
	CMPNLTPD xmm0, xmm10
	BLENDVPD xmm5, xmm11, xmm0
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm11
	BLENDVPD xmm5,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c58], xmm0
	MOVUPD [byte rsi + 48], xmm5
	MOVAPD xmm0, [byte rdi + 64]
	BLENDVPD xmm4, xmm8, xmm0
	MOVAPS xmm11, xmm0
	CMPNLTPD xmm0, xmm10
	BLENDVPD xmm4, xmm11, xmm0
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm11
	BLENDVPD xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c58], xmm0
	MOVUPD [byte rsi + 64], xmm4
	MOVAPD xmm0, [byte rdi + 80]
	BLENDVPD xmm3, xmm8, xmm0
	MOVAPS xmm11, xmm0
	CMPNLTPD xmm0, xmm10
	BLENDVPD xmm3, xmm11, xmm0
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm11
	BLENDVPD xmm3,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c58], xmm0
	MOVUPD [byte rsi + 80], xmm3
	MOVAPD xmm0, [byte rdi + 96]
	BLENDVPD xmm2, xmm8, xmm0
	MOVAPS xmm11, xmm0
	CMPNLTPD xmm0, xmm10
	BLENDVPD xmm2, xmm11, xmm0
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm11
	BLENDVPD xmm2,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c58], xmm0
	MOVUPD [byte rsi + 96], xmm2
	MOVAPD xmm0, [byte rdi + 112]
	BLENDVPD xmm9, xmm8, xmm0
	MOVAPS xmm8, xmm0
	CMPNLTPD xmm0, xmm10
	BLENDVPD xmm9, xmm8, xmm0
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm8
	BLENDVPD xmm9,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c58], xmm0
	MOVUPD [byte rsi + 112], xmm9
	JMP .process_batch_increment

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.SandyBridge progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Log_V64f_V64f_SandyBridge_constants:
	.c0: DQ 0x4330000000000000, 0x4330000000000000
	.c2: DQ 0x0000000000000432, 0x0000000000000432
	.c1: DQ 0x4330000000000000
	.c5: DQ 0x3FF6A09E667F3BCD
	.c7: DQ 0x3FF0000000000000
	.c8: DQ 0xBF9CC4EC078138E3
	.c3: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c6: DQ 0x0010000000000000, 0x0010000000000000
	.c27: DQ 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01
	.c9: DQ 0x3FB0266CD08DB2F2
	.c10: DQ 0xBFB1654764F478EC
	.c11: DQ 0x3FAEA17E14773369
	.c12: DQ 0xBFAEED2E2BB64B2E
	.c13: DQ 0x3FB0F23916A44515
	.c14: DQ 0xBFB25480A82633AF
	.c15: DQ 0x3FB3B4ED39194B87
	.c16: DQ 0xBFB554D5ACD502AB
	.c17: DQ 0x3FB745980F3FB889
	.c18: DQ 0xBFB9999C5BE751E3
	.c19: DQ 0x3FBC71C90DB06248
	.c20: DQ 0xBFBFFFFFFBD8606D
	.c21: DQ 0x3FC249248DAE4B2A
	.c22: DQ 0xBFC55555554A6A2B
	.c23: DQ 0x3FC9999999A43E4F
	.c24: DQ 0xBFD00000000013C7
	.c25: DQ 0x3FD5555555555103
	.c26: DQ 0xBFDFFFFFFFFFFFF2
	.c28: DQ 0x4338000000000000
	.c29: DQ 0x3D2EF35793C76730
	.c30: DQ 0x3FE62E42FEFA3800
	ALIGN 32
	.c31: DQ 0x7FF8000000000000, 0x7FF8000000000000
	.c32: DQ 0xFFF0000000000000, 0xFFF0000000000000
	.c33: DQ 0x7FF0000000000000, 0x7FF0000000000000
	ALIGN 32
	.c34: DQ 0x0010000000000000, 0x0010000000000000, 0x0010000000000000, 0x0010000000000000
	.c35: DQ 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000
	.c36: DQ 0x7FEFFFFFFFFFFFFF, 0x7FEFFFFFFFFFFFFF, 0x7FEFFFFFFFFFFFFF, 0x7FEFFFFFFFFFFFFF
	.c37: DQ 0x41F8000000000000, 0x41F8000000000000, 0x41F8000000000000, 0x41F8000000000000
	.c38: DQ 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000
	.c39: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c40: DQ 0x41F800003FF00000, 0x41F800003FF00000, 0x41F800003FF00000, 0x41F800003FF00000
	.c41: DQ 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD
	.c42: DQ 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3
	.c43: DQ 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2
	.c44: DQ 0xBFB1654764F478EC, 0xBFB1654764F478EC, 0xBFB1654764F478EC, 0xBFB1654764F478EC
	.c45: DQ 0x3FAEA17E14773369, 0x3FAEA17E14773369, 0x3FAEA17E14773369, 0x3FAEA17E14773369
	.c46: DQ 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E
	.c47: DQ 0x3FB0F23916A44515, 0x3FB0F23916A44515, 0x3FB0F23916A44515, 0x3FB0F23916A44515
	.c48: DQ 0xBFB25480A82633AF, 0xBFB25480A82633AF, 0xBFB25480A82633AF, 0xBFB25480A82633AF
	.c49: DQ 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87
	.c50: DQ 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB
	.c51: DQ 0x3FB745980F3FB889, 0x3FB745980F3FB889, 0x3FB745980F3FB889, 0x3FB745980F3FB889
	.c52: DQ 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3
	.c53: DQ 0x3FBC71C90DB06248, 0x3FBC71C90DB06248, 0x3FBC71C90DB06248, 0x3FBC71C90DB06248
	.c54: DQ 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D
	.c55: DQ 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A
	.c56: DQ 0xBFC55555554A6A2B, 0xBFC55555554A6A2B, 0xBFC55555554A6A2B, 0xBFC55555554A6A2B
	.c57: DQ 0x3FC9999999A43E4F, 0x3FC9999999A43E4F, 0x3FC9999999A43E4F, 0x3FC9999999A43E4F
	.c58: DQ 0xBFD00000000013C7, 0xBFD00000000013C7, 0xBFD00000000013C7, 0xBFD00000000013C7
	.c59: DQ 0x3FD5555555555103, 0x3FD5555555555103, 0x3FD5555555555103, 0x3FD5555555555103
	.c60: DQ 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2
	.c61: DQ 0x3D2EF35793C76730, 0x3D2EF35793C76730, 0x3D2EF35793C76730, 0x3D2EF35793C76730
	.c62: DQ 0x3FE62E42FEFA3800, 0x3FE62E42FEFA3800, 0x3FE62E42FEFA3800, 0x3FE62E42FEFA3800
	.c63: DQ 0x4330000000000000, 0x4330000000000000, 0x4330000000000000, 0x4330000000000000
	.c64: DQ 0x41F8000083100000, 0x41F8000083100000, 0x41F8000083100000, 0x41F8000083100000
	.c65: DQ 0x7FF8000000000000, 0x7FF8000000000000, 0x7FF8000000000000, 0x7FF8000000000000


%ifidn __OUTPUT_FORMAT__, elf64
section .text.SandyBridge progbits alloc exec nowrite align=16
global _yepMath_Log_V64f_V64f_SandyBridge
_yepMath_Log_V64f_V64f_SandyBridge:
%else
section .text
global __yepMath_Log_V64f_V64f_SandyBridge
__yepMath_Log_V64f_V64f_SandyBridge:
%endif
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 640
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm8, [rdi]
	VPSRLQ xmm9, xmm8, 52
	VORPS xmm10, xmm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c0]
	VSUBSD xmm10, xmm10, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c1]
	VPXOR xmm11, xmm11, xmm11
	VPCMPEQQ xmm11, xmm11, xmm9
	VPSRLQ xmm12, xmm10, 52
	VPSUBQ xmm12, xmm12,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c2]
	VPBLENDVB xmm8, xmm8, xmm10, xmm11
	VPAND xmm8, xmm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c3]
	VPOR xmm8, xmm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c4]
	VPAND xmm10, xmm12, xmm11
	VPOR xmm10, xmm10, xmm9
	VMOVSD xmm9, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c5]
	VCMPLTSD xmm9, xmm9, xmm8
	VPSUBQ xmm10, xmm10, xmm9
	VPAND xmm9, xmm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c6]
	VPXOR xmm8, xmm8, xmm9
	VSUBSD xmm9, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c7]
	VMOVSD xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c8]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c9]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c10]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c11]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c12]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c13]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c14]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c15]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c16]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c17]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c18]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c19]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c20]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c21]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c22]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c23]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c24]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c25]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c26]
	VMULSD xmm8, xmm8, xmm9
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, xmm9
	VPADDQ xmm10, xmm10,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c27]
	VSUBSD xmm10, xmm10, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c28]
	VMOVSD xmm9, [rdi]
	VMULSD xmm11, xmm10, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c29]
	VADDSD xmm11, xmm11, xmm8
	VMULSD xmm10, xmm10, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c30]
	VADDSD xmm11, xmm11, xmm10
	VBLENDVPD xmm11, xmm11,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c31], xmm9
	VPXOR xmm8, xmm8, xmm8
	VPCMPEQQ xmm8, xmm8, xmm9
	VBLENDVPD xmm11, xmm11,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c32], xmm8
	VCMPNLTSD xmm8, xmm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c33]
	VBLENDVPD xmm11, xmm11, xmm9, xmm8
	VMOVSD [rsi], xmm11
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB rdx, 32
	JB .process_restore
	align 32
	.process_batch_fast:
	VMOVAPD ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VMOVAPD ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c35]
	VMOVAPD ymm10,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c36]
	VMOVAPD ymm11, [rdi]
	VCMPLTPD ymm12, ymm11, ymm8
	VANDPD ymm13, ymm11, ymm9
	VMOVSHDUP ymm13, ymm13
	VCMPGTPD ymm14, ymm11, ymm10
	VORPD ymm12, ymm12, ymm14
	VTESTPD ymm12, ymm12
	JNZ .process_batch_full
	VMOVAPD ymm12, [byte rdi + 32]
	VCMPLTPD ymm14, ymm12, ymm8
	VANDPD ymm15, ymm12, ymm9
	VMOVSHDUP ymm15, ymm15
	VCMPGTPD ymm7, ymm12, ymm10
	VORPD ymm14, ymm14, ymm7
	VTESTPD ymm14, ymm14
	JNZ .process_batch_full
	VMOVAPD ymm14, [byte rdi + 64]
	VCMPLTPD ymm7, ymm14, ymm8
	VANDPD ymm6, ymm14, ymm9
	VMOVSHDUP ymm6, ymm6
	VCMPGTPD ymm5, ymm14, ymm10
	VORPD ymm7, ymm7, ymm5
	VTESTPD ymm7, ymm7
	JNZ .process_batch_full
	VMOVAPD ymm7, [byte rdi + 96]
	VCMPLTPD ymm5, ymm7, ymm8
	VANDPD ymm9, ymm7, ymm9
	VMOVSHDUP ymm9, ymm9
	VCMPGTPD ymm10, ymm7, ymm10
	VORPD ymm10, ymm5, ymm10
	VTESTPD ymm10, ymm10
	JNZ .process_batch_full
	VMOVAPD ymm10,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37]
	VMOVAPD ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c38]
	VANDPD ymm11, ymm11,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm11, ymm11, ymm5
	VBLENDPS ymm13, ymm13, ymm10, 170
	VSUBPD ymm13, ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VANDPD ymm12, ymm12,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm12, ymm12, ymm5
	VBLENDPS ymm15, ymm15, ymm10, 170
	VSUBPD ymm15, ymm15,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VANDPD ymm14, ymm14,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm14, ymm14, ymm5
	VBLENDPS ymm6, ymm6, ymm10, 170
	VSUBPD ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VANDPD ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm7, ymm7, ymm5
	VBLENDPS ymm9, ymm9, ymm10, 170
	VSUBPD ymm9, ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VCMPGTPD ymm10, ymm11,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm4, ymm10, ymm5
	VADDPD ymm13, ymm13, ymm4
	VMOVAPD   [rsp], ymm13
	VANDPD ymm10, ymm10, ymm8
	VXORPD ymm11, ymm11, ymm10
	VSUBPD ymm10, ymm11, ymm5
	VCMPGTPD ymm11, ymm12,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm13, ymm11, ymm5
	VADDPD ymm15, ymm15, ymm13
	VMOVAPD   [rsp + 32], ymm15
	VANDPD ymm11, ymm11, ymm8
	VXORPD ymm12, ymm12, ymm11
	VSUBPD ymm11, ymm12, ymm5
	VCMPGTPD ymm12, ymm14,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm13, ymm12, ymm5
	VADDPD ymm6, ymm6, ymm13
	VMOVAPD   [rsp + 64], ymm6
	VANDPD ymm12, ymm12, ymm8
	VXORPD ymm14, ymm14, ymm12
	VSUBPD ymm12, ymm14, ymm5
	VCMPGTPD ymm13, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm14, ymm13, ymm5
	VADDPD ymm9, ymm9, ymm14
	VMOVAPD   [rsp + 96], ymm9
	VANDPD ymm9, ymm13, ymm8
	VXORPD ymm7, ymm7, ymm9
	VSUBPD ymm9, ymm7, ymm5
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c35]
	VMOVAPD ymm14,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c36]
	VMOVAPD ymm15, [dword rdi + 128]
	VCMPLTPD ymm7, ymm15, ymm8
	VANDPD ymm6, ymm15, ymm13
	VMOVSHDUP ymm6, ymm6
	VCMPGTPD ymm5, ymm15, ymm14
	VORPD ymm7, ymm7, ymm5
	VTESTPD ymm7, ymm7
	JNZ .process_batch_full
	VMOVAPD ymm7, [dword rdi + 160]
	VCMPLTPD ymm5, ymm7, ymm8
	VANDPD ymm4, ymm7, ymm13
	VMOVSHDUP ymm4, ymm4
	VCMPGTPD ymm3, ymm7, ymm14
	VORPD ymm5, ymm5, ymm3
	VTESTPD ymm5, ymm5
	JNZ .process_batch_full
	VMOVAPD ymm5, [dword rdi + 192]
	VCMPLTPD ymm3, ymm5, ymm8
	VANDPD ymm2, ymm5, ymm13
	VMOVSHDUP ymm2, ymm2
	VCMPGTPD ymm1, ymm5, ymm14
	VORPD ymm3, ymm3, ymm1
	VTESTPD ymm3, ymm3
	JNZ .process_batch_full
	VMOVAPD ymm3, [dword rdi + 224]
	VCMPLTPD ymm1, ymm3, ymm8
	VANDPD ymm13, ymm3, ymm13
	VMOVSHDUP ymm13, ymm13
	VCMPGTPD ymm14, ymm3, ymm14
	VORPD ymm14, ymm1, ymm14
	VTESTPD ymm14, ymm14
	JNZ .process_batch_full
	VMOVAPD ymm14,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37]
	VMOVAPD ymm1,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c38]
	VANDPD ymm15, ymm15,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm15, ymm15, ymm1
	VBLENDPS ymm6, ymm6, ymm14, 170
	VSUBPD ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VANDPD ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm7, ymm7, ymm1
	VBLENDPS ymm4, ymm4, ymm14, 170
	VSUBPD ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VANDPD ymm5, ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm5, ymm5, ymm1
	VBLENDPS ymm2, ymm2, ymm14, 170
	VSUBPD ymm2, ymm2,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VANDPD ymm3, ymm3,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm3, ymm3, ymm1
	VBLENDPS ymm13, ymm13, ymm14, 170
	VSUBPD ymm13, ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VCMPGTPD ymm14, ymm15,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm0, ymm14, ymm1
	VADDPD ymm6, ymm6, ymm0
	VMOVAPD   [rsp + 128], ymm6
	VANDPD ymm14, ymm14, ymm8
	VXORPD ymm15, ymm15, ymm14
	VSUBPD ymm14, ymm15, ymm1
	VCMPGTPD ymm15, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm6, ymm15, ymm1
	VADDPD ymm4, ymm4, ymm6
	VMOVAPD   [rsp + 160], ymm4
	VANDPD ymm15, ymm15, ymm8
	VXORPD ymm7, ymm7, ymm15
	VSUBPD ymm15, ymm7, ymm1
	VCMPGTPD ymm7, ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm6, ymm7, ymm1
	VADDPD ymm2, ymm2, ymm6
	VMOVAPD   [rsp + 192], ymm2
	VANDPD ymm7, ymm7, ymm8
	VXORPD ymm5, ymm5, ymm7
	VSUBPD ymm7, ymm5, ymm1
	VMOVAPD   [rsp + 224], ymm7
	VCMPGTPD ymm7, ymm3,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm6, ymm7, ymm1
	VADDPD ymm13, ymm13, ymm6
	VMOVAPD   [rsp + 256], ymm13
	VANDPD ymm8, ymm7, ymm8
	VXORPD ymm3, ymm3, ymm8
	VSUBPD ymm8, ymm3, ymm1
	VMOVAPD   [rsp + 288], ymm8
	VMOVAPD ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c42]
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c43]
	VMULPD ymm7, ymm8, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm8, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm8, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm8, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm8, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm8, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm8,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c44]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c45]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c46]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c47]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c48]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c49]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c50]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c51]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c52]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c53]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c54]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c55]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c56]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c57]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c58]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c59]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMOVAPD ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c60]
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm13
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm13
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm13
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm13
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm13
	VMULPD ymm1, ymm1,   [rsp + 224]
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8,   [rsp + 288]
	VADDPD ymm8, ymm8, ymm13
	VMULPD ymm7, ymm7, ymm10
	VMULPD ymm6, ymm6, ymm11
	VMULPD ymm5, ymm5, ymm12
	VMULPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm14
	VMULPD ymm2, ymm2, ymm15
	VMOVAPD ymm13,   [rsp + 224]
	VMULPD ymm1, ymm1, ymm13
	VMOVAPD ymm0,   [rsp + 288]
	VMULPD ymm8, ymm8, ymm0
	VMULPD ymm7, ymm7, ymm10
	VADDPD ymm7, ymm7, ymm10
	VMULPD ymm6, ymm6, ymm11
	VADDPD ymm6, ymm6, ymm11
	VMULPD ymm5, ymm5, ymm12
	VADDPD ymm5, ymm5, ymm12
	VMULPD ymm4, ymm4, ymm9
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm14
	VADDPD ymm3, ymm3, ymm14
	VMULPD ymm2, ymm2, ymm15
	VADDPD ymm2, ymm2, ymm15
	VMULPD ymm1, ymm1, ymm13
	VADDPD ymm1, ymm1, ymm13
	VMULPD ymm8, ymm8, ymm0
	VADDPD ymm8, ymm8, ymm0
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c61]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c62]
	VMOVAPD ymm11,   [rsp]
	VMULPD ymm12, ymm11, ymm9
	VADDPD ymm7, ymm7, ymm12
	VMOVAPD ymm12,   [rsp + 32]
	VMULPD ymm13, ymm12, ymm9
	VADDPD ymm6, ymm6, ymm13
	VMOVAPD ymm13,   [rsp + 64]
	VMULPD ymm14, ymm13, ymm9
	VADDPD ymm5, ymm5, ymm14
	VMOVAPD ymm14,   [rsp + 96]
	VMULPD ymm15, ymm14, ymm9
	VADDPD ymm4, ymm4, ymm15
	VMULPD ymm11, ymm11, ymm10
	VADDPD ymm7, ymm7, ymm11
	VMOVUPD [rsi], xmm7
	VEXTRACTF128 [byte rsi + 16], ymm7, 1
	VMULPD ymm11, ymm12, ymm10
	VADDPD ymm6, ymm6, ymm11
	VMOVUPD [byte rsi + 32], xmm6
	VEXTRACTF128 [byte rsi + 48], ymm6, 1
	VMULPD ymm11, ymm13, ymm10
	VADDPD ymm5, ymm5, ymm11
	VMOVUPD [byte rsi + 64], xmm5
	VEXTRACTF128 [byte rsi + 80], ymm5, 1
	VMULPD ymm11, ymm14, ymm10
	VADDPD ymm4, ymm4, ymm11
	VMOVUPD [byte rsi + 96], xmm4
	VEXTRACTF128 [byte rsi + 112], ymm4, 1
	VMOVAPD ymm11,   [rsp + 128]
	VMULPD ymm12, ymm11, ymm9
	VADDPD ymm3, ymm3, ymm12
	VMOVAPD ymm12,   [rsp + 160]
	VMULPD ymm13, ymm12, ymm9
	VADDPD ymm2, ymm2, ymm13
	VMOVAPD ymm13,   [rsp + 192]
	VMULPD ymm14, ymm13, ymm9
	VADDPD ymm1, ymm1, ymm14
	VMOVAPD ymm14,   [rsp + 256]
	VMULPD ymm9, ymm14, ymm9
	VADDPD ymm8, ymm8, ymm9
	VMULPD ymm9, ymm11, ymm10
	VADDPD ymm3, ymm3, ymm9
	VMOVUPD [dword rsi + 128], xmm3
	VEXTRACTF128 [dword rsi + 144], ymm3, 1
	VMULPD ymm9, ymm12, ymm10
	VADDPD ymm2, ymm2, ymm9
	VMOVUPD [dword rsi + 160], xmm2
	VEXTRACTF128 [dword rsi + 176], ymm2, 1
	VMULPD ymm9, ymm13, ymm10
	VADDPD ymm1, ymm1, ymm9
	VMOVUPD [dword rsi + 192], xmm1
	VEXTRACTF128 [dword rsi + 208], ymm1, 1
	VMULPD ymm9, ymm14, ymm10
	VADDPD ymm8, ymm8, ymm9
	VMOVUPD [dword rsi + 224], xmm8
	VEXTRACTF128 [dword rsi + 240], ymm8, 1
	.process_batch_increment:
	ADD rdi, 256
	ADD rsi, 256
	SUB rdx, 32
	JAE .process_batch_fast
	.process_restore:
	ADD rdx, 32
	JZ .return_ok
	.process_single:
	VMOVSD xmm8, [rdi]
	VPSRLQ xmm9, xmm8, 52
	VORPS xmm10, xmm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c0]
	VSUBSD xmm10, xmm10, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c1]
	VPXOR xmm11, xmm11, xmm11
	VPCMPEQQ xmm11, xmm11, xmm9
	VPSRLQ xmm12, xmm10, 52
	VPSUBQ xmm12, xmm12,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c2]
	VPBLENDVB xmm8, xmm8, xmm10, xmm11
	VPAND xmm8, xmm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c3]
	VPOR xmm8, xmm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c4]
	VPAND xmm10, xmm12, xmm11
	VPOR xmm10, xmm10, xmm9
	VMOVSD xmm9, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c5]
	VCMPLTSD xmm9, xmm9, xmm8
	VPSUBQ xmm10, xmm10, xmm9
	VPAND xmm9, xmm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c6]
	VPXOR xmm8, xmm8, xmm9
	VSUBSD xmm9, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c7]
	VMOVSD xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c8]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c9]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c10]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c11]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c12]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c13]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c14]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c15]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c16]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c17]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c18]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c19]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c20]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c21]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c22]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c23]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c24]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c25]
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c26]
	VMULSD xmm8, xmm8, xmm9
	VMULSD xmm8, xmm8, xmm9
	VADDSD xmm8, xmm8, xmm9
	VPADDQ xmm10, xmm10,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c27]
	VSUBSD xmm10, xmm10, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c28]
	VMOVSD xmm9, [rdi]
	VMULSD xmm11, xmm10, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c29]
	VADDSD xmm11, xmm11, xmm8
	VMULSD xmm10, xmm10, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c30]
	VADDSD xmm11, xmm11, xmm10
	VBLENDVPD xmm11, xmm11,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c31], xmm9
	VPXOR xmm8, xmm8, xmm8
	VPCMPEQQ xmm8, xmm8, xmm9
	VBLENDVPD xmm11, xmm11,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c32], xmm8
	VCMPNLTSD xmm8, xmm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c33]
	VBLENDVPD xmm11, xmm11, xmm9, xmm8
	VMOVSD [rsi], xmm11
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	MOV rsp, [dword rsp + 640]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	VMOVAPS ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c63]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c38]
	VMOVDQA ymm11,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c35]
	VMOVAPD ymm12, [rdi]
	VORPD ymm13, ymm12, ymm9
	VSUBPD ymm13, ymm13, ymm9
	VCMPLTPD ymm14, ymm12,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VBLENDVPD ymm12, ymm12, ymm13, ymm14
	VANDPD ymm13, ymm12,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm13, ymm13, ymm10
	VANDPD ymm12, ymm12, ymm11
	VBLENDVPD ymm14, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c64], ymm14
	VMOVSHDUP ymm12, ymm12
	VBLENDPS ymm12, ymm12,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37], 170
	VSUBPD ymm12, ymm12, ymm14
	VCMPGTPD ymm14, ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm15, ymm14, ymm10
	VADDPD ymm12, ymm12, ymm15
	VMOVAPD   [rsp + 320], ymm12
	VANDPD ymm14, ymm14,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VXORPD ymm13, ymm13, ymm14
	VSUBPD ymm12, ymm13, ymm10
	VMOVAPD ymm13, [byte rdi + 32]
	VORPD ymm14, ymm13, ymm9
	VSUBPD ymm14, ymm14, ymm9
	VCMPLTPD ymm15, ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VBLENDVPD ymm13, ymm13, ymm14, ymm15
	VANDPD ymm14, ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm14, ymm14, ymm10
	VANDPD ymm13, ymm13, ymm11
	VBLENDVPD ymm15, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c64], ymm15
	VMOVSHDUP ymm13, ymm13
	VBLENDPS ymm13, ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37], 170
	VSUBPD ymm13, ymm13, ymm15
	VCMPGTPD ymm15, ymm14,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm7, ymm15, ymm10
	VADDPD ymm13, ymm13, ymm7
	VMOVAPD   [rsp + 352], ymm13
	VANDPD ymm15, ymm15,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VXORPD ymm14, ymm14, ymm15
	VSUBPD ymm13, ymm14, ymm10
	VMOVAPD ymm14, [byte rdi + 64]
	VORPD ymm15, ymm14, ymm9
	VSUBPD ymm15, ymm15, ymm9
	VCMPLTPD ymm7, ymm14,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VBLENDVPD ymm14, ymm14, ymm15, ymm7
	VANDPD ymm15, ymm14,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm15, ymm15, ymm10
	VANDPD ymm14, ymm14, ymm11
	VBLENDVPD ymm7, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c64], ymm7
	VMOVSHDUP ymm14, ymm14
	VBLENDPS ymm14, ymm14,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37], 170
	VSUBPD ymm14, ymm14, ymm7
	VCMPGTPD ymm7, ymm15,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm6, ymm7, ymm10
	VADDPD ymm14, ymm14, ymm6
	VMOVAPD   [rsp + 384], ymm14
	VANDPD ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VXORPD ymm15, ymm15, ymm7
	VSUBPD ymm14, ymm15, ymm10
	VMOVAPD ymm15, [byte rdi + 96]
	VORPD ymm7, ymm15, ymm9
	VSUBPD ymm7, ymm7, ymm9
	VCMPLTPD ymm6, ymm15,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VBLENDVPD ymm15, ymm15, ymm7, ymm6
	VANDPD ymm7, ymm15,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm7, ymm7, ymm10
	VANDPD ymm15, ymm15, ymm11
	VBLENDVPD ymm6, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c64], ymm6
	VMOVSHDUP ymm15, ymm15
	VBLENDPS ymm15, ymm15,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37], 170
	VSUBPD ymm15, ymm15, ymm6
	VCMPGTPD ymm6, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm5, ymm6, ymm10
	VADDPD ymm15, ymm15, ymm5
	VMOVAPD   [rsp + 416], ymm15
	VANDPD ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VXORPD ymm7, ymm7, ymm6
	VSUBPD ymm15, ymm7, ymm10
	VMOVAPD ymm7, [dword rdi + 128]
	VORPD ymm6, ymm7, ymm9
	VSUBPD ymm6, ymm6, ymm9
	VCMPLTPD ymm5, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VBLENDVPD ymm7, ymm7, ymm6, ymm5
	VANDPD ymm6, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm6, ymm6, ymm10
	VANDPD ymm7, ymm7, ymm11
	VBLENDVPD ymm5, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c64], ymm5
	VMOVSHDUP ymm7, ymm7
	VBLENDPS ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37], 170
	VSUBPD ymm7, ymm7, ymm5
	VCMPGTPD ymm5, ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm4, ymm5, ymm10
	VADDPD ymm7, ymm7, ymm4
	VMOVAPD   [rsp + 448], ymm7
	VANDPD ymm5, ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VXORPD ymm6, ymm6, ymm5
	VSUBPD ymm7, ymm6, ymm10
	VMOVAPD ymm6, [dword rdi + 160]
	VORPD ymm5, ymm6, ymm9
	VSUBPD ymm5, ymm5, ymm9
	VCMPLTPD ymm4, ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VBLENDVPD ymm6, ymm6, ymm5, ymm4
	VANDPD ymm5, ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm5, ymm5, ymm10
	VANDPD ymm6, ymm6, ymm11
	VBLENDVPD ymm4, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c64], ymm4
	VMOVSHDUP ymm6, ymm6
	VBLENDPS ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37], 170
	VSUBPD ymm6, ymm6, ymm4
	VCMPGTPD ymm4, ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm3, ymm4, ymm10
	VADDPD ymm6, ymm6, ymm3
	VMOVAPD   [rsp + 480], ymm6
	VANDPD ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VXORPD ymm5, ymm5, ymm4
	VSUBPD ymm6, ymm5, ymm10
	VMOVAPD ymm5, [dword rdi + 192]
	VORPD ymm4, ymm5, ymm9
	VSUBPD ymm4, ymm4, ymm9
	VCMPLTPD ymm3, ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VBLENDVPD ymm5, ymm5, ymm4, ymm3
	VANDPD ymm4, ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm4, ymm4, ymm10
	VANDPD ymm5, ymm5, ymm11
	VBLENDVPD ymm3, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c64], ymm3
	VMOVSHDUP ymm5, ymm5
	VBLENDPS ymm5, ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37], 170
	VSUBPD ymm5, ymm5, ymm3
	VCMPGTPD ymm3, ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm2, ymm3, ymm10
	VADDPD ymm5, ymm5, ymm2
	VMOVAPD   [rsp + 512], ymm5
	VANDPD ymm3, ymm3,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VXORPD ymm4, ymm4, ymm3
	VSUBPD ymm5, ymm4, ymm10
	VMOVAPD   [rsp + 544], ymm5
	VMOVAPD ymm5, [dword rdi + 224]
	VORPD ymm4, ymm5, ymm9
	VSUBPD ymm4, ymm4, ymm9
	VCMPLTPD ymm9, ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VBLENDVPD ymm5, ymm5, ymm4, ymm9
	VANDPD ymm4, ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm4, ymm4, ymm10
	VANDPD ymm11, ymm5, ymm11
	VBLENDVPD ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c64], ymm9
	VMOVSHDUP ymm11, ymm11
	VBLENDPS ymm11, ymm11,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37], 170
	VSUBPD ymm11, ymm11, ymm8
	VCMPGTPD ymm8, ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm9, ymm8, ymm10
	VADDPD ymm11, ymm11, ymm9
	VMOVAPD   [rsp + 576], ymm11
	VANDPD ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VXORPD ymm4, ymm4, ymm8
	VSUBPD ymm8, ymm4, ymm10
	VMOVAPD   [rsp + 608], ymm8
	VMOVAPS ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c42]
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c43]
	VMULPD ymm10, ymm8, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm8, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm8, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm8, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm8, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm8, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm8,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c44]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c45]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c46]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c47]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c48]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c49]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c50]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c51]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c52]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c53]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c54]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c55]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c56]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c57]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c58]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c59]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c60]
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm9
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm9
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm9
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1,   [rsp + 544]
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm8, ymm8,   [rsp + 608]
	VADDPD ymm8, ymm8, ymm9
	VMULPD ymm10, ymm10, ymm12
	VMULPD ymm10, ymm10, ymm12
	VADDPD ymm10, ymm10, ymm12
	VMULPD ymm11, ymm11, ymm13
	VMULPD ymm11, ymm11, ymm13
	VADDPD ymm11, ymm11, ymm13
	VMULPD ymm5, ymm5, ymm14
	VMULPD ymm5, ymm5, ymm14
	VADDPD ymm5, ymm5, ymm14
	VMULPD ymm4, ymm4, ymm15
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm15
	VMULPD ymm3, ymm3, ymm7
	VMULPD ymm3, ymm3, ymm7
	VADDPD ymm3, ymm3, ymm7
	VMULPD ymm2, ymm2, ymm6
	VMULPD ymm2, ymm2, ymm6
	VADDPD ymm2, ymm2, ymm6
	VMOVAPD ymm9,   [rsp + 544]
	VMULPD ymm1, ymm1, ymm9
	VMULPD ymm1, ymm1, ymm9
	VADDPD ymm1, ymm1, ymm9
	VMOVAPD ymm9,   [rsp + 608]
	VMULPD ymm8, ymm8, ymm9
	VMULPD ymm8, ymm8, ymm9
	VADDPD ymm8, ymm8, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c61]
	VMOVAPS ymm12,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c62]
	VMOVAPD ymm13,   [rsp + 320]
	VMULPD ymm14, ymm13, ymm9
	VADDPD ymm10, ymm10, ymm14
	VMULPD ymm13, ymm13, ymm12
	VADDPD ymm10, ymm10, ymm13
	VMOVAPD ymm13,   [rsp + 352]
	VMULPD ymm14, ymm13, ymm9
	VADDPD ymm11, ymm11, ymm14
	VMULPD ymm13, ymm13, ymm12
	VADDPD ymm11, ymm11, ymm13
	VMOVAPD ymm13,   [rsp + 384]
	VMULPD ymm14, ymm13, ymm9
	VADDPD ymm5, ymm5, ymm14
	VMULPD ymm13, ymm13, ymm12
	VADDPD ymm5, ymm5, ymm13
	VMOVAPD ymm13,   [rsp + 416]
	VMULPD ymm14, ymm13, ymm9
	VADDPD ymm4, ymm4, ymm14
	VMULPD ymm13, ymm13, ymm12
	VADDPD ymm4, ymm4, ymm13
	VMOVAPD ymm13,   [rsp + 448]
	VMULPD ymm14, ymm13, ymm9
	VADDPD ymm3, ymm3, ymm14
	VMULPD ymm13, ymm13, ymm12
	VADDPD ymm3, ymm3, ymm13
	VMOVAPD ymm13,   [rsp + 480]
	VMULPD ymm14, ymm13, ymm9
	VADDPD ymm2, ymm2, ymm14
	VMULPD ymm13, ymm13, ymm12
	VADDPD ymm2, ymm2, ymm13
	VMOVAPD ymm13,   [rsp + 512]
	VMULPD ymm14, ymm13, ymm9
	VADDPD ymm1, ymm1, ymm14
	VMULPD ymm13, ymm13, ymm12
	VADDPD ymm1, ymm1, ymm13
	VMOVAPD ymm13,   [rsp + 576]
	VMULPD ymm9, ymm13, ymm9
	VADDPD ymm8, ymm8, ymm9
	VMULPD ymm9, ymm13, ymm12
	VADDPD ymm8, ymm8, ymm9
	VXORPD ymm9, ymm9, ymm9
	VMOVAPD ymm12,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c35]
	VSUBPD ymm13, ymm9, ymm12
	VMOVAPD ymm14,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c65]
	VMOVAPD ymm15, [rdi]
	VCMPEQPD ymm7, ymm15, ymm9
	VBLENDVPD ymm10, ymm10, ymm13, ymm7
	VBLENDVPD ymm10, ymm10, ymm14, ymm15
	VCMPNLTPD ymm7, ymm15, ymm12
	VBLENDVPD ymm10, ymm10, ymm15, ymm7
	VMOVUPD [rsi], xmm10
	VEXTRACTF128 [byte rsi + 16], ymm10, 1
	VMOVAPD ymm10, [byte rdi + 32]
	VCMPEQPD ymm15, ymm10, ymm9
	VBLENDVPD ymm11, ymm11, ymm13, ymm15
	VBLENDVPD ymm11, ymm11, ymm14, ymm10
	VCMPNLTPD ymm15, ymm10, ymm12
	VBLENDVPD ymm11, ymm11, ymm10, ymm15
	VMOVUPD [byte rsi + 32], xmm11
	VEXTRACTF128 [byte rsi + 48], ymm11, 1
	VMOVAPD ymm10, [byte rdi + 64]
	VCMPEQPD ymm11, ymm10, ymm9
	VBLENDVPD ymm5, ymm5, ymm13, ymm11
	VBLENDVPD ymm5, ymm5, ymm14, ymm10
	VCMPNLTPD ymm11, ymm10, ymm12
	VBLENDVPD ymm5, ymm5, ymm10, ymm11
	VMOVUPD [byte rsi + 64], xmm5
	VEXTRACTF128 [byte rsi + 80], ymm5, 1
	VMOVAPD ymm10, [byte rdi + 96]
	VCMPEQPD ymm11, ymm10, ymm9
	VBLENDVPD ymm4, ymm4, ymm13, ymm11
	VBLENDVPD ymm4, ymm4, ymm14, ymm10
	VCMPNLTPD ymm11, ymm10, ymm12
	VBLENDVPD ymm4, ymm4, ymm10, ymm11
	VMOVUPD [byte rsi + 96], xmm4
	VEXTRACTF128 [byte rsi + 112], ymm4, 1
	VMOVAPD ymm10, [dword rdi + 128]
	VCMPEQPD ymm11, ymm10, ymm9
	VBLENDVPD ymm3, ymm3, ymm13, ymm11
	VBLENDVPD ymm3, ymm3, ymm14, ymm10
	VCMPNLTPD ymm11, ymm10, ymm12
	VBLENDVPD ymm3, ymm3, ymm10, ymm11
	VMOVUPD [dword rsi + 128], xmm3
	VEXTRACTF128 [dword rsi + 144], ymm3, 1
	VMOVAPD ymm10, [dword rdi + 160]
	VCMPEQPD ymm11, ymm10, ymm9
	VBLENDVPD ymm2, ymm2, ymm13, ymm11
	VBLENDVPD ymm2, ymm2, ymm14, ymm10
	VCMPNLTPD ymm11, ymm10, ymm12
	VBLENDVPD ymm2, ymm2, ymm10, ymm11
	VMOVUPD [dword rsi + 160], xmm2
	VEXTRACTF128 [dword rsi + 176], ymm2, 1
	VMOVAPD ymm10, [dword rdi + 192]
	VCMPEQPD ymm11, ymm10, ymm9
	VBLENDVPD ymm1, ymm1, ymm13, ymm11
	VBLENDVPD ymm1, ymm1, ymm14, ymm10
	VCMPNLTPD ymm11, ymm10, ymm12
	VBLENDVPD ymm1, ymm1, ymm10, ymm11
	VMOVUPD [dword rsi + 192], xmm1
	VEXTRACTF128 [dword rsi + 208], ymm1, 1
	VMOVAPD ymm10, [dword rdi + 224]
	VCMPEQPD ymm9, ymm10, ymm9
	VBLENDVPD ymm8, ymm8, ymm13, ymm9
	VBLENDVPD ymm8, ymm8, ymm14, ymm10
	VCMPNLTPD ymm9, ymm10, ymm12
	VBLENDVPD ymm8, ymm8, ymm10, ymm9
	VMOVUPD [dword rsi + 224], xmm8
	VEXTRACTF128 [dword rsi + 240], ymm8, 1
	JMP .process_batch_increment

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.Bulldozer progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Log_V64f_V64f_Bulldozer_constants:
	.c0: DQ 0x4330000000000000, 0x4330000000000000
	.c2: DQ 0x0000000000000432, 0x0000000000000432
	.c1: DQ 0x4330000000000000
	.c5: DQ 0x3FF6A09E667F3BCD
	.c7: DQ 0x3FF0000000000000
	.c8: DQ 0xBF9CC4EC078138E3
	.c3: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c6: DQ 0x0010000000000000, 0x0010000000000000
	.c27: DQ 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01
	.c9: DQ 0x3FB0266CD08DB2F2
	.c10: DQ 0xBFB1654764F478EC
	.c11: DQ 0x3FAEA17E14773369
	.c12: DQ 0xBFAEED2E2BB64B2E
	.c13: DQ 0x3FB0F23916A44515
	.c14: DQ 0xBFB25480A82633AF
	.c15: DQ 0x3FB3B4ED39194B87
	.c16: DQ 0xBFB554D5ACD502AB
	.c17: DQ 0x3FB745980F3FB889
	.c18: DQ 0xBFB9999C5BE751E3
	.c19: DQ 0x3FBC71C90DB06248
	.c20: DQ 0xBFBFFFFFFBD8606D
	.c21: DQ 0x3FC249248DAE4B2A
	.c22: DQ 0xBFC55555554A6A2B
	.c23: DQ 0x3FC9999999A43E4F
	.c24: DQ 0xBFD00000000013C7
	.c25: DQ 0x3FD5555555555103
	.c26: DQ 0xBFDFFFFFFFFFFFF2
	.c28: DQ 0x4338000000000000
	.c29: DQ 0x3C7ABC9E3B39803F
	.c30: DQ 0x3FE62E42FEFA39EF
	ALIGN 32
	.c31: DQ 0x7FF8000000000000, 0x7FF8000000000000
	.c32: DQ 0xFFF0000000000000, 0xFFF0000000000000
	.c33: DQ 0x7FF0000000000000, 0x7FF0000000000000
	.c36: DQ 0x4338000000000000, 0x4338000000000000
	.c34: DQ 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000
	.c35: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c37: DQ 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD
	.c38: DQ 0x0010000000000000, 0x0010000000000000, 0x0010000000000000, 0x0010000000000000
	.c39: DQ 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3
	.c40: DQ 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2
	.c41: DQ 0xBFB1654764F478EC, 0xBFB1654764F478EC, 0xBFB1654764F478EC, 0xBFB1654764F478EC
	.c42: DQ 0x3FAEA17E14773369, 0x3FAEA17E14773369, 0x3FAEA17E14773369, 0x3FAEA17E14773369
	.c43: DQ 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E
	.c44: DQ 0x3FB0F23916A44515, 0x3FB0F23916A44515, 0x3FB0F23916A44515, 0x3FB0F23916A44515
	.c45: DQ 0xBFB25480A82633AF, 0xBFB25480A82633AF, 0xBFB25480A82633AF, 0xBFB25480A82633AF
	.c46: DQ 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87
	.c47: DQ 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB
	.c48: DQ 0x3FB745980F3FB889, 0x3FB745980F3FB889, 0x3FB745980F3FB889, 0x3FB745980F3FB889
	.c49: DQ 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3
	.c50: DQ 0x3FBC71C90DB06248, 0x3FBC71C90DB06248, 0x3FBC71C90DB06248, 0x3FBC71C90DB06248
	.c51: DQ 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D
	.c52: DQ 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A
	.c53: DQ 0xBFC55555554A6A2B, 0xBFC55555554A6A2B, 0xBFC55555554A6A2B, 0xBFC55555554A6A2B
	.c54: DQ 0x3FC9999999A43E4F, 0x3FC9999999A43E4F, 0x3FC9999999A43E4F, 0x3FC9999999A43E4F
	.c55: DQ 0xBFD00000000013C7, 0xBFD00000000013C7, 0xBFD00000000013C7, 0xBFD00000000013C7
	.c56: DQ 0x3FD5555555555103, 0x3FD5555555555103, 0x3FD5555555555103, 0x3FD5555555555103
	.c57: DQ 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2
	.c58: DQ 0x3C7ABC9E3B39803F, 0x3C7ABC9E3B39803F, 0x3C7ABC9E3B39803F, 0x3C7ABC9E3B39803F
	.c59: DQ 0x3FE62E42FEFA39EF, 0x3FE62E42FEFA39EF
	ALIGN 32
	.c60: DQ 0x41F800003FF00000, 0x41F800003FF00000, 0x41F800003FF00000, 0x41F800003FF00000
	.c61: DQ 0x4330000000000000, 0x4330000000000000, 0x4330000000000000, 0x4330000000000000
	.c62: DQ 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000
	.c63: DQ 0x41F8000083100000, 0x41F8000083100000, 0x41F8000083100000, 0x41F8000083100000
	.c64: DQ 0x41F8000000000000, 0x41F8000000000000, 0x41F8000000000000, 0x41F8000000000000
	.c65: DQ 0x3FE62E42FEFA39EF, 0x3FE62E42FEFA39EF, 0x3FE62E42FEFA39EF, 0x3FE62E42FEFA39EF
	.c66: DQ 0x7FF8000000000000, 0x7FF8000000000000, 0x7FF8000000000000, 0x7FF8000000000000


%ifidn __OUTPUT_FORMAT__, elf64
section .text.Bulldozer progbits alloc exec nowrite align=16
global _yepMath_Log_V64f_V64f_Bulldozer
_yepMath_Log_V64f_V64f_Bulldozer:
%else
section .text
global __yepMath_Log_V64f_V64f_Bulldozer
__yepMath_Log_V64f_V64f_Bulldozer:
%endif
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 384
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm8, [rdi]
	VPSRLQ xmm9, xmm8, 52
	VORPS xmm10, xmm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c0]
	VSUBSD xmm10, xmm10, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c1]
	VPXOR xmm11, xmm11, xmm11
	VPCMPEQQ xmm11, xmm11, xmm9
	VPSRLQ xmm12, xmm10, 52
	VPSUBQ xmm12, xmm12,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c2]
	VPBLENDVB xmm8, xmm8, xmm10, xmm11
	VPAND xmm8, xmm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c3]
	VPOR xmm8, xmm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c4]
	VPAND xmm10, xmm12, xmm11
	VPOR xmm10, xmm10, xmm9
	VMOVSD xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c5]
	VCMPLTSD xmm9, xmm9, xmm8
	VPSUBQ xmm10, xmm10, xmm9
	VPAND xmm9, xmm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c6]
	VPXOR xmm8, xmm8, xmm9
	VSUBSD xmm9, xmm8, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c7]
	VMOVSD xmm8, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c8]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c9]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c10]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c11]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c12]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c13]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c14]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c15]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c16]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c17]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c19]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c20]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c21]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c22]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c23]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c24]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c25]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c26]
	VMULSD xmm8, xmm8, xmm9
	VFMADDSD xmm8, xmm8, xmm9, xmm9
	VPADDQ xmm10, xmm10,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c27]
	VSUBSD xmm10, xmm10, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c28]
	VMOVSD xmm9, [rdi]
	VFMADDSD xmm8, xmm10, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c29], xmm8
	VFMADDSD xmm8, xmm10, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c30], xmm8
	VBLENDVPD xmm8, xmm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c31], xmm9
	VPXOR xmm10, xmm10, xmm10
	VPCMPEQQ xmm10, xmm10, xmm9
	VBLENDVPD xmm8, xmm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c32], xmm10
	VCMPNLTSD xmm10, xmm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c33]
	VBLENDVPD xmm8, xmm8, xmm9, xmm10
	VMOVSD [rsi], xmm8
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB rdx, 24
	JB .process_restore
	align 32
	.process_batch_fast:
	MOV rax, 4503599627370496
	MOV r10, 9214364837600034815
	VMOVAPD ymm8, [rdi]
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c34]
	VPSRLQ xmm10, xmm8, 52
	VEXTRACTF128 xmm11, ymm8, 1
	VPCMOV ymm8, ymm8, ymm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VMOVDQA xmm12,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c27]
	VPSRLQ xmm11, xmm11, 52
	VPADDQ xmm10, xmm10, xmm12
	VPADDQ xmm11, xmm11, xmm12
	VMOVAPD xmm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c36]
	VCMPGTPD ymm14, ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VEXTRACTF128 xmm15, ymm14, 1
	VPSUBQ xmm10, xmm10, xmm14
	VPSUBQ xmm11, xmm11, xmm15
	VANDPD ymm14, ymm14,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VSUBPD xmm10, xmm10, xmm13
	VSUBPD xmm11, xmm11, xmm13
	VXORPD ymm8, ymm8, ymm14
	VMOVAPD   [rsp], xmm10
	VSUBPD ymm8, ymm8, ymm9
	VMOVAPD   [rsp + 16], xmm11
	VMOVAPD ymm10, [byte rdi + 32]
	VPSRLQ xmm11, xmm10, 52
	VEXTRACTF128 xmm14, ymm10, 1
	VPCMOV ymm10, ymm10, ymm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VPSRLQ xmm14, xmm14, 52
	VPADDQ xmm11, xmm11, xmm12
	VPADDQ xmm14, xmm14, xmm12
	VCMPGTPD ymm15, ymm10,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VEXTRACTF128 xmm7, ymm15, 1
	VPSUBQ xmm11, xmm11, xmm15
	VPSUBQ xmm14, xmm14, xmm7
	VANDPD ymm15, ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VSUBPD xmm11, xmm11, xmm13
	VSUBPD xmm14, xmm14, xmm13
	VXORPD ymm10, ymm10, ymm15
	VMOVAPD   [rsp + 32], xmm11
	VSUBPD ymm10, ymm10, ymm9
	VMOVAPD   [rsp + 48], xmm14
	VMOVAPD ymm11, [byte rdi + 64]
	VPSRLQ xmm14, xmm11, 52
	VEXTRACTF128 xmm15, ymm11, 1
	VPCMOV ymm11, ymm11, ymm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VPSRLQ xmm15, xmm15, 52
	VPADDQ xmm14, xmm14, xmm12
	VPADDQ xmm15, xmm15, xmm12
	VCMPGTPD ymm7, ymm11,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VEXTRACTF128 xmm6, ymm7, 1
	VPSUBQ xmm14, xmm14, xmm7
	VPSUBQ xmm15, xmm15, xmm6
	VANDPD ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VSUBPD xmm14, xmm14, xmm13
	VSUBPD xmm15, xmm15, xmm13
	VXORPD ymm11, ymm11, ymm7
	VMOVAPD   [rsp + 64], xmm14
	VSUBPD ymm11, ymm11, ymm9
	VMOVAPD   [rsp + 80], xmm15
	VMOVAPD ymm14, [byte rdi + 96]
	VPSRLQ xmm15, xmm14, 52
	VEXTRACTF128 xmm7, ymm14, 1
	VPCMOV ymm14, ymm14, ymm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VPSRLQ xmm7, xmm7, 52
	VPADDQ xmm15, xmm15, xmm12
	VPADDQ xmm7, xmm7, xmm12
	VCMPGTPD ymm6, ymm14,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VEXTRACTF128 xmm5, ymm6, 1
	VPSUBQ xmm15, xmm15, xmm6
	VPSUBQ xmm7, xmm7, xmm5
	VANDPD ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VSUBPD xmm15, xmm15, xmm13
	VSUBPD xmm7, xmm7, xmm13
	VXORPD ymm14, ymm14, ymm6
	VMOVAPD   [rsp + 96], xmm15
	VSUBPD ymm14, ymm14, ymm9
	VMOVAPD   [rsp + 112], xmm7
	VMOVAPD ymm15, [dword rdi + 128]
	VPSRLQ xmm7, xmm15, 52
	VEXTRACTF128 xmm6, ymm15, 1
	VPCMOV ymm15, ymm15, ymm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VPSRLQ xmm6, xmm6, 52
	VPADDQ xmm7, xmm7, xmm12
	VPADDQ xmm6, xmm6, xmm12
	VCMPGTPD ymm5, ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VEXTRACTF128 xmm4, ymm5, 1
	VPSUBQ xmm7, xmm7, xmm5
	VPSUBQ xmm6, xmm6, xmm4
	VANDPD ymm5, ymm5,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VSUBPD xmm7, xmm7, xmm13
	VSUBPD xmm6, xmm6, xmm13
	VXORPD ymm15, ymm15, ymm5
	VMOVAPD   [rsp + 128], xmm7
	VSUBPD ymm15, ymm15, ymm9
	VMOVAPD   [rsp + 144], xmm6
	VMOVAPD ymm7, [dword rdi + 160]
	VPSRLQ xmm6, xmm7, 52
	VEXTRACTF128 xmm5, ymm7, 1
	VPCMOV ymm7, ymm7, ymm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VPSRLQ xmm5, xmm5, 52
	VPADDQ xmm6, xmm6, xmm12
	VPADDQ xmm5, xmm5, xmm12
	VCMPGTPD ymm12, ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VEXTRACTF128 xmm4, ymm12, 1
	VPSUBQ xmm6, xmm6, xmm12
	VPSUBQ xmm5, xmm5, xmm4
	VANDPD ymm12, ymm12,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VSUBPD xmm6, xmm6, xmm13
	VSUBPD xmm5, xmm5, xmm13
	VXORPD ymm7, ymm7, ymm12
	VMOVAPD   [rsp + 160], xmm6
	VSUBPD ymm9, ymm7, ymm9
	VMOVAPD   [rsp + 176], xmm5
	VMOVAPS ymm12,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c39]
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c40]
	VFMADDPD ymm7, ymm12, ymm8, ymm13
	MOV r11, [rdi]
	SUB r11, rax
	VFMADDPD ymm6, ymm12, ymm10, ymm13
	CMP r11, r10
	JA .process_batch_full
	VFMADDPD ymm5, ymm12, ymm11, ymm13
	MOV r11, [byte rdi + 8]
	SUB r11, rax
	VFMADDPD ymm4, ymm12, ymm14, ymm13
	CMP r11, r10
	JA .process_batch_full
	VFMADDPD ymm3, ymm12, ymm15, ymm13
	MOV r11, [byte rdi + 16]
	SUB r11, rax
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	CMP r11, r10
	JA .process_batch_full
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c41]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	MOV r11, [byte rdi + 24]
	SUB r11, rax
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	CMP r11, r10
	JA .process_batch_full
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	MOV r11, [byte rdi + 32]
	SUB r11, rax
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	CMP r11, r10
	JA .process_batch_full
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	MOV r11, [byte rdi + 40]
	SUB r11, rax
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	CMP r11, r10
	JA .process_batch_full
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c42]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c43]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c44]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c45]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c46]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c47]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c48]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c49]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c50]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c51]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c52]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c53]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c54]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c55]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c56]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c57]
	VFMADDPD ymm7, ymm7, ymm8, ymm13
	VFMADDPD ymm6, ymm6, ymm10, ymm13
	VFMADDPD ymm5, ymm5, ymm11, ymm13
	VFMADDPD ymm4, ymm4, ymm14, ymm13
	VFMADDPD ymm3, ymm3, ymm15, ymm13
	VFMADDPD ymm12, ymm12, ymm9, ymm13
	VMULPD ymm7, ymm7, ymm8
	VMULPD ymm6, ymm6, ymm10
	VMULPD ymm5, ymm5, ymm11
	VMULPD ymm4, ymm4, ymm14
	VMULPD ymm3, ymm3, ymm15
	VMULPD ymm12, ymm12, ymm9
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c58]
	VFMADDPD ymm7, ymm7, ymm8, ymm8
	VFMADDPD ymm6, ymm6, ymm10, ymm10
	VFMADDPD ymm5, ymm5, ymm11, ymm11
	VFMADDPD ymm4, ymm4, ymm14, ymm14
	VFMADDPD ymm3, ymm3, ymm15, ymm15
	VFMADDPD ymm12, ymm12, ymm9, ymm9
	VFMADDPD ymm7, ymm13,   [rsp], ymm7
	VFMADDPD ymm6, ymm13,   [rsp + 32], ymm6
	VFMADDPD ymm5, ymm13,   [rsp + 64], ymm5
	VFMADDPD ymm4, ymm13,   [rsp + 96], ymm4
	VFMADDPD ymm3, ymm13,   [rsp + 128], ymm3
	VFMADDPD ymm12, ymm13,   [rsp + 160], ymm12
	VMOVAPD xmm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c59]
	VEXTRACTF128 xmm9, ymm7, 1
	VFMADDPD xmm7, xmm8,   [rsp], xmm7
	VMOVUPD [rsi], xmm7
	VFMADDPD xmm9, xmm8,   [rsp + 16], xmm9
	VMOVUPD [byte rsi + 16], xmm9
	VEXTRACTF128 xmm9, ymm6, 1
	VFMADDPD xmm6, xmm8,   [rsp + 32], xmm6
	VMOVUPD [byte rsi + 32], xmm6
	VFMADDPD xmm9, xmm8,   [rsp + 48], xmm9
	VMOVUPD [byte rsi + 48], xmm9
	VEXTRACTF128 xmm9, ymm5, 1
	VFMADDPD xmm5, xmm8,   [rsp + 64], xmm5
	VMOVUPD [byte rsi + 64], xmm5
	VFMADDPD xmm9, xmm8,   [rsp + 80], xmm9
	VMOVUPD [byte rsi + 80], xmm9
	VEXTRACTF128 xmm9, ymm4, 1
	VFMADDPD xmm4, xmm8,   [rsp + 96], xmm4
	VMOVUPD [byte rsi + 96], xmm4
	VFMADDPD xmm9, xmm8,   [rsp + 112], xmm9
	VMOVUPD [byte rsi + 112], xmm9
	VEXTRACTF128 xmm9, ymm3, 1
	VFMADDPD xmm3, xmm8,   [rsp + 128], xmm3
	VMOVUPD [dword rsi + 128], xmm3
	VFMADDPD xmm9, xmm8,   [rsp + 144], xmm9
	VMOVUPD [dword rsi + 144], xmm9
	VEXTRACTF128 xmm9, ymm12, 1
	VFMADDPD xmm12, xmm8,   [rsp + 160], xmm12
	VMOVUPD [dword rsi + 160], xmm12
	VFMADDPD xmm9, xmm8,   [rsp + 176], xmm9
	VMOVUPD [dword rsi + 176], xmm9
	.process_batch_increment:
	ADD rdi, 192
	ADD rsi, 192
	SUB rdx, 24
	JAE .process_batch_fast
	.process_restore:
	ADD rdx, 24
	JZ .return_ok
	.process_single:
	VMOVSD xmm8, [rdi]
	VPSRLQ xmm9, xmm8, 52
	VORPS xmm10, xmm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c0]
	VSUBSD xmm10, xmm10, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c1]
	VPXOR xmm11, xmm11, xmm11
	VPCMPEQQ xmm11, xmm11, xmm9
	VPSRLQ xmm12, xmm10, 52
	VPSUBQ xmm12, xmm12,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c2]
	VPBLENDVB xmm8, xmm8, xmm10, xmm11
	VPAND xmm8, xmm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c3]
	VPOR xmm8, xmm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c4]
	VPAND xmm10, xmm12, xmm11
	VPOR xmm10, xmm10, xmm9
	VMOVSD xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c5]
	VCMPLTSD xmm9, xmm9, xmm8
	VPSUBQ xmm10, xmm10, xmm9
	VPAND xmm9, xmm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c6]
	VPXOR xmm8, xmm8, xmm9
	VSUBSD xmm9, xmm8, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c7]
	VMOVSD xmm8, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c8]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c9]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c10]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c11]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c12]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c13]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c14]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c15]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c16]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c17]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c19]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c20]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c21]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c22]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c23]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c24]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c25]
	VFMADDSD xmm8, xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c26]
	VMULSD xmm8, xmm8, xmm9
	VFMADDSD xmm8, xmm8, xmm9, xmm9
	VPADDQ xmm10, xmm10,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c27]
	VSUBSD xmm10, xmm10, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c28]
	VMOVSD xmm9, [rdi]
	VFMADDSD xmm8, xmm10, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c29], xmm8
	VFMADDSD xmm8, xmm10, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c30], xmm8
	VBLENDVPD xmm8, xmm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c31], xmm9
	VPXOR xmm10, xmm10, xmm10
	VPCMPEQQ xmm10, xmm10, xmm9
	VBLENDVPD xmm8, xmm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c32], xmm10
	VCMPNLTSD xmm10, xmm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c33]
	VBLENDVPD xmm8, xmm8, xmm9, xmm10
	VMOVSD [rsi], xmm8
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	MOV rsp, [dword rsp + 384]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	VMOVAPS ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c60]
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c61]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c34]
	VMOVAPD ymm11, [rdi]
	VORPD ymm12, ymm11, ymm9
	VSUBPD ymm12, ymm12, ymm9
	VCMPLTPD ymm13, ymm11,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VBLENDVPD ymm11, ymm11, ymm12, ymm13
	VANDPD ymm12, ymm11,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VORPD ymm12, ymm12, ymm10
	VANDPD ymm11, ymm11,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c62]
	VBLENDVPD ymm13, ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c63], ymm13
	VMOVSHDUP ymm11, ymm11
	VBLENDPS ymm11, ymm11,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c64], 170
	VSUBPD ymm11, ymm11, ymm13
	VMOVAPD ymm13, [byte rdi + 32]
	VORPD ymm14, ymm13, ymm9
	VSUBPD ymm14, ymm14, ymm9
	VCMPLTPD ymm15, ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VBLENDVPD ymm13, ymm13, ymm14, ymm15
	VANDPD ymm14, ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VORPD ymm14, ymm14, ymm10
	VANDPD ymm13, ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c62]
	VBLENDVPD ymm15, ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c63], ymm15
	VMOVSHDUP ymm13, ymm13
	VBLENDPS ymm13, ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c64], 170
	VSUBPD ymm13, ymm13, ymm15
	VMOVAPD ymm15, [byte rdi + 64]
	VORPD ymm7, ymm15, ymm9
	VSUBPD ymm7, ymm7, ymm9
	VCMPLTPD ymm6, ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VBLENDVPD ymm15, ymm15, ymm7, ymm6
	VANDPD ymm7, ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VORPD ymm7, ymm7, ymm10
	VANDPD ymm15, ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c62]
	VBLENDVPD ymm6, ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c63], ymm6
	VMOVSHDUP ymm15, ymm15
	VBLENDPS ymm15, ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c64], 170
	VSUBPD ymm15, ymm15, ymm6
	VMOVAPD ymm6, [byte rdi + 96]
	VORPD ymm5, ymm6, ymm9
	VSUBPD ymm5, ymm5, ymm9
	VCMPLTPD ymm4, ymm6,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VBLENDVPD ymm6, ymm6, ymm5, ymm4
	VANDPD ymm5, ymm6,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VORPD ymm5, ymm5, ymm10
	VANDPD ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c62]
	VBLENDVPD ymm4, ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c63], ymm4
	VMOVSHDUP ymm6, ymm6
	VBLENDPS ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c64], 170
	VSUBPD ymm6, ymm6, ymm4
	VMOVAPD ymm4, [dword rdi + 128]
	VORPD ymm3, ymm4, ymm9
	VSUBPD ymm3, ymm3, ymm9
	VCMPLTPD ymm2, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VBLENDVPD ymm4, ymm4, ymm3, ymm2
	VANDPD ymm3, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VORPD ymm3, ymm3, ymm10
	VANDPD ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c62]
	VBLENDVPD ymm2, ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c63], ymm2
	VMOVSHDUP ymm4, ymm4
	VBLENDPS ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c64], 170
	VSUBPD ymm4, ymm4, ymm2
	VMOVAPD ymm2, [dword rdi + 160]
	VORPD ymm1, ymm2, ymm9
	VSUBPD ymm1, ymm1, ymm9
	VCMPLTPD ymm9, ymm2,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VBLENDVPD ymm2, ymm2, ymm1, ymm9
	VANDPD ymm1, ymm2,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VORPD ymm1, ymm1, ymm10
	VANDPD ymm2, ymm2,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c62]
	VBLENDVPD ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c63], ymm9
	VMOVSHDUP ymm2, ymm2
	VBLENDPS ymm2, ymm2,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c64], 170
	VSUBPD ymm2, ymm2, ymm8
	VCMPGTPD ymm8, ymm12,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VANDPD ymm9, ymm8, ymm10
	VADDPD ymm11, ymm11, ymm9
	VMOVAPD   [rsp + 192], xmm11
	VANDPD ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VEXTRACTF128   [rsp + 208], ymm11, 1
	VXORPD ymm12, ymm12, ymm8
	VSUBPD ymm9, ymm12, ymm10
	VCMPGTPD ymm8, ymm14,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VANDPD ymm11, ymm8, ymm10
	VADDPD ymm13, ymm13, ymm11
	VMOVAPD   [rsp + 224], xmm13
	VANDPD ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VEXTRACTF128   [rsp + 240], ymm13, 1
	VXORPD ymm14, ymm14, ymm8
	VSUBPD ymm11, ymm14, ymm10
	VCMPGTPD ymm8, ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VANDPD ymm12, ymm8, ymm10
	VADDPD ymm15, ymm15, ymm12
	VMOVAPD   [rsp + 256], xmm15
	VANDPD ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VEXTRACTF128   [rsp + 272], ymm15, 1
	VXORPD ymm7, ymm7, ymm8
	VSUBPD ymm12, ymm7, ymm10
	VCMPGTPD ymm8, ymm5,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VANDPD ymm13, ymm8, ymm10
	VADDPD ymm6, ymm6, ymm13
	VMOVAPD   [rsp + 288], xmm6
	VANDPD ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VEXTRACTF128   [rsp + 304], ymm6, 1
	VXORPD ymm5, ymm5, ymm8
	VSUBPD ymm13, ymm5, ymm10
	VCMPGTPD ymm8, ymm3,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VANDPD ymm14, ymm8, ymm10
	VADDPD ymm4, ymm4, ymm14
	VMOVAPD   [rsp + 320], xmm4
	VANDPD ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VEXTRACTF128   [rsp + 336], ymm4, 1
	VXORPD ymm3, ymm3, ymm8
	VSUBPD ymm14, ymm3, ymm10
	VCMPGTPD ymm8, ymm1,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VANDPD ymm15, ymm8, ymm10
	VADDPD ymm2, ymm2, ymm15
	VMOVAPD   [rsp + 352], xmm2
	VANDPD ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VEXTRACTF128   [rsp + 368], ymm2, 1
	VXORPD ymm1, ymm1, ymm8
	VSUBPD ymm8, ymm1, ymm10
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c39]
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c40]
	VFMADDPD ymm7, ymm10, ymm9, ymm15
	VFMADDPD ymm6, ymm10, ymm11, ymm15
	VFMADDPD ymm5, ymm10, ymm12, ymm15
	VFMADDPD ymm4, ymm10, ymm13, ymm15
	VFMADDPD ymm3, ymm10, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c41]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c42]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c43]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c44]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c45]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c46]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c47]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c48]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c49]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c50]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c51]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c52]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c53]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c54]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c55]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c56]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMOVAPS ymm15,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c57]
	VFMADDPD ymm7, ymm7, ymm9, ymm15
	VFMADDPD ymm6, ymm6, ymm11, ymm15
	VFMADDPD ymm5, ymm5, ymm12, ymm15
	VFMADDPD ymm4, ymm4, ymm13, ymm15
	VFMADDPD ymm3, ymm3, ymm14, ymm15
	VFMADDPD ymm10, ymm10, ymm8, ymm15
	VMULPD ymm7, ymm7, ymm9
	VFMADDPD ymm7, ymm7, ymm9, ymm9
	VMULPD ymm6, ymm6, ymm11
	VFMADDPD ymm6, ymm6, ymm11, ymm11
	VMULPD ymm5, ymm5, ymm12
	VFMADDPD ymm5, ymm5, ymm12, ymm12
	VMULPD ymm4, ymm4, ymm13
	VFMADDPD ymm4, ymm4, ymm13, ymm13
	VMULPD ymm3, ymm3, ymm14
	VFMADDPD ymm3, ymm3, ymm14, ymm14
	VMULPD ymm10, ymm10, ymm8
	VFMADDPD ymm10, ymm10, ymm8, ymm8
	VMOVAPS ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c58]
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c65]
	VMOVAPD ymm11,   [rsp + 192]
	VFMADDPD ymm7, ymm11, ymm8, ymm7
	VFMADDPD ymm7, ymm11, ymm9, ymm7
	VMOVAPD ymm11,   [rsp + 224]
	VFMADDPD ymm6, ymm11, ymm8, ymm6
	VFMADDPD ymm6, ymm11, ymm9, ymm6
	VMOVAPD ymm11,   [rsp + 256]
	VFMADDPD ymm5, ymm11, ymm8, ymm5
	VFMADDPD ymm5, ymm11, ymm9, ymm5
	VMOVAPD ymm11,   [rsp + 288]
	VFMADDPD ymm4, ymm11, ymm8, ymm4
	VFMADDPD ymm4, ymm11, ymm9, ymm4
	VMOVAPD ymm11,   [rsp + 320]
	VFMADDPD ymm3, ymm11, ymm8, ymm3
	VFMADDPD ymm3, ymm11, ymm9, ymm3
	VMOVAPD ymm11,   [rsp + 352]
	VFMADDPD ymm10, ymm11, ymm8, ymm10
	VFMADDPD ymm10, ymm11, ymm9, ymm10
	VXORPD ymm8, ymm8, ymm8
	VMOVAPD ymm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c62]
	VSUBPD ymm11, ymm8, ymm9
	VMOVAPD ymm12,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c66]
	VMOVAPD ymm13, [rdi]
	VCMPEQPD ymm14, ymm13, ymm8
	VBLENDVPD ymm7, ymm7, ymm11, ymm14
	VBLENDVPD ymm7, ymm7, ymm12, ymm13
	VCMPNLTPD ymm14, ymm13, ymm9
	VBLENDVPD ymm7, ymm7, ymm13, ymm14
	VMOVUPD [rsi], xmm7
	VEXTRACTF128 [byte rsi + 16], ymm7, 1
	VMOVAPD ymm13, [byte rdi + 32]
	VCMPEQPD ymm14, ymm13, ymm8
	VBLENDVPD ymm6, ymm6, ymm11, ymm14
	VBLENDVPD ymm6, ymm6, ymm12, ymm13
	VCMPNLTPD ymm14, ymm13, ymm9
	VBLENDVPD ymm6, ymm6, ymm13, ymm14
	VMOVUPD [byte rsi + 32], xmm6
	VEXTRACTF128 [byte rsi + 48], ymm6, 1
	VMOVAPD ymm13, [byte rdi + 64]
	VCMPEQPD ymm14, ymm13, ymm8
	VBLENDVPD ymm5, ymm5, ymm11, ymm14
	VBLENDVPD ymm5, ymm5, ymm12, ymm13
	VCMPNLTPD ymm14, ymm13, ymm9
	VBLENDVPD ymm5, ymm5, ymm13, ymm14
	VMOVUPD [byte rsi + 64], xmm5
	VEXTRACTF128 [byte rsi + 80], ymm5, 1
	VMOVAPD ymm13, [byte rdi + 96]
	VCMPEQPD ymm14, ymm13, ymm8
	VBLENDVPD ymm4, ymm4, ymm11, ymm14
	VBLENDVPD ymm4, ymm4, ymm12, ymm13
	VCMPNLTPD ymm14, ymm13, ymm9
	VBLENDVPD ymm4, ymm4, ymm13, ymm14
	VMOVUPD [byte rsi + 96], xmm4
	VEXTRACTF128 [byte rsi + 112], ymm4, 1
	VMOVAPD ymm13, [dword rdi + 128]
	VCMPEQPD ymm14, ymm13, ymm8
	VBLENDVPD ymm3, ymm3, ymm11, ymm14
	VBLENDVPD ymm3, ymm3, ymm12, ymm13
	VCMPNLTPD ymm14, ymm13, ymm9
	VBLENDVPD ymm3, ymm3, ymm13, ymm14
	VMOVUPD [dword rsi + 128], xmm3
	VEXTRACTF128 [dword rsi + 144], ymm3, 1
	VMOVAPD ymm13, [dword rdi + 160]
	VCMPEQPD ymm8, ymm13, ymm8
	VBLENDVPD ymm10, ymm10, ymm11, ymm8
	VBLENDVPD ymm10, ymm10, ymm12, ymm13
	VCMPNLTPD ymm8, ymm13, ymm9
	VBLENDVPD ymm10, ymm10, ymm13, ymm8
	VMOVUPD [dword rsi + 160], xmm10
	VEXTRACTF128 [dword rsi + 176], ymm10, 1
	JMP .process_batch_increment

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.Haswell progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Log_V64f_V64f_Haswell_constants:
	.c0: DQ 0x4330000000000000, 0x4330000000000000
	.c2: DQ 0x0000000000000432, 0x0000000000000432
	.c1: DQ 0x4330000000000000
	.c5: DQ 0x3FF6A09E667F3BCD
	.c7: DQ 0x3FF0000000000000
	.c8: DQ 0xBF9CC4EC078138E3
	.c3: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c6: DQ 0x0010000000000000, 0x0010000000000000
	.c27: DQ 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01
	.c9: DQ 0x3FB0266CD08DB2F2
	.c10: DQ 0xBFB1654764F478EC
	.c11: DQ 0x3FAEA17E14773369
	.c12: DQ 0xBFAEED2E2BB64B2E
	.c13: DQ 0x3FB0F23916A44515
	.c14: DQ 0xBFB25480A82633AF
	.c15: DQ 0x3FB3B4ED39194B87
	.c16: DQ 0xBFB554D5ACD502AB
	.c17: DQ 0x3FB745980F3FB889
	.c18: DQ 0xBFB9999C5BE751E3
	.c19: DQ 0x3FBC71C90DB06248
	.c20: DQ 0xBFBFFFFFFBD8606D
	.c21: DQ 0x3FC249248DAE4B2A
	.c22: DQ 0xBFC55555554A6A2B
	.c23: DQ 0x3FC9999999A43E4F
	.c24: DQ 0xBFD00000000013C7
	.c25: DQ 0x3FD5555555555103
	.c26: DQ 0xBFDFFFFFFFFFFFF2
	.c28: DQ 0x4338000000000000
	.c29: DQ 0x3C7ABC9E3B39803F
	.c30: DQ 0x3FE62E42FEFA39EF
	ALIGN 32
	.c31: DQ 0x7FF8000000000000, 0x7FF8000000000000
	.c32: DQ 0xFFF0000000000000, 0xFFF0000000000000
	.c33: DQ 0x7FF0000000000000, 0x7FF0000000000000
	ALIGN 32
	.c34: DQ 0x0010000000000000, 0x0010000000000000, 0x0010000000000000, 0x0010000000000000
	.c35: DQ 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000
	.c36: DQ 0x7FEFFFFFFFFFFFFF, 0x7FEFFFFFFFFFFFFF, 0x7FEFFFFFFFFFFFFF, 0x7FEFFFFFFFFFFFFF
	.c37: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c38: DQ 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01
	.c39: DQ 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD
	.c40: DQ 0x4338000000000000, 0x4338000000000000, 0x4338000000000000, 0x4338000000000000
	.c41: DQ 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3
	.c42: DQ 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2
	.c43: DQ 0xBFB1654764F478EC, 0xBFB1654764F478EC, 0xBFB1654764F478EC, 0xBFB1654764F478EC
	.c44: DQ 0x3FAEA17E14773369, 0x3FAEA17E14773369, 0x3FAEA17E14773369, 0x3FAEA17E14773369
	.c45: DQ 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E
	.c46: DQ 0x3FB0F23916A44515, 0x3FB0F23916A44515, 0x3FB0F23916A44515, 0x3FB0F23916A44515
	.c47: DQ 0xBFB25480A82633AF, 0xBFB25480A82633AF, 0xBFB25480A82633AF, 0xBFB25480A82633AF
	.c48: DQ 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87
	.c49: DQ 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB
	.c50: DQ 0x3FB745980F3FB889, 0x3FB745980F3FB889, 0x3FB745980F3FB889, 0x3FB745980F3FB889
	.c51: DQ 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3
	.c52: DQ 0x3FBC71C90DB06248, 0x3FBC71C90DB06248, 0x3FBC71C90DB06248, 0x3FBC71C90DB06248
	.c53: DQ 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D
	.c54: DQ 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A
	.c55: DQ 0xBFC55555554A6A2B, 0xBFC55555554A6A2B, 0xBFC55555554A6A2B, 0xBFC55555554A6A2B
	.c56: DQ 0x3FC9999999A43E4F, 0x3FC9999999A43E4F, 0x3FC9999999A43E4F, 0x3FC9999999A43E4F
	.c57: DQ 0xBFD00000000013C7, 0xBFD00000000013C7, 0xBFD00000000013C7, 0xBFD00000000013C7
	.c58: DQ 0x3FD5555555555103, 0x3FD5555555555103, 0x3FD5555555555103, 0x3FD5555555555103
	.c59: DQ 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2
	.c60: DQ 0x3C7ABC9E3B39803F, 0x3C7ABC9E3B39803F, 0x3C7ABC9E3B39803F, 0x3C7ABC9E3B39803F
	.c61: DQ 0x3FE62E42FEFA39EF, 0x3FE62E42FEFA39EF, 0x3FE62E42FEFA39EF, 0x3FE62E42FEFA39EF
	.c62: DQ 0x4330000000000000, 0x4330000000000000, 0x4330000000000000, 0x4330000000000000
	.c63: DQ 0x0000000000000432, 0x0000000000000432, 0x0000000000000432, 0x0000000000000432
	.c64: DQ 0x7FF8000000000000, 0x7FF8000000000000, 0x7FF8000000000000, 0x7FF8000000000000
	.c65: DQ 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000
	.c66: DQ 0xFFF0000000000000, 0xFFF0000000000000, 0xFFF0000000000000, 0xFFF0000000000000


%ifidn __OUTPUT_FORMAT__, elf64
section .text.Haswell progbits alloc exec nowrite align=16
global _yepMath_Log_V64f_V64f_Haswell
_yepMath_Log_V64f_V64f_Haswell:
%else
section .text
global __yepMath_Log_V64f_V64f_Haswell
__yepMath_Log_V64f_V64f_Haswell:
%endif
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 960
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm8, [rdi]
	VPSRLQ xmm9, xmm8, 52
	VORPS xmm10, xmm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c0]
	VSUBSD xmm10, xmm10, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c1]
	VPXOR xmm11, xmm11, xmm11
	VPCMPEQQ xmm11, xmm11, xmm9
	VPSRLQ xmm12, xmm10, 52
	VPSUBQ xmm12, xmm12,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c2]
	VPBLENDVB xmm8, xmm8, xmm10, xmm11
	VPAND xmm8, xmm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c3]
	VPOR xmm8, xmm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c4]
	VPAND xmm10, xmm12, xmm11
	VPOR xmm10, xmm10, xmm9
	VMOVSD xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c5]
	VCMPLTSD xmm9, xmm9, xmm8
	VPSUBQ xmm10, xmm10, xmm9
	VPAND xmm9, xmm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c6]
	VPXOR xmm8, xmm8, xmm9
	VSUBSD xmm9, xmm8, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c7]
	VMOVSD xmm8, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c8]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c9]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c10]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c11]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c12]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c13]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c14]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c15]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c16]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c17]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c18]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c19]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c20]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c21]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c22]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c23]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c24]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c25]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c26]
	VMULSD xmm8, xmm8, xmm9
	VFMADD213SD xmm8, xmm9, xmm9
	VPADDQ xmm10, xmm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c27]
	VSUBSD xmm10, xmm10, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c28]
	VMOVSD xmm9, [rdi]
	VMOVAPD xmm11, xmm10
	VFMADD132SD xmm11, xmm8, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c29]
	VFMADD231SD xmm11, xmm10, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c30]
	VBLENDVPD xmm11, xmm11,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c31], xmm9
	VPXOR xmm8, xmm8, xmm8
	VPCMPEQQ xmm8, xmm8, xmm9
	VBLENDVPD xmm11, xmm11,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c32], xmm8
	VCMPNLTSD xmm8, xmm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c33]
	VBLENDVPD xmm11, xmm11, xmm9, xmm8
	VMOVSD [rsi], xmm11
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB rdx, 40
	JB .process_restore
	align 32
	.process_batch_fast:
	VMOVAPD ymm8, [rdi]
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VCMPLTPD ymm10, ymm8, ymm9
	VMOVAPS ymm11,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c35]
	VPSRLQ ymm12, ymm8, 52
	VCMPGTPD ymm13, ymm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm8, ymm8, ymm11
	VORPD ymm10, ymm10, ymm13
	VMOVDQA ymm13,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c38]
	VPADDQ ymm12, ymm12, ymm13
	VCMPGTPD ymm14, ymm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm12, ymm12, ymm14
	VTESTPD ymm10, ymm10
	JNZ .process_batch_full
	VANDPD ymm14, ymm14,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c40]
	VSUBPD ymm12, ymm12, ymm10
	VXORPD ymm8, ymm8, ymm14
	VMOVAPD   [rsp], ymm12
	VFMSUB213PD ymm8, ymm11, ymm11
	VMOVAPD ymm12, [byte rdi + 32]
	VCMPLTPD ymm14, ymm12, ymm9
	VPSRLQ ymm15, ymm12, 52
	VCMPGTPD ymm7, ymm12,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm12, ymm12,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm12, ymm12, ymm11
	VORPD ymm14, ymm14, ymm7
	VPADDQ ymm15, ymm15, ymm13
	VCMPGTPD ymm7, ymm12,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm15, ymm15, ymm7
	VTESTPD ymm14, ymm14
	JNZ .process_batch_full
	VANDPD ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm15, ymm15, ymm10
	VXORPD ymm12, ymm12, ymm7
	VMOVAPD   [rsp + 32], ymm15
	VFMSUB213PD ymm12, ymm11, ymm11
	VMOVAPD   [rsp + 64], ymm12
	VMOVAPD ymm14, [byte rdi + 64]
	VCMPLTPD ymm15, ymm14, ymm9
	VPSRLQ ymm7, ymm14, 52
	VCMPGTPD ymm6, ymm14,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm14, ymm14,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm14, ymm14, ymm11
	VORPD ymm15, ymm15, ymm6
	VPADDQ ymm7, ymm7, ymm13
	VCMPGTPD ymm6, ymm14,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm7, ymm7, ymm6
	VTESTPD ymm15, ymm15
	JNZ .process_batch_full
	VANDPD ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm7, ymm7, ymm10
	VXORPD ymm14, ymm14, ymm6
	VMOVAPD   [rsp + 96], ymm7
	VFMSUB213PD ymm14, ymm11, ymm11
	VMOVAPD ymm15, [byte rdi + 96]
	VCMPLTPD ymm7, ymm15, ymm9
	VPSRLQ ymm6, ymm15, 52
	VCMPGTPD ymm5, ymm15,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm15, ymm15,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm15, ymm15, ymm11
	VORPD ymm7, ymm7, ymm5
	VPADDQ ymm6, ymm6, ymm13
	VCMPGTPD ymm5, ymm15,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm6, ymm6, ymm5
	VTESTPD ymm7, ymm7
	JNZ .process_batch_full
	VANDPD ymm5, ymm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm6, ymm6, ymm10
	VXORPD ymm15, ymm15, ymm5
	VMOVAPD   [rsp + 128], ymm6
	VFMSUB213PD ymm15, ymm11, ymm11
	VMOVAPD   [rsp + 160], ymm15
	VMOVAPD ymm7, [dword rdi + 128]
	VCMPLTPD ymm6, ymm7, ymm9
	VPSRLQ ymm5, ymm7, 52
	VCMPGTPD ymm4, ymm7,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm7, ymm7, ymm11
	VORPD ymm6, ymm6, ymm4
	VPADDQ ymm5, ymm5, ymm13
	VCMPGTPD ymm4, ymm7,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm5, ymm5, ymm4
	VTESTPD ymm6, ymm6
	JNZ .process_batch_full
	VANDPD ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm5, ymm5, ymm10
	VXORPD ymm7, ymm7, ymm4
	VMOVAPD   [rsp + 192], ymm5
	VFMSUB213PD ymm7, ymm11, ymm11
	VMOVAPD ymm6, [dword rdi + 160]
	VCMPLTPD ymm5, ymm6, ymm9
	VPSRLQ ymm4, ymm6, 52
	VCMPGTPD ymm3, ymm6,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm6, ymm6, ymm11
	VORPD ymm5, ymm5, ymm3
	VPADDQ ymm4, ymm4, ymm13
	VCMPGTPD ymm3, ymm6,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm4, ymm4, ymm3
	VTESTPD ymm5, ymm5
	JNZ .process_batch_full
	VANDPD ymm3, ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm4, ymm4, ymm10
	VXORPD ymm6, ymm6, ymm3
	VMOVAPD   [rsp + 224], ymm4
	VFMSUB213PD ymm6, ymm11, ymm11
	VMOVAPD   [rsp + 256], ymm6
	VMOVAPD ymm5, [dword rdi + 192]
	VCMPLTPD ymm4, ymm5, ymm9
	VPSRLQ ymm3, ymm5, 52
	VCMPGTPD ymm2, ymm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm5, ymm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm5, ymm5, ymm11
	VORPD ymm4, ymm4, ymm2
	VPADDQ ymm3, ymm3, ymm13
	VCMPGTPD ymm2, ymm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm3, ymm3, ymm2
	VTESTPD ymm4, ymm4
	JNZ .process_batch_full
	VANDPD ymm2, ymm2,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm3, ymm3, ymm10
	VXORPD ymm5, ymm5, ymm2
	VMOVAPD   [rsp + 288], ymm3
	VFMSUB213PD ymm5, ymm11, ymm11
	VMOVAPD ymm4, [dword rdi + 224]
	VCMPLTPD ymm3, ymm4, ymm9
	VPSRLQ ymm2, ymm4, 52
	VCMPGTPD ymm1, ymm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm4, ymm4, ymm11
	VORPD ymm3, ymm3, ymm1
	VPADDQ ymm2, ymm2, ymm13
	VCMPGTPD ymm1, ymm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm2, ymm2, ymm1
	VTESTPD ymm3, ymm3
	JNZ .process_batch_full
	VANDPD ymm1, ymm1,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm2, ymm2, ymm10
	VXORPD ymm4, ymm4, ymm1
	VMOVAPD   [rsp + 320], ymm2
	VFMSUB213PD ymm4, ymm11, ymm11
	VMOVAPD   [rsp + 352], ymm4
	VMOVAPD ymm3, [dword rdi + 256]
	VCMPLTPD ymm2, ymm3, ymm9
	VPSRLQ ymm1, ymm3, 52
	VCMPGTPD ymm0, ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm3, ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm3, ymm3, ymm11
	VORPD ymm2, ymm2, ymm0
	VPADDQ ymm1, ymm1, ymm13
	VCMPGTPD ymm0, ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm1, ymm1, ymm0
	VTESTPD ymm2, ymm2
	JNZ .process_batch_full
	VANDPD ymm0, ymm0,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm1, ymm1, ymm10
	VXORPD ymm3, ymm3, ymm0
	VMOVAPD   [rsp + 384], ymm1
	VFMSUB213PD ymm3, ymm11, ymm11
	VMOVAPD ymm2, [dword rdi + 288]
	VCMPLTPD ymm9, ymm2, ymm9
	VPSRLQ ymm1, ymm2, 52
	VCMPGTPD ymm0, ymm2,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm2, ymm2,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm2, ymm2, ymm11
	VORPD ymm9, ymm9, ymm0
	VPADDQ ymm1, ymm1, ymm13
	VCMPGTPD ymm13, ymm2,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm1, ymm1, ymm13
	VTESTPD ymm9, ymm9
	JNZ .process_batch_full
	VANDPD ymm13, ymm13,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm1, ymm1, ymm10
	VXORPD ymm2, ymm2, ymm13
	VMOVAPD   [rsp + 416], ymm1
	VFMSUB213PD ymm2, ymm11, ymm11
	VMOVAPD   [rsp + 448], ymm2
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c41]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c42]
	VMOVAPD ymm11, ymm9
	VFMADD132PD ymm11, ymm10, ymm8
	VMOVAPD ymm13, ymm9
	VFMADD132PD ymm13, ymm10, ymm12
	VMOVAPD ymm12, ymm9
	VFMADD132PD ymm12, ymm10, ymm14
	VMOVAPD ymm2, ymm9
	VFMADD132PD ymm2, ymm10, ymm15
	VMOVAPD ymm15, ymm9
	VFMADD132PD ymm15, ymm10, ymm7
	VMOVAPD ymm1, ymm9
	VFMADD132PD ymm1, ymm10, ymm6
	VMOVAPD ymm6, ymm9
	VFMADD132PD ymm6, ymm10, ymm5
	VMOVAPD ymm0, ymm9
	VFMADD132PD ymm0, ymm10, ymm4
	VMOVAPD ymm4, ymm9
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c43]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c44]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c45]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c46]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c47]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c48]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c49]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c50]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c51]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c52]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c53]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c54]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c55]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c56]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c57]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c58]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c59]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm13, ymm10,   [rsp + 64]
	VFMADD132PD ymm12, ymm10, ymm14
	VFMADD132PD ymm2, ymm10,   [rsp + 160]
	VFMADD132PD ymm15, ymm10, ymm7
	VFMADD132PD ymm1, ymm10,   [rsp + 256]
	VFMADD132PD ymm6, ymm10, ymm5
	VFMADD132PD ymm0, ymm10,   [rsp + 352]
	VFMADD132PD ymm4, ymm10, ymm3
	VFMADD132PD ymm9, ymm10,   [rsp + 448]
	VMULPD ymm11, ymm11, ymm8
	VFMADD132PD ymm11, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 64]
	VMULPD ymm13, ymm13, ymm8
	VFMADD132PD ymm13, ymm8, ymm8
	VMULPD ymm12, ymm12, ymm14
	VFMADD132PD ymm12, ymm14, ymm14
	VMOVAPD ymm8,   [rsp + 160]
	VMULPD ymm2, ymm2, ymm8
	VFMADD132PD ymm2, ymm8, ymm8
	VMULPD ymm15, ymm15, ymm7
	VFMADD132PD ymm15, ymm7, ymm7
	VMOVAPD ymm8,   [rsp + 256]
	VMULPD ymm1, ymm1, ymm8
	VFMADD132PD ymm1, ymm8, ymm8
	VMULPD ymm6, ymm6, ymm5
	VFMADD132PD ymm6, ymm5, ymm5
	VMOVAPD ymm8,   [rsp + 352]
	VMULPD ymm0, ymm0, ymm8
	VFMADD132PD ymm0, ymm8, ymm8
	VMULPD ymm4, ymm4, ymm3
	VFMADD132PD ymm4, ymm3, ymm3
	VMOVAPD ymm8,   [rsp + 448]
	VMULPD ymm9, ymm9, ymm8
	VFMADD132PD ymm9, ymm8, ymm8
	VMOVAPD ymm8,   [rsp]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c60]
	VFMADD231PD ymm11, ymm10, ymm8
	VMOVAPS ymm14,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c61]
	VFMADD231PD ymm11, ymm14, ymm8
	VMOVUPD [rsi], ymm11
	VMOVAPD ymm8,   [rsp + 32]
	VFMADD231PD ymm13, ymm10, ymm8
	VFMADD231PD ymm13, ymm14, ymm8
	VMOVUPD [byte rsi + 32], ymm13
	VMOVAPD ymm8,   [rsp + 96]
	VFMADD231PD ymm12, ymm10, ymm8
	VFMADD231PD ymm12, ymm14, ymm8
	VMOVUPD [byte rsi + 64], ymm12
	VMOVAPD ymm8,   [rsp + 128]
	VFMADD231PD ymm2, ymm10, ymm8
	VFMADD231PD ymm2, ymm14, ymm8
	VMOVUPD [byte rsi + 96], ymm2
	VMOVAPD ymm8,   [rsp + 192]
	VFMADD231PD ymm15, ymm10, ymm8
	VFMADD231PD ymm15, ymm14, ymm8
	VMOVUPD [dword rsi + 128], ymm15
	VMOVAPD ymm8,   [rsp + 224]
	VFMADD231PD ymm1, ymm10, ymm8
	VFMADD231PD ymm1, ymm14, ymm8
	VMOVUPD [dword rsi + 160], ymm1
	VMOVAPD ymm8,   [rsp + 288]
	VFMADD231PD ymm6, ymm10, ymm8
	VFMADD231PD ymm6, ymm14, ymm8
	VMOVUPD [dword rsi + 192], ymm6
	VMOVAPD ymm8,   [rsp + 320]
	VFMADD231PD ymm0, ymm10, ymm8
	VFMADD231PD ymm0, ymm14, ymm8
	VMOVUPD [dword rsi + 224], ymm0
	VMOVAPD ymm8,   [rsp + 384]
	VFMADD231PD ymm4, ymm10, ymm8
	VFMADD231PD ymm4, ymm14, ymm8
	VMOVUPD [dword rsi + 256], ymm4
	VMOVAPD ymm8,   [rsp + 416]
	VFMADD231PD ymm9, ymm10, ymm8
	VFMADD231PD ymm9, ymm14, ymm8
	VMOVUPD [dword rsi + 288], ymm9
	.process_batch_increment:
	ADD rdi, 320
	ADD rsi, 320
	SUB rdx, 40
	JAE .process_batch_fast
	.process_restore:
	ADD rdx, 40
	JZ .return_ok
	.process_single:
	VMOVSD xmm8, [rdi]
	VPSRLQ xmm9, xmm8, 52
	VORPS xmm10, xmm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c0]
	VSUBSD xmm10, xmm10, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c1]
	VPXOR xmm11, xmm11, xmm11
	VPCMPEQQ xmm11, xmm11, xmm9
	VPSRLQ xmm12, xmm10, 52
	VPSUBQ xmm12, xmm12,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c2]
	VPBLENDVB xmm8, xmm8, xmm10, xmm11
	VPAND xmm8, xmm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c3]
	VPOR xmm8, xmm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c4]
	VPAND xmm10, xmm12, xmm11
	VPOR xmm10, xmm10, xmm9
	VMOVSD xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c5]
	VCMPLTSD xmm9, xmm9, xmm8
	VPSUBQ xmm10, xmm10, xmm9
	VPAND xmm9, xmm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c6]
	VPXOR xmm8, xmm8, xmm9
	VSUBSD xmm9, xmm8, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c7]
	VMOVSD xmm8, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c8]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c9]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c10]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c11]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c12]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c13]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c14]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c15]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c16]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c17]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c18]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c19]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c20]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c21]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c22]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c23]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c24]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c25]
	VFMADD213SD xmm8, xmm9, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c26]
	VMULSD xmm8, xmm8, xmm9
	VFMADD213SD xmm8, xmm9, xmm9
	VPADDQ xmm10, xmm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c27]
	VSUBSD xmm10, xmm10, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c28]
	VMOVSD xmm9, [rdi]
	VMOVAPD xmm11, xmm10
	VFMADD132SD xmm11, xmm8, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c29]
	VFMADD231SD xmm11, xmm10, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c30]
	VBLENDVPD xmm11, xmm11,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c31], xmm9
	VPXOR xmm8, xmm8, xmm8
	VPCMPEQQ xmm8, xmm8, xmm9
	VBLENDVPD xmm11, xmm11,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c32], xmm8
	VCMPNLTSD xmm8, xmm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c33]
	VBLENDVPD xmm11, xmm11, xmm9, xmm8
	VMOVSD [rsi], xmm11
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	MOV rsp, [dword rsp + 960]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	VMOVAPS ymm8, [rdi]
	VPSRLQ ymm9, ymm8, 52
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c62]
	VORPS ymm11, ymm8, ymm10
	VSUBPD ymm11, ymm11, ymm10
	VPXOR xmm12, xmm12, xmm12
	VPCMPEQQ ymm12, ymm12, ymm9
	VPSRLQ ymm13, ymm11, 52
	VPSUBQ ymm13, ymm13,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm8, ymm8, ymm11, ymm12
	VPAND ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VMOVAPS ymm11,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c35]
	VPOR ymm8, ymm8, ymm11
	VPAND ymm13, ymm13, ymm12
	VPOR ymm13, ymm13, ymm9
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VCMPLTPD ymm12, ymm9, ymm8
	VPSUBQ ymm13, ymm13, ymm12
	VPAND ymm12, ymm12,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm8, ymm8, ymm12
	VMOVAPD   [rsp + 480], ymm13
	VMOVAPS ymm12, [byte rdi + 32]
	VPSRLQ ymm13, ymm12, 52
	VORPS ymm14, ymm12, ymm10
	VSUBPD ymm14, ymm14, ymm10
	VPXOR xmm15, xmm15, xmm15
	VPCMPEQQ ymm15, ymm15, ymm13
	VPSRLQ ymm7, ymm14, 52
	VPSUBQ ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm12, ymm12, ymm14, ymm15
	VPAND ymm12, ymm12,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm12, ymm12, ymm11
	VPAND ymm7, ymm7, ymm15
	VPOR ymm7, ymm7, ymm13
	VCMPLTPD ymm13, ymm9, ymm12
	VPSUBQ ymm7, ymm7, ymm13
	VPAND ymm13, ymm13,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm12, ymm12, ymm13
	VMOVAPD   [rsp + 512], ymm7
	VMOVAPS ymm13, [byte rdi + 64]
	VPSRLQ ymm14, ymm13, 52
	VORPS ymm15, ymm13, ymm10
	VSUBPD ymm15, ymm15, ymm10
	VPXOR xmm7, xmm7, xmm7
	VPCMPEQQ ymm7, ymm7, ymm14
	VPSRLQ ymm6, ymm15, 52
	VPSUBQ ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm13, ymm13, ymm15, ymm7
	VPAND ymm13, ymm13,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm13, ymm13, ymm11
	VPAND ymm6, ymm6, ymm7
	VPOR ymm6, ymm6, ymm14
	VCMPLTPD ymm14, ymm9, ymm13
	VPSUBQ ymm6, ymm6, ymm14
	VPAND ymm14, ymm14,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm13, ymm13, ymm14
	VMOVAPD   [rsp + 544], ymm6
	VMOVAPS ymm14, [byte rdi + 96]
	VPSRLQ ymm15, ymm14, 52
	VORPS ymm7, ymm14, ymm10
	VSUBPD ymm7, ymm7, ymm10
	VPXOR xmm6, xmm6, xmm6
	VPCMPEQQ ymm6, ymm6, ymm15
	VPSRLQ ymm5, ymm7, 52
	VPSUBQ ymm5, ymm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm14, ymm14, ymm7, ymm6
	VPAND ymm14, ymm14,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm14, ymm14, ymm11
	VPAND ymm5, ymm5, ymm6
	VPOR ymm5, ymm5, ymm15
	VCMPLTPD ymm15, ymm9, ymm14
	VPSUBQ ymm5, ymm5, ymm15
	VPAND ymm15, ymm15,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm14, ymm14, ymm15
	VMOVAPD   [rsp + 576], ymm5
	VMOVAPS ymm15, [dword rdi + 128]
	VPSRLQ ymm7, ymm15, 52
	VORPS ymm6, ymm15, ymm10
	VSUBPD ymm6, ymm6, ymm10
	VPXOR xmm5, xmm5, xmm5
	VPCMPEQQ ymm5, ymm5, ymm7
	VPSRLQ ymm4, ymm6, 52
	VPSUBQ ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm15, ymm15, ymm6, ymm5
	VPAND ymm15, ymm15,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm15, ymm15, ymm11
	VPAND ymm4, ymm4, ymm5
	VPOR ymm4, ymm4, ymm7
	VCMPLTPD ymm7, ymm9, ymm15
	VPSUBQ ymm4, ymm4, ymm7
	VPAND ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm15, ymm15, ymm7
	VMOVAPD   [rsp + 608], ymm4
	VMOVAPS ymm7, [dword rdi + 160]
	VPSRLQ ymm6, ymm7, 52
	VORPS ymm5, ymm7, ymm10
	VSUBPD ymm5, ymm5, ymm10
	VPXOR xmm4, xmm4, xmm4
	VPCMPEQQ ymm4, ymm4, ymm6
	VPSRLQ ymm3, ymm5, 52
	VPSUBQ ymm3, ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm7, ymm7, ymm5, ymm4
	VPAND ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm7, ymm7, ymm11
	VPAND ymm3, ymm3, ymm4
	VPOR ymm3, ymm3, ymm6
	VCMPLTPD ymm6, ymm9, ymm7
	VPSUBQ ymm3, ymm3, ymm6
	VPAND ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm7, ymm7, ymm6
	VMOVAPD   [rsp + 640], ymm3
	VMOVAPS ymm6, [dword rdi + 192]
	VPSRLQ ymm5, ymm6, 52
	VORPS ymm4, ymm6, ymm10
	VSUBPD ymm4, ymm4, ymm10
	VPXOR xmm3, xmm3, xmm3
	VPCMPEQQ ymm3, ymm3, ymm5
	VPSRLQ ymm2, ymm4, 52
	VPSUBQ ymm2, ymm2,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm6, ymm6, ymm4, ymm3
	VPAND ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm6, ymm6, ymm11
	VPAND ymm2, ymm2, ymm3
	VPOR ymm2, ymm2, ymm5
	VCMPLTPD ymm5, ymm9, ymm6
	VPSUBQ ymm2, ymm2, ymm5
	VPAND ymm5, ymm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm6, ymm6, ymm5
	VMOVAPD   [rsp + 672], ymm2
	VMOVAPS ymm5, [dword rdi + 224]
	VPSRLQ ymm4, ymm5, 52
	VORPS ymm3, ymm5, ymm10
	VSUBPD ymm3, ymm3, ymm10
	VPXOR xmm2, xmm2, xmm2
	VPCMPEQQ ymm2, ymm2, ymm4
	VPSRLQ ymm1, ymm3, 52
	VPSUBQ ymm1, ymm1,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm5, ymm5, ymm3, ymm2
	VPAND ymm5, ymm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm5, ymm5, ymm11
	VPAND ymm1, ymm1, ymm2
	VPOR ymm1, ymm1, ymm4
	VCMPLTPD ymm4, ymm9, ymm5
	VPSUBQ ymm1, ymm1, ymm4
	VPAND ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm5, ymm5, ymm4
	VMOVAPD   [rsp + 704], ymm1
	VMOVAPS ymm4, [dword rdi + 256]
	VPSRLQ ymm3, ymm4, 52
	VORPS ymm2, ymm4, ymm10
	VSUBPD ymm2, ymm2, ymm10
	VPXOR xmm1, xmm1, xmm1
	VPCMPEQQ ymm1, ymm1, ymm3
	VPSRLQ ymm0, ymm2, 52
	VPSUBQ ymm0, ymm0,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm4, ymm4, ymm2, ymm1
	VPAND ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm4, ymm4, ymm11
	VPAND ymm0, ymm0, ymm1
	VPOR ymm0, ymm0, ymm3
	VCMPLTPD ymm3, ymm9, ymm4
	VPSUBQ ymm0, ymm0, ymm3
	VPAND ymm3, ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm4, ymm4, ymm3
	VMOVAPD   [rsp + 736], ymm0
	VMOVAPS ymm3, [dword rdi + 288]
	VPSRLQ ymm2, ymm3, 52
	VORPS ymm1, ymm3, ymm10
	VSUBPD ymm1, ymm1, ymm10
	VPXOR xmm10, xmm10, xmm10
	VPCMPEQQ ymm10, ymm10, ymm2
	VPSRLQ ymm0, ymm1, 52
	VPSUBQ ymm0, ymm0,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm3, ymm3, ymm1, ymm10
	VPAND ymm3, ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm3, ymm3, ymm11
	VPAND ymm0, ymm0, ymm10
	VPOR ymm0, ymm0, ymm2
	VCMPLTPD ymm9, ymm9, ymm3
	VPSUBQ ymm0, ymm0, ymm9
	VPAND ymm9, ymm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm3, ymm3, ymm9
	VMOVAPD   [rsp + 768], ymm0
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c41]
	VSUBPD ymm8, ymm8, ymm11
	VFMSUB132PD ymm12, ymm11, ymm11
	VMOVAPD   [rsp + 800], ymm12
	VSUBPD ymm13, ymm13, ymm11
	VFMSUB132PD ymm14, ymm11, ymm11
	VMOVAPD   [rsp + 832], ymm14
	VSUBPD ymm15, ymm15, ymm11
	VFMSUB132PD ymm7, ymm11, ymm11
	VMOVAPD   [rsp + 864], ymm7
	VSUBPD ymm6, ymm6, ymm11
	VFMSUB132PD ymm5, ymm11, ymm11
	VMOVAPD   [rsp + 896], ymm5
	VSUBPD ymm4, ymm4, ymm11
	VFMSUB132PD ymm3, ymm11, ymm11
	VMOVAPD   [rsp + 928], ymm3
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c42]
	VMOVAPD ymm11, ymm9
	VFMADD132PD ymm11, ymm10, ymm8
	VMOVAPD ymm3, ymm9
	VFMADD132PD ymm3, ymm10, ymm12
	VMOVAPD ymm12, ymm9
	VFMADD132PD ymm12, ymm10, ymm13
	VMOVAPD ymm2, ymm9
	VFMADD132PD ymm2, ymm10, ymm14
	VMOVAPD ymm14, ymm9
	VFMADD132PD ymm14, ymm10, ymm15
	VMOVAPD ymm1, ymm9
	VFMADD132PD ymm1, ymm10, ymm7
	VMOVAPD ymm7, ymm9
	VFMADD132PD ymm7, ymm10, ymm6
	VMOVAPD ymm0, ymm9
	VFMADD132PD ymm0, ymm10, ymm5
	VMOVAPD ymm5, ymm9
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c43]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c44]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c45]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c46]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c47]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c48]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c49]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c50]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c51]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c52]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c53]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c54]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c55]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c56]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c57]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c58]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMOVAPS ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c59]
	VFMADD132PD ymm11, ymm10, ymm8
	VFMADD132PD ymm3, ymm10,   [rsp + 800]
	VFMADD132PD ymm12, ymm10, ymm13
	VFMADD132PD ymm2, ymm10,   [rsp + 832]
	VFMADD132PD ymm14, ymm10, ymm15
	VFMADD132PD ymm1, ymm10,   [rsp + 864]
	VFMADD132PD ymm7, ymm10, ymm6
	VFMADD132PD ymm0, ymm10,   [rsp + 896]
	VFMADD132PD ymm5, ymm10, ymm4
	VFMADD132PD ymm9, ymm10,   [rsp + 928]
	VMULPD ymm11, ymm11, ymm8
	VFMADD213PD ymm11, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 800]
	VMULPD ymm3, ymm3, ymm8
	VFMADD213PD ymm3, ymm8, ymm8
	VMULPD ymm12, ymm12, ymm13
	VFMADD213PD ymm12, ymm13, ymm13
	VMOVAPD ymm8,   [rsp + 832]
	VMULPD ymm2, ymm2, ymm8
	VFMADD213PD ymm2, ymm8, ymm8
	VMULPD ymm14, ymm14, ymm15
	VFMADD213PD ymm14, ymm15, ymm15
	VMOVAPD ymm8,   [rsp + 864]
	VMULPD ymm1, ymm1, ymm8
	VFMADD213PD ymm1, ymm8, ymm8
	VMULPD ymm7, ymm7, ymm6
	VFMADD213PD ymm7, ymm6, ymm6
	VMOVAPD ymm8,   [rsp + 896]
	VMULPD ymm0, ymm0, ymm8
	VFMADD213PD ymm0, ymm8, ymm8
	VMULPD ymm5, ymm5, ymm4
	VFMADD213PD ymm5, ymm4, ymm4
	VMOVAPD ymm8,   [rsp + 928]
	VMULPD ymm9, ymm9, ymm8
	VFMADD213PD ymm9, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 480]
	VMOVDQA ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c38]
	VPADDQ ymm8, ymm8, ymm10
	VMOVAPS ymm13,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c40]
	VSUBPD ymm8, ymm8, ymm13
	VMOVAPS ymm15, ymm8
	VMOVAPS ymm6,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c60]
	VFMADD213PD ymm15, ymm6, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c61]
	VFMADD231PD ymm15, ymm8, ymm11
	VMOVAPD ymm8,   [rsp + 512]
	VPADDQ ymm8, ymm8, ymm10
	VSUBPD ymm8, ymm8, ymm13
	VMOVAPS ymm4, ymm8
	VFMADD213PD ymm4, ymm6, ymm3
	VFMADD231PD ymm4, ymm8, ymm11
	VMOVAPD ymm8,   [rsp + 544]
	VPADDQ ymm8, ymm8, ymm10
	VSUBPD ymm8, ymm8, ymm13
	VMOVAPS ymm3, ymm8
	VFMADD213PD ymm3, ymm6, ymm12
	VFMADD231PD ymm3, ymm8, ymm11
	VMOVAPD ymm8,   [rsp + 576]
	VPADDQ ymm8, ymm8, ymm10
	VSUBPD ymm8, ymm8, ymm13
	VMOVAPS ymm12, ymm8
	VFMADD213PD ymm12, ymm6, ymm2
	VFMADD231PD ymm12, ymm8, ymm11
	VMOVAPD ymm8,   [rsp + 608]
	VPADDQ ymm8, ymm8, ymm10
	VSUBPD ymm8, ymm8, ymm13
	VMOVAPS ymm2, ymm8
	VFMADD213PD ymm2, ymm6, ymm14
	VFMADD231PD ymm2, ymm8, ymm11
	VMOVAPD ymm8,   [rsp + 640]
	VPADDQ ymm8, ymm8, ymm10
	VSUBPD ymm8, ymm8, ymm13
	VMOVAPS ymm14, ymm8
	VFMADD213PD ymm14, ymm6, ymm1
	VFMADD231PD ymm14, ymm8, ymm11
	VMOVAPD ymm8,   [rsp + 672]
	VPADDQ ymm8, ymm8, ymm10
	VSUBPD ymm8, ymm8, ymm13
	VMOVAPS ymm1, ymm8
	VFMADD213PD ymm1, ymm6, ymm7
	VFMADD231PD ymm1, ymm8, ymm11
	VMOVAPD ymm8,   [rsp + 704]
	VPADDQ ymm8, ymm8, ymm10
	VSUBPD ymm8, ymm8, ymm13
	VMOVAPS ymm7, ymm8
	VFMADD213PD ymm7, ymm6, ymm0
	VFMADD231PD ymm7, ymm8, ymm11
	VMOVAPD ymm8,   [rsp + 736]
	VPADDQ ymm8, ymm8, ymm10
	VSUBPD ymm8, ymm8, ymm13
	VMOVAPS ymm0, ymm8
	VFMADD213PD ymm0, ymm6, ymm5
	VFMADD231PD ymm0, ymm8, ymm11
	VMOVAPD ymm8,   [rsp + 768]
	VPADDQ ymm8, ymm8, ymm10
	VSUBPD ymm8, ymm8, ymm13
	VMOVAPS ymm10, ymm8
	VFMADD213PD ymm10, ymm6, ymm9
	VFMADD231PD ymm10, ymm8, ymm11
	VMOVAPD ymm8, [rdi]
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c64]
	VBLENDVPD ymm15, ymm15, ymm9, ymm8
	VMOVAPS ymm11,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c65]
	VCMPNLTPD ymm13, ymm8, ymm11
	VBLENDVPD ymm15, ymm15, ymm8, ymm13
	VPXOR xmm13, xmm13, xmm13
	VPCMPEQQ ymm13, ymm8, ymm13
	VBLENDVPD ymm15, ymm15,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm13
	VMOVUPD [rsi], ymm15
	VMOVAPD ymm8, [byte rdi + 32]
	VBLENDVPD ymm4, ymm4, ymm9, ymm8
	VCMPNLTPD ymm13, ymm8, ymm11
	VBLENDVPD ymm4, ymm4, ymm8, ymm13
	VPXOR xmm13, xmm13, xmm13
	VPCMPEQQ ymm13, ymm8, ymm13
	VBLENDVPD ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm13
	VMOVUPD [byte rsi + 32], ymm4
	VMOVAPD ymm8, [byte rdi + 64]
	VBLENDVPD ymm3, ymm3, ymm9, ymm8
	VCMPNLTPD ymm13, ymm8, ymm11
	VBLENDVPD ymm3, ymm3, ymm8, ymm13
	VPXOR xmm13, xmm13, xmm13
	VPCMPEQQ ymm13, ymm8, ymm13
	VBLENDVPD ymm3, ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm13
	VMOVUPD [byte rsi + 64], ymm3
	VMOVAPD ymm8, [byte rdi + 96]
	VBLENDVPD ymm12, ymm12, ymm9, ymm8
	VCMPNLTPD ymm13, ymm8, ymm11
	VBLENDVPD ymm12, ymm12, ymm8, ymm13
	VPXOR xmm13, xmm13, xmm13
	VPCMPEQQ ymm13, ymm8, ymm13
	VBLENDVPD ymm12, ymm12,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm13
	VMOVUPD [byte rsi + 96], ymm12
	VMOVAPD ymm8, [dword rdi + 128]
	VBLENDVPD ymm2, ymm2, ymm9, ymm8
	VCMPNLTPD ymm12, ymm8, ymm11
	VBLENDVPD ymm2, ymm2, ymm8, ymm12
	VPXOR xmm12, xmm12, xmm12
	VPCMPEQQ ymm12, ymm8, ymm12
	VBLENDVPD ymm2, ymm2,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm12
	VMOVUPD [dword rsi + 128], ymm2
	VMOVAPD ymm8, [dword rdi + 160]
	VBLENDVPD ymm14, ymm14, ymm9, ymm8
	VCMPNLTPD ymm12, ymm8, ymm11
	VBLENDVPD ymm14, ymm14, ymm8, ymm12
	VPXOR xmm12, xmm12, xmm12
	VPCMPEQQ ymm12, ymm8, ymm12
	VBLENDVPD ymm14, ymm14,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm12
	VMOVUPD [dword rsi + 160], ymm14
	VMOVAPD ymm8, [dword rdi + 192]
	VBLENDVPD ymm1, ymm1, ymm9, ymm8
	VCMPNLTPD ymm12, ymm8, ymm11
	VBLENDVPD ymm1, ymm1, ymm8, ymm12
	VPXOR xmm12, xmm12, xmm12
	VPCMPEQQ ymm12, ymm8, ymm12
	VBLENDVPD ymm1, ymm1,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm12
	VMOVUPD [dword rsi + 192], ymm1
	VMOVAPD ymm8, [dword rdi + 224]
	VBLENDVPD ymm7, ymm7, ymm9, ymm8
	VCMPNLTPD ymm12, ymm8, ymm11
	VBLENDVPD ymm7, ymm7, ymm8, ymm12
	VPXOR xmm12, xmm12, xmm12
	VPCMPEQQ ymm12, ymm8, ymm12
	VBLENDVPD ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm12
	VMOVUPD [dword rsi + 224], ymm7
	VMOVAPD ymm8, [dword rdi + 256]
	VBLENDVPD ymm0, ymm0, ymm9, ymm8
	VCMPNLTPD ymm12, ymm8, ymm11
	VBLENDVPD ymm0, ymm0, ymm8, ymm12
	VPXOR xmm12, xmm12, xmm12
	VPCMPEQQ ymm12, ymm8, ymm12
	VBLENDVPD ymm0, ymm0,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm12
	VMOVUPD [dword rsi + 256], ymm0
	VMOVAPD ymm8, [dword rdi + 288]
	VBLENDVPD ymm10, ymm10, ymm9, ymm8
	VCMPNLTPD ymm9, ymm8, ymm11
	VBLENDVPD ymm10, ymm10, ymm8, ymm9
	VPXOR xmm9, xmm9, xmm9
	VPCMPEQQ ymm9, ymm8, ymm9
	VBLENDVPD ymm10, ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm9
	VMOVUPD [dword rsi + 288], ymm10
	JMP .process_batch_increment
