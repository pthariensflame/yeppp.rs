;                       Yeppp! library implementation
;                   This file is auto-generated by Peach-Py,
;        Portable Efficient Assembly Code-generator in Higher-level Python,
;                  part of the Yeppp! library infrastructure
; This file is part of Yeppp! library and licensed under the New BSD license.
; See LICENSE.txt for the full text of the license.

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.Bulldozer progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Tan_V64f_V64f_Bulldozer_constants:
	.c0: DQ 0x3FE45F306DC9C883
	.c1: DQ 0x4338000000000000
	.c2: DQ 0xBFF921FB54440000
	.c3: DQ 0xBD868C234C4C8000
	.c4: DQ 0x3B09D747F23E32ED
	.c5: DQ 0xBDA8FA87EF79AE3F
	.c6: DQ 0x3DE5D8711D281543
	.c7: DQ 0x3E21EE9DF6693F7E
	.c8: DQ 0xBE5AE5E38936D046
	.c9: DQ 0xBE927E4F7F65104F
	.c10: DQ 0x3EC71DE3535C8A8A
	.c11: DQ 0x3EFA01A019C94874
	.c12: DQ 0xBF2A01A019BB92C0
	.c13: DQ 0xBF56C16C16C15038
	.c14: DQ 0x3F8111111110F51E
	.c15: DQ 0x3FA555555555554B
	.c16: DQ 0xBFC5555555555546
	.c17: DQ 0xBFE0000000000000
	.c18: DQ 0x3FF0000000000000
	.c19: DQ 0x7FF0000000000000
	.c20: DQ 0x3FE0000000000000
	ALIGN 32
	.c21: DQ 0x3FF0000000000000, 0x3FF0000000000000
	ALIGN 32
	.c22: DQ 0x3FE45F306DC9C883, 0x3FE45F306DC9C883, 0x3FE45F306DC9C883, 0x3FE45F306DC9C883
	.c23: DQ 0x4338000000000000, 0x4338000000000000, 0x4338000000000000, 0x4338000000000000
	.c24: DQ 0xBFF921FB54440000, 0xBFF921FB54440000, 0xBFF921FB54440000, 0xBFF921FB54440000
	.c25: DQ 0xBD868C234C4C8000, 0xBD868C234C4C8000, 0xBD868C234C4C8000, 0xBD868C234C4C8000
	.c26: DQ 0x3B09D747F23E32ED, 0x3B09D747F23E32ED, 0x3B09D747F23E32ED, 0x3B09D747F23E32ED
	.c27: DQ 0xBDA8FA87EF79AE3F, 0xBDA8FA87EF79AE3F, 0xBDA8FA87EF79AE3F, 0xBDA8FA87EF79AE3F
	.c28: DQ 0x3E21EE9DF6693F7E, 0x3E21EE9DF6693F7E, 0x3E21EE9DF6693F7E, 0x3E21EE9DF6693F7E
	.c29: DQ 0x3DE5D8711D281543, 0x3DE5D8711D281543, 0x3DE5D8711D281543, 0x3DE5D8711D281543
	.c30: DQ 0xBE5AE5E38936D046, 0xBE5AE5E38936D046, 0xBE5AE5E38936D046, 0xBE5AE5E38936D046
	.c31: DQ 0xBE927E4F7F65104F, 0xBE927E4F7F65104F, 0xBE927E4F7F65104F, 0xBE927E4F7F65104F
	.c32: DQ 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A
	.c33: DQ 0x3EFA01A019C94874, 0x3EFA01A019C94874, 0x3EFA01A019C94874, 0x3EFA01A019C94874
	.c34: DQ 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0
	.c35: DQ 0xBF56C16C16C15038, 0xBF56C16C16C15038, 0xBF56C16C16C15038, 0xBF56C16C16C15038
	.c36: DQ 0x3F8111111110F51E, 0x3F8111111110F51E, 0x3F8111111110F51E, 0x3F8111111110F51E
	.c37: DQ 0x3FA555555555554B, 0x3FA555555555554B, 0x3FA555555555554B, 0x3FA555555555554B
	.c38: DQ 0xBFC5555555555546, 0xBFC5555555555546, 0xBFC5555555555546, 0xBFC5555555555546
	.c39: DQ 0xBFE0000000000000, 0xBFE0000000000000, 0xBFE0000000000000, 0xBFE0000000000000
	.c40: DQ 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000
	.c41: DQ 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000
	.c42: DQ 0x3FE0000000000000, 0x3FE0000000000000, 0x3FE0000000000000, 0x3FE0000000000000


%ifidn __OUTPUT_FORMAT__, elf64
section .text.Bulldozer progbits alloc exec nowrite align=16
global _yepMath_Tan_V64f_V64f_Bulldozer
_yepMath_Tan_V64f_V64f_Bulldozer:
%else
section .text
global __yepMath_Tan_V64f_V64f_Bulldozer
__yepMath_Tan_V64f_V64f_Bulldozer:
%endif
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 320
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm8, [rdi]
	VMULSD xmm9, xmm8, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c0]
	VADDSD xmm9, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c1]
	VPSLLQ xmm10, xmm9, 63
	VSUBSD xmm9, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c1]
	VMULSD xmm11, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c2]
	VADDSD xmm8, xmm8, xmm11
	VMOVAPS xmm11, xmm8
	VMULSD xmm12, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c3]
	VADDSD xmm8, xmm8, xmm12
	VSUBSD xmm13, xmm8, xmm11
	VSUBSD xmm12, xmm12, xmm13
	VMULSD xmm9, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c4]
	VADDSD xmm9, xmm9, xmm12
	VADDSD xmm8, xmm8, xmm9
	VMULSD xmm9, xmm8, xmm8
	VMOVSD xmm11, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c5]
	VMOVSD xmm12, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c6]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c7]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c8]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c9]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c10]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c11]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c12]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c13]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c14]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c15]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c16]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c17]
	VMULSD xmm12, xmm12, xmm9
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm12, xmm12, xmm8, xmm8
	VXORPD xmm12, xmm12, xmm10
	VBLENDVPD xmm8, xmm12, xmm11, xmm10
	VBLENDVPD xmm9, xmm11, xmm12, xmm10
	VMOVSD xmm10, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c19]
	VANDPD xmm11, xmm9, xmm10
	VXORPD xmm11, xmm11, xmm10
	VMULSD xmm11, xmm11, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c20]
	VANDNPD xmm10, xmm10, xmm9
	VORPS xmm10, xmm10,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c21]
	VCVTPD2PS xmm12, xmm10
	VRCPPS xmm12, xmm12
	VCVTPS2PD xmm12, xmm12
	VFNMADDSD xmm13, xmm12, xmm10, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm12, xmm12, xmm13, xmm12
	VFNMADDSD xmm13, xmm12, xmm10, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm12, xmm12, xmm13, xmm12
	VFNMADDSD xmm13, xmm12, xmm10, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm12, xmm12, xmm13, xmm12
	VMULSD xmm10, xmm12, xmm11
	VMULSD xmm11, xmm8, xmm10
	VFNMADDSD xmm13, xmm9, xmm11, xmm8
	VFMADDSD xmm11, xmm13, xmm10, xmm11
	VMOVSD [rsi], xmm11
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB rdx, 20
	JB .process_restore
	align 32
	.process_batch_full:
	VMOVAPS ymm8,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c22]
	VMOVAPS ymm9,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c23]
	VMOVAPD ymm10, [rdi]
	VMULPD ymm11, ymm10, ymm8
	VADDPD ymm11, ymm11, ymm9
	VMOVAPD ymm12, [byte rdi + 32]
	VMULPD ymm13, ymm12, ymm8
	VADDPD ymm13, ymm13, ymm9
	VMOVAPD ymm14, [byte rdi + 64]
	VMULPD ymm15, ymm14, ymm8
	VADDPD ymm15, ymm15, ymm9
	VMOVAPD ymm7, [byte rdi + 96]
	VMULPD ymm6, ymm7, ymm8
	VADDPD ymm6, ymm6, ymm9
	VMOVAPD ymm5, [dword rdi + 128]
	VMULPD ymm8, ymm5, ymm8
	VADDPD ymm8, ymm8, ymm9
	VEXTRACTF128 xmm4, ymm11, 1
	VPSLLQ xmm3, xmm11, 63
	VMOVDQA   [rsp], xmm3
	VPSLLQ xmm4, xmm4, 63
	VMOVDQA   [rsp + 16], xmm4
	VSUBPD ymm11, ymm11, ymm9
	VEXTRACTF128 xmm4, ymm13, 1
	VPSLLQ xmm3, xmm13, 63
	VMOVDQA   [rsp + 32], xmm3
	VPSLLQ xmm4, xmm4, 63
	VMOVDQA   [rsp + 48], xmm4
	VSUBPD ymm13, ymm13, ymm9
	VEXTRACTF128 xmm4, ymm15, 1
	VPSLLQ xmm3, xmm15, 63
	VMOVDQA   [rsp + 64], xmm3
	VPSLLQ xmm4, xmm4, 63
	VMOVDQA   [rsp + 80], xmm4
	VSUBPD ymm15, ymm15, ymm9
	VEXTRACTF128 xmm4, ymm6, 1
	VPSLLQ xmm3, xmm6, 63
	VMOVDQA   [rsp + 96], xmm3
	VPSLLQ xmm4, xmm4, 63
	VMOVDQA   [rsp + 112], xmm4
	VSUBPD ymm6, ymm6, ymm9
	VEXTRACTF128 xmm4, ymm8, 1
	VPSLLQ xmm3, xmm8, 63
	VMOVDQA   [rsp + 128], xmm3
	VPSLLQ xmm4, xmm4, 63
	VMOVDQA   [rsp + 144], xmm4
	VSUBPD ymm8, ymm8, ymm9
	VMULPD ymm9, ymm11,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c24]
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm9, ymm13,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c24]
	VADDPD ymm12, ymm12, ymm9
	VMULPD ymm9, ymm15,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c24]
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm9, ymm6,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c24]
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm9, ymm8,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c24]
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm9, ymm11,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c25]
	VADDPD ymm4, ymm10, ymm9
	VSUBPD ymm10, ymm4, ymm10
	VSUBPD ymm9, ymm9, ymm10
	VMULPD ymm11, ymm11,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c26]
	VADDPD ymm11, ymm11, ymm9
	VADDPD ymm4, ymm4, ymm11
	VMULPD ymm9, ymm13,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c25]
	VADDPD ymm10, ymm12, ymm9
	VSUBPD ymm11, ymm10, ymm12
	VSUBPD ymm9, ymm9, ymm11
	VMULPD ymm13, ymm13,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c26]
	VADDPD ymm13, ymm13, ymm9
	VADDPD ymm10, ymm10, ymm13
	VMULPD ymm9, ymm15,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c25]
	VADDPD ymm11, ymm14, ymm9
	VSUBPD ymm12, ymm11, ymm14
	VSUBPD ymm9, ymm9, ymm12
	VMULPD ymm15, ymm15,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c26]
	VADDPD ymm15, ymm15, ymm9
	VADDPD ymm11, ymm11, ymm15
	VMULPD ymm9, ymm6,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c25]
	VADDPD ymm12, ymm7, ymm9
	VSUBPD ymm13, ymm12, ymm7
	VSUBPD ymm9, ymm9, ymm13
	VMULPD ymm6, ymm6,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c26]
	VADDPD ymm6, ymm6, ymm9
	VADDPD ymm12, ymm12, ymm6
	VMULPD ymm9, ymm8,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c25]
	VADDPD ymm13, ymm5, ymm9
	VSUBPD ymm14, ymm13, ymm5
	VSUBPD ymm9, ymm9, ymm14
	VMULPD ymm8, ymm8,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c26]
	VADDPD ymm8, ymm8, ymm9
	VADDPD ymm13, ymm13, ymm8
	VMOVAPD   [rsp + 160], ymm4
	VMULPD ymm8, ymm4, ymm4
	VMOVAPD   [rsp + 192], ymm10
	VMULPD ymm9, ymm10, ymm10
	VMOVAPD   [rsp + 224], ymm11
	VMULPD ymm10, ymm11, ymm11
	VMOVAPD   [rsp + 256], ymm12
	VMULPD ymm11, ymm12, ymm12
	VMOVAPD   [rsp + 288], ymm13
	VMULPD ymm12, ymm13, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c27]
	VMOVAPS ymm14,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c28]
	VFMADDPD ymm15, ymm13, ymm8, ymm14
	VFMADDPD ymm7, ymm13, ymm9, ymm14
	VFMADDPD ymm6, ymm13, ymm10, ymm14
	VFMADDPD ymm5, ymm13, ymm11, ymm14
	VFMADDPD ymm13, ymm13, ymm12, ymm14
	VMOVAPS ymm14,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c29]
	VMOVAPS ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c30]
	VFMADDPD ymm3, ymm14, ymm8, ymm4
	VFMADDPD ymm2, ymm14, ymm9, ymm4
	VFMADDPD ymm1, ymm14, ymm10, ymm4
	VFMADDPD ymm0, ymm14, ymm11, ymm4
	VFMADDPD ymm14, ymm14, ymm12, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c31]
	VFMADDPD ymm15, ymm15, ymm8, ymm4
	VFMADDPD ymm7, ymm7, ymm9, ymm4
	VFMADDPD ymm6, ymm6, ymm10, ymm4
	VFMADDPD ymm5, ymm5, ymm11, ymm4
	VFMADDPD ymm13, ymm13, ymm12, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c32]
	VFMADDPD ymm3, ymm3, ymm8, ymm4
	VFMADDPD ymm2, ymm2, ymm9, ymm4
	VFMADDPD ymm1, ymm1, ymm10, ymm4
	VFMADDPD ymm0, ymm0, ymm11, ymm4
	VFMADDPD ymm14, ymm14, ymm12, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c33]
	VFMADDPD ymm15, ymm15, ymm8, ymm4
	VFMADDPD ymm7, ymm7, ymm9, ymm4
	VFMADDPD ymm6, ymm6, ymm10, ymm4
	VFMADDPD ymm5, ymm5, ymm11, ymm4
	VFMADDPD ymm13, ymm13, ymm12, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c34]
	VFMADDPD ymm3, ymm3, ymm8, ymm4
	VFMADDPD ymm2, ymm2, ymm9, ymm4
	VFMADDPD ymm1, ymm1, ymm10, ymm4
	VFMADDPD ymm0, ymm0, ymm11, ymm4
	VFMADDPD ymm14, ymm14, ymm12, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c35]
	VFMADDPD ymm15, ymm15, ymm8, ymm4
	VFMADDPD ymm7, ymm7, ymm9, ymm4
	VFMADDPD ymm6, ymm6, ymm10, ymm4
	VFMADDPD ymm5, ymm5, ymm11, ymm4
	VFMADDPD ymm13, ymm13, ymm12, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c36]
	VFMADDPD ymm3, ymm3, ymm8, ymm4
	VFMADDPD ymm2, ymm2, ymm9, ymm4
	VFMADDPD ymm1, ymm1, ymm10, ymm4
	VFMADDPD ymm0, ymm0, ymm11, ymm4
	VFMADDPD ymm14, ymm14, ymm12, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c37]
	VFMADDPD ymm15, ymm15, ymm8, ymm4
	VFMADDPD ymm7, ymm7, ymm9, ymm4
	VFMADDPD ymm6, ymm6, ymm10, ymm4
	VFMADDPD ymm5, ymm5, ymm11, ymm4
	VFMADDPD ymm13, ymm13, ymm12, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c38]
	VFMADDPD ymm3, ymm3, ymm8, ymm4
	VFMADDPD ymm2, ymm2, ymm9, ymm4
	VFMADDPD ymm1, ymm1, ymm10, ymm4
	VFMADDPD ymm0, ymm0, ymm11, ymm4
	VFMADDPD ymm14, ymm14, ymm12, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c39]
	VFMADDPD ymm15, ymm15, ymm8, ymm4
	VFMADDPD ymm7, ymm7, ymm9, ymm4
	VFMADDPD ymm6, ymm6, ymm10, ymm4
	VFMADDPD ymm5, ymm5, ymm11, ymm4
	VFMADDPD ymm13, ymm13, ymm12, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c40]
	VMULPD ymm3, ymm3, ymm8
	VFMADDPD ymm15, ymm15, ymm8, ymm4
	VMOVAPD ymm8,   [rsp + 160]
	VFMADDPD ymm3, ymm3, ymm8, ymm8
	VMULPD ymm2, ymm2, ymm9
	VFMADDPD ymm7, ymm7, ymm9, ymm4
	VMOVAPD ymm8,   [rsp + 192]
	VFMADDPD ymm2, ymm2, ymm8, ymm8
	VMULPD ymm1, ymm1, ymm10
	VFMADDPD ymm6, ymm6, ymm10, ymm4
	VMOVAPD ymm8,   [rsp + 224]
	VFMADDPD ymm1, ymm1, ymm8, ymm8
	VMULPD ymm0, ymm0, ymm11
	VFMADDPD ymm5, ymm5, ymm11, ymm4
	VMOVAPD ymm8,   [rsp + 256]
	VFMADDPD ymm0, ymm0, ymm8, ymm8
	VMULPD ymm14, ymm14, ymm12
	VFMADDPD ymm13, ymm13, ymm12, ymm4
	VMOVAPD ymm8,   [rsp + 288]
	VFMADDPD ymm14, ymm14, ymm8, ymm8
	VMOVAPD ymm8,   [rsp]
	VXORPD ymm3, ymm3, ymm8
	VBLENDVPD ymm9, ymm3, ymm15, ymm8
	VBLENDVPD ymm8, ymm15, ymm3, ymm8
	VMOVAPD ymm10,   [rsp + 32]
	VXORPD ymm2, ymm2, ymm10
	VBLENDVPD ymm11, ymm2, ymm7, ymm10
	VBLENDVPD ymm10, ymm7, ymm2, ymm10
	VMOVAPD ymm12,   [rsp + 64]
	VXORPD ymm1, ymm1, ymm12
	VBLENDVPD ymm15, ymm1, ymm6, ymm12
	VBLENDVPD ymm12, ymm6, ymm1, ymm12
	VMOVAPD ymm7,   [rsp + 96]
	VXORPD ymm0, ymm0, ymm7
	VBLENDVPD ymm6, ymm0, ymm5, ymm7
	VBLENDVPD ymm7, ymm5, ymm0, ymm7
	VMOVAPD ymm5,   [rsp + 128]
	VXORPD ymm14, ymm14, ymm5
	VBLENDVPD ymm4, ymm14, ymm13, ymm5
	VBLENDVPD ymm13, ymm13, ymm14, ymm5
	VMOVAPD ymm14,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c41]
	VMOVAPD ymm5,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c40]
	VANDPD ymm3, ymm8, ymm14
	VXORPD ymm3, ymm3, ymm14
	VMULPD ymm3, ymm3,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c42]
	VANDNPD ymm2, ymm14, ymm8
	VORPS ymm2, ymm2, ymm5
	VCVTPD2PS xmm1, ymm2
	VRCPPS xmm1, xmm1
	VCVTPS2PD ymm1, xmm1
	VFNMADDPD ymm0, ymm1, ymm2, ymm5
	VFMADDPD ymm1, ymm1, ymm0, ymm1
	VFNMADDPD ymm0, ymm1, ymm2, ymm5
	VFMADDPD ymm1, ymm1, ymm0, ymm1
	VFNMADDPD ymm0, ymm1, ymm2, ymm5
	VFMADDPD ymm1, ymm1, ymm0, ymm1
	VMULPD ymm3, ymm1, ymm3
	VMULPD ymm2, ymm9, ymm3
	VFNMADDPD ymm0, ymm8, ymm2, ymm9
	VFMADDPD ymm2, ymm0, ymm3, ymm2
	VMOVUPD [rsi], xmm2
	VEXTRACTF128 [byte rsi + 16], ymm2, 1
	VANDPD ymm8, ymm10, ymm14
	VXORPD ymm8, ymm8, ymm14
	VMULPD ymm8, ymm8,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c42]
	VANDNPD ymm9, ymm14, ymm10
	VORPS ymm9, ymm9, ymm5
	VCVTPD2PS xmm3, ymm9
	VRCPPS xmm3, xmm3
	VCVTPS2PD ymm3, xmm3
	VFNMADDPD ymm2, ymm3, ymm9, ymm5
	VFMADDPD ymm3, ymm3, ymm2, ymm3
	VFNMADDPD ymm2, ymm3, ymm9, ymm5
	VFMADDPD ymm3, ymm3, ymm2, ymm3
	VFNMADDPD ymm2, ymm3, ymm9, ymm5
	VFMADDPD ymm3, ymm3, ymm2, ymm3
	VMULPD ymm8, ymm3, ymm8
	VMULPD ymm9, ymm11, ymm8
	VFNMADDPD ymm2, ymm10, ymm9, ymm11
	VFMADDPD ymm9, ymm2, ymm8, ymm9
	VMOVUPD [byte rsi + 32], xmm9
	VEXTRACTF128 [byte rsi + 48], ymm9, 1
	VANDPD ymm8, ymm12, ymm14
	VXORPD ymm8, ymm8, ymm14
	VMULPD ymm8, ymm8,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c42]
	VANDNPD ymm9, ymm14, ymm12
	VORPS ymm9, ymm9, ymm5
	VCVTPD2PS xmm10, ymm9
	VRCPPS xmm10, xmm10
	VCVTPS2PD ymm10, xmm10
	VFNMADDPD ymm11, ymm10, ymm9, ymm5
	VFMADDPD ymm10, ymm10, ymm11, ymm10
	VFNMADDPD ymm11, ymm10, ymm9, ymm5
	VFMADDPD ymm10, ymm10, ymm11, ymm10
	VFNMADDPD ymm11, ymm10, ymm9, ymm5
	VFMADDPD ymm10, ymm10, ymm11, ymm10
	VMULPD ymm8, ymm10, ymm8
	VMULPD ymm9, ymm15, ymm8
	VFNMADDPD ymm11, ymm12, ymm9, ymm15
	VFMADDPD ymm9, ymm11, ymm8, ymm9
	VMOVUPD [byte rsi + 64], xmm9
	VEXTRACTF128 [byte rsi + 80], ymm9, 1
	VANDPD ymm8, ymm7, ymm14
	VXORPD ymm8, ymm8, ymm14
	VMULPD ymm8, ymm8,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c42]
	VANDNPD ymm9, ymm14, ymm7
	VORPS ymm9, ymm9, ymm5
	VCVTPD2PS xmm10, ymm9
	VRCPPS xmm10, xmm10
	VCVTPS2PD ymm10, xmm10
	VFNMADDPD ymm11, ymm10, ymm9, ymm5
	VFMADDPD ymm10, ymm10, ymm11, ymm10
	VFNMADDPD ymm11, ymm10, ymm9, ymm5
	VFMADDPD ymm10, ymm10, ymm11, ymm10
	VFNMADDPD ymm11, ymm10, ymm9, ymm5
	VFMADDPD ymm10, ymm10, ymm11, ymm10
	VMULPD ymm8, ymm10, ymm8
	VMULPD ymm9, ymm6, ymm8
	VFNMADDPD ymm11, ymm7, ymm9, ymm6
	VFMADDPD ymm9, ymm11, ymm8, ymm9
	VMOVUPD [byte rsi + 96], xmm9
	VEXTRACTF128 [byte rsi + 112], ymm9, 1
	VANDPD ymm8, ymm13, ymm14
	VXORPD ymm8, ymm8, ymm14
	VMULPD ymm8, ymm8,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c42]
	VANDNPD ymm9, ymm14, ymm13
	VORPS ymm9, ymm9, ymm5
	VCVTPD2PS xmm10, ymm9
	VRCPPS xmm10, xmm10
	VCVTPS2PD ymm10, xmm10
	VFNMADDPD ymm11, ymm10, ymm9, ymm5
	VFMADDPD ymm10, ymm10, ymm11, ymm10
	VFNMADDPD ymm11, ymm10, ymm9, ymm5
	VFMADDPD ymm10, ymm10, ymm11, ymm10
	VFNMADDPD ymm11, ymm10, ymm9, ymm5
	VFMADDPD ymm10, ymm10, ymm11, ymm10
	VMULPD ymm8, ymm10, ymm8
	VMULPD ymm9, ymm4, ymm8
	VFNMADDPD ymm11, ymm13, ymm9, ymm4
	VFMADDPD ymm9, ymm11, ymm8, ymm9
	VMOVUPD [dword rsi + 128], xmm9
	VEXTRACTF128 [dword rsi + 144], ymm9, 1
	ADD rdi, 160
	ADD rsi, 160
	SUB rdx, 20
	JAE .process_batch_full
	.process_restore:
	ADD rdx, 20
	JZ .return_ok
	.process_single:
	VMOVSD xmm8, [rdi]
	VMULSD xmm9, xmm8, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c0]
	VADDSD xmm9, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c1]
	VPSLLQ xmm10, xmm9, 63
	VSUBSD xmm9, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c1]
	VMULSD xmm11, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c2]
	VADDSD xmm8, xmm8, xmm11
	VMOVAPS xmm11, xmm8
	VMULSD xmm12, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c3]
	VADDSD xmm8, xmm8, xmm12
	VSUBSD xmm13, xmm8, xmm11
	VSUBSD xmm12, xmm12, xmm13
	VMULSD xmm9, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c4]
	VADDSD xmm9, xmm9, xmm12
	VADDSD xmm8, xmm8, xmm9
	VMULSD xmm9, xmm8, xmm8
	VMOVSD xmm11, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c5]
	VMOVSD xmm12, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c6]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c7]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c8]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c9]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c10]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c11]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c12]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c13]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c14]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c15]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c16]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c17]
	VMULSD xmm12, xmm12, xmm9
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm12, xmm12, xmm8, xmm8
	VXORPD xmm12, xmm12, xmm10
	VBLENDVPD xmm8, xmm12, xmm11, xmm10
	VBLENDVPD xmm9, xmm11, xmm12, xmm10
	VMOVSD xmm10, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c19]
	VANDPD xmm11, xmm9, xmm10
	VXORPD xmm11, xmm11, xmm10
	VMULSD xmm11, xmm11, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c20]
	VANDNPD xmm10, xmm10, xmm9
	VORPS xmm10, xmm10,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c21]
	VCVTPD2PS xmm12, xmm10
	VRCPPS xmm12, xmm12
	VCVTPS2PD xmm12, xmm12
	VFNMADDSD xmm13, xmm12, xmm10, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm12, xmm12, xmm13, xmm12
	VFNMADDSD xmm13, xmm12, xmm10, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm12, xmm12, xmm13, xmm12
	VFNMADDSD xmm13, xmm12, xmm10, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm12, xmm12, xmm13, xmm12
	VMULSD xmm10, xmm12, xmm11
	VMULSD xmm11, xmm8, xmm10
	VFNMADDSD xmm13, xmm9, xmm11, xmm8
	VFMADDSD xmm11, xmm13, xmm10, xmm11
	VMOVSD [rsi], xmm11
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	MOV rsp, [dword rsp + 320]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
