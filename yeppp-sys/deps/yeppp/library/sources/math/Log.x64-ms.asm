;                       Yeppp! library implementation
;                   This file is auto-generated by Peach-Py,
;        Portable Efficient Assembly Code-generator in Higher-level Python,
;                  part of the Yeppp! library infrastructure
; This file is part of Yeppp! library and licensed under the New BSD license.
; See LICENSE.txt for the full text of the license.

section .rdata$q rdata align=32
_yepMath_Log_V64f_V64f_Bobcat_constants:
	.c0: DQ 0x4330000000000000, 0x4330000000000000
	.c1: DQ 0x4330000000000000
	.c5: DQ 0x3FF6A09E667F3BCD
	.c2: DQ 0x0000000000000432, 0x0000000000000432
	.c3: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c6: DQ 0x0010000000000000, 0x0010000000000000
	.c7: DQ 0x3FF0000000000000
	.c8: DQ 0xBF9CC4EC078138E3
	.c9: DQ 0x3FB0266CD08DB2F2
	.c10: DQ 0xBFB1654764F478EC
	.c11: DQ 0x3FAEA17E14773369
	.c12: DQ 0xBFAEED2E2BB64B2E
	.c13: DQ 0x3FB0F23916A44515
	.c14: DQ 0xBFB25480A82633AF
	.c15: DQ 0x3FB3B4ED39194B87
	.c16: DQ 0xBFB554D5ACD502AB
	.c17: DQ 0x3FB745980F3FB889
	.c18: DQ 0xBFB9999C5BE751E3
	.c19: DQ 0x3FBC71C90DB06248
	.c20: DQ 0xBFBFFFFFFBD8606D
	.c21: DQ 0x3FC249248DAE4B2A
	.c22: DQ 0xBFC55555554A6A2B
	.c23: DQ 0x3FC9999999A43E4F
	.c24: DQ 0xBFD00000000013C7
	.c25: DQ 0x3FD5555555555103
	.c26: DQ 0xBFDFFFFFFFFFFFF2
	.c27: DQ 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01
	.c28: DQ 0x4338000000000000, 0x4338000000000000
	.c29: DQ 0x3D2EF35793C76730
	.c30: DQ 0x3FE62E42FEFA3800
	.c31: DQ 0xFFF0000000000000
	.c32: DQ 0x7FF8000000000000
	.c33: DQ 0x7FF0000000000000
	ALIGN 16
	.c34: DQ 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD
	.c35: DQ 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3
	.c36: DQ 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2
	.c37: DQ 0xBFB1654764F478EC, 0xBFB1654764F478EC
	.c38: DQ 0x3FAEA17E14773369, 0x3FAEA17E14773369
	.c39: DQ 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E
	.c40: DQ 0x3FB0F23916A44515, 0x3FB0F23916A44515
	.c41: DQ 0xBFB25480A82633AF, 0xBFB25480A82633AF
	.c42: DQ 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87
	.c43: DQ 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB
	.c44: DQ 0x3FB745980F3FB889, 0x3FB745980F3FB889
	.c45: DQ 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3
	.c46: DQ 0x3FBC71C90DB06248, 0x3FBC71C90DB06248
	.c47: DQ 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D
	.c48: DQ 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A
	.c49: DQ 0xBFC55555554A6A2B, 0xBFC55555554A6A2B
	.c50: DQ 0x3FC9999999A43E4F, 0x3FC9999999A43E4F
	.c51: DQ 0xBFD00000000013C7, 0xBFD00000000013C7
	.c52: DQ 0x3FD5555555555103, 0x3FD5555555555103
	.c53: DQ 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2
	.c54: DQ 0x3D2EF35793C76730, 0x3D2EF35793C76730
	.c55: DQ 0x3FE62E42FEFA3800, 0x3FE62E42FEFA3800
	.c56: DQ 0xFFF0000000000000, 0xFFF0000000000000
	.c57: DQ 0x7FF0000000000000, 0x7FF0000000000000
	.c58: DQ 0x7FF8000000000000, 0x7FF8000000000000


section .text$q code align=16
global _yepMath_Log_V64f_V64f_Bobcat
_yepMath_Log_V64f_V64f_Bobcat:
	.ENTRY:
	SUB rsp, 168
	MOVAPS [rsp], xmm6
	MOVAPS [byte rsp + 16], xmm7
	MOVAPS [byte rsp + 32], xmm8
	MOVAPS [byte rsp + 48], xmm9
	MOVAPS [byte rsp + 64], xmm10
	MOVAPS [byte rsp + 80], xmm11
	MOVAPS [byte rsp + 96], xmm12
	MOVAPS [byte rsp + 112], xmm13
	MOVAPS [dword rsp + 128], xmm14
	MOVAPS [dword rsp + 144], xmm15
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 15
	JZ .source_16b_aligned
	.source_16b_misaligned:
	MOVSD xmm4, [rcx]
	MOVSD xmm5, xmm4
	PSRLQ xmm5, 52
	MOVSD xmm3, xmm4
	ORPS xmm3,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c0]
	SUBSD xmm3, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c1]
	PXOR xmm2, xmm2
	CMPEQSD xmm2, xmm5
	MOVDQA xmm1, xmm3
	PSRLQ xmm1, 52
	PSUBQ xmm1,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c2]
	PAND xmm1, xmm2
	POR xmm1, xmm5
	PAND xmm3, xmm2
	PANDN xmm2, xmm4
	POR xmm2, xmm3
	PAND xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c3]
	POR xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c4]
	MOVSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c5]
	CMPLTSD xmm4, xmm2
	PSUBQ xmm1, xmm4
	PAND xmm4,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c6]
	PSUBD xmm2, xmm4
	SUBSD xmm2, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c7]
	MOVSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c8]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c9]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c10]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c11]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c12]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c13]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c14]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c15]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c16]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c17]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c18]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c19]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c20]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c21]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c22]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c23]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c24]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c25]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c26]
	MULSD xmm4, xmm2
	MULSD xmm4, xmm2
	ADDSD xmm4, xmm2
	PADDQ xmm1,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c27]
	SUBSD xmm1,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c28]
	MOVSD xmm5, xmm1
	MULSD xmm5, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c29]
	ADDSD xmm5, xmm4
	MULSD xmm1, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c30]
	ADDSD xmm5, xmm1
	MOVSD xmm4, [rcx]
	PXOR xmm3, xmm3
	MOVSD xmm2, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c31]
	CMPEQSD xmm3, xmm4
	PAND xmm2, xmm3
	PANDN xmm3, xmm5
	POR xmm3, xmm2
	PSHUFLW xmm5, xmm4, 238
	PSRAD xmm5, 31
	MOVSD xmm2, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c32]
	PAND xmm2, xmm5
	PANDN xmm5, xmm3
	POR xmm5, xmm2
	MOVSD xmm3, xmm4
	CMPNLTSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c33]
	PAND xmm3, xmm4
	PANDN xmm4, xmm5
	POR xmm4, xmm3
	MOVSD [rdx], xmm4
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 15
	JNZ .source_16b_misaligned
	.source_16b_aligned:
	SUB r8, 6
	JB .process_restore
	align 32
	.process_batch_fast:
	MOV rax, 4503599627370496
	MOV r10, 9214364837600034815
	MOVAPS xmm4, [rcx]
	MOVAPS xmm5, xmm4
	PSRLQ xmm5, 52
	MOVAPS xmm3, [byte rcx + 16]
	MOVAPS xmm2, xmm3
	PSRLQ xmm2, 52
	MOVAPS xmm1, [byte rcx + 32]
	MOVAPS xmm0, xmm1
	PSRLQ xmm0, 52
	MOVAPS xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c3]
	MOVAPS xmm7,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c4]
	MOVAPS xmm8,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c34]
	PAND xmm4, xmm6
	MOV r11, [rcx]
	POR xmm4, xmm7
	PAND xmm3, xmm6
	SUB r11, rax
	POR xmm3, xmm7
	PAND xmm1, xmm6
	CMP r11, r10
	POR xmm1, xmm7
	MOVAPS xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c6]
	MOVAPS xmm9, xmm8
	MOVAPS xmm10, xmm8
	CMPLTPD xmm8, xmm4
	PSUBQ xmm5, xmm8
	JA .process_batch_full
	PAND xmm8, xmm6
	PSUBD xmm4, xmm8
	MOV r11, [byte rcx + 8]
	CMPLTPD xmm9, xmm3
	PSUBQ xmm2, xmm9
	SUB r11, rax
	PAND xmm9, xmm6
	PSUBD xmm3, xmm9
	CMP r11, r10
	CMPLTPD xmm10, xmm1
	PSUBQ xmm0, xmm10
	JA .process_batch_full
	PAND xmm10, xmm6
	PSUBD xmm1, xmm10
	MOV r11, [byte rcx + 16]
	MOVAPS xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c35]
	SUBPD xmm4, xmm7
	SUB r11, rax
	SUBPD xmm3, xmm7
	CMP r11, r10
	SUBPD xmm1, xmm7
	JA .process_batch_full
	MOVAPS xmm7, xmm6
	MOVAPS xmm8, xmm6
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c36]
	MULPD xmm6, xmm4
	MOV r11, [byte rcx + 24]
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	SUB r11, rax
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	CMP r11, r10
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c37]
	MULPD xmm6, xmm4
	JA .process_batch_full
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	MOV r11, [byte rcx + 32]
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	SUB r11, rax
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c38]
	MULPD xmm6, xmm4
	CMP r11, r10
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	JA .process_batch_full
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	MOV r11, [byte rcx + 40]
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c39]
	MULPD xmm6, xmm4
	SUB r11, rax
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	CMP r11, r10
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	JA .process_batch_full
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c40]
	MULPD xmm6, xmm4
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c41]
	MULPD xmm6, xmm4
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c42]
	MULPD xmm6, xmm4
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c43]
	MULPD xmm6, xmm4
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c44]
	MULPD xmm6, xmm4
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c45]
	MULPD xmm6, xmm4
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c46]
	MULPD xmm6, xmm4
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c47]
	MULPD xmm6, xmm4
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c48]
	MULPD xmm6, xmm4
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c49]
	MULPD xmm6, xmm4
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c50]
	MULPD xmm6, xmm4
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c51]
	MULPD xmm6, xmm4
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c52]
	MULPD xmm6, xmm4
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm9
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c53]
	MULPD xmm6, xmm4
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm9
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm9
	MULPD xmm6, xmm4
	MULPD xmm7, xmm3
	MULPD xmm8, xmm1
	MOVDQA xmm9,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c27]
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c28]
	MULPD xmm6, xmm4
	ADDPD xmm6, xmm4
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm3
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm1
	MOVAPD xmm4,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c54]
	PADDQ xmm5, xmm9
	SUBPD xmm5, xmm10
	PADDQ xmm2, xmm9
	SUBPD xmm2, xmm10
	PADDQ xmm0, xmm9
	SUBPD xmm0, xmm10
	MOVAPD xmm3,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c55]
	MOVAPS xmm1, xmm5
	MULPD xmm1, xmm4
	ADDPD xmm1, xmm6
	MOVAPS xmm6, xmm2
	MULPD xmm6, xmm4
	ADDPD xmm6, xmm7
	MOVAPS xmm7, xmm0
	MULPD xmm7, xmm4
	ADDPD xmm7, xmm8
	MULPD xmm5, xmm3
	ADDPD xmm1, xmm5
	MOVUPS [rdx], xmm1
	MULPD xmm2, xmm3
	ADDPD xmm6, xmm2
	MOVUPS [byte rdx + 16], xmm6
	MULPD xmm0, xmm3
	ADDPD xmm7, xmm0
	MOVUPS [byte rdx + 32], xmm7
	.process_batch_increment:
	ADD rcx, 48
	ADD rdx, 48
	SUB r8, 6
	JAE .process_batch_fast
	.process_restore:
	ADD r8, 6
	JZ .return_ok
	.process_single:
	MOVSD xmm4, [rcx]
	MOVSD xmm5, xmm4
	PSRLQ xmm5, 52
	MOVSD xmm3, xmm4
	ORPS xmm3,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c0]
	SUBSD xmm3, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c1]
	PXOR xmm2, xmm2
	CMPEQSD xmm2, xmm5
	MOVDQA xmm1, xmm3
	PSRLQ xmm1, 52
	PSUBQ xmm1,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c2]
	PAND xmm1, xmm2
	POR xmm1, xmm5
	PAND xmm3, xmm2
	PANDN xmm2, xmm4
	POR xmm2, xmm3
	PAND xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c3]
	POR xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c4]
	MOVSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c5]
	CMPLTSD xmm4, xmm2
	PSUBQ xmm1, xmm4
	PAND xmm4,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c6]
	PSUBD xmm2, xmm4
	SUBSD xmm2, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c7]
	MOVSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c8]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c9]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c10]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c11]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c12]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c13]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c14]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c15]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c16]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c17]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c18]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c19]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c20]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c21]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c22]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c23]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c24]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c25]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c26]
	MULSD xmm4, xmm2
	MULSD xmm4, xmm2
	ADDSD xmm4, xmm2
	PADDQ xmm1,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c27]
	SUBSD xmm1,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c28]
	MOVSD xmm5, xmm1
	MULSD xmm5, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c29]
	ADDSD xmm5, xmm4
	MULSD xmm1, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c30]
	ADDSD xmm5, xmm1
	MOVSD xmm4, [rcx]
	PXOR xmm3, xmm3
	MOVSD xmm2, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c31]
	CMPEQSD xmm3, xmm4
	PAND xmm2, xmm3
	PANDN xmm3, xmm5
	POR xmm3, xmm2
	PSHUFLW xmm5, xmm4, 238
	PSRAD xmm5, 31
	MOVSD xmm2, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c32]
	PAND xmm2, xmm5
	PANDN xmm5, xmm3
	POR xmm5, xmm2
	MOVSD xmm3, xmm4
	CMPNLTSD xmm4, [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c33]
	PAND xmm3, xmm4
	PANDN xmm4, xmm5
	POR xmm4, xmm3
	MOVSD [rdx], xmm4
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	MOVAPS xmm6, [rsp]
	MOVAPS xmm7, [byte rsp + 16]
	MOVAPS xmm8, [byte rsp + 32]
	MOVAPS xmm9, [byte rsp + 48]
	MOVAPS xmm10, [byte rsp + 64]
	MOVAPS xmm11, [byte rsp + 80]
	MOVAPS xmm12, [byte rsp + 96]
	MOVAPS xmm13, [byte rsp + 112]
	MOVAPS xmm14, [dword rsp + 128]
	MOVAPS xmm15, [dword rsp + 144]
	ADD rsp, 168
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	MOVAPS xmm4, [rcx]
	MOVAPS xmm5, xmm4
	MOVAPS xmm3, [byte rcx + 16]
	MOVAPS xmm2, xmm3
	MOVAPS xmm1, [byte rcx + 32]
	MOVAPS xmm0, xmm1
	MOVAPS xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c0]
	PSRLQ xmm5, 52
	MOVAPS xmm7, xmm4
	PSRLQ xmm2, 52
	MOVAPS xmm8, xmm3
	PSRLQ xmm0, 52
	MOVAPS xmm9, xmm1
	MOVAPS xmm10,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c2]
	ORPS xmm7, xmm6
	SUBPD xmm7, xmm6
	ORPS xmm8, xmm6
	SUBPD xmm8, xmm6
	ORPS xmm9, xmm6
	SUBPD xmm9, xmm6
	PXOR xmm6, xmm6
	CMPEQPD xmm6, xmm5
	PXOR xmm11, xmm11
	CMPEQPD xmm11, xmm2
	PXOR xmm12, xmm12
	CMPEQPD xmm12, xmm0
	MOVDQA xmm13, xmm7
	PSRLQ xmm13, 52
	PSUBQ xmm13, xmm10
	MOVDQA xmm14, xmm8
	PSRLQ xmm14, 52
	PSUBQ xmm14, xmm10
	MOVDQA xmm15, xmm9
	PSRLQ xmm15, 52
	PSUBQ xmm15, xmm10
	MOVAPS xmm10,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c3]
	PAND xmm13, xmm6
	POR xmm13, xmm5
	PAND xmm14, xmm11
	POR xmm14, xmm2
	PAND xmm15, xmm12
	POR xmm15, xmm0
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c4]
	PAND xmm7, xmm6
	PANDN xmm6, xmm4
	POR xmm6, xmm7
	PAND xmm8, xmm11
	PANDN xmm11, xmm3
	POR xmm11, xmm8
	PAND xmm9, xmm12
	PANDN xmm12, xmm1
	POR xmm12, xmm9
	MOVAPS xmm4,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c34]
	PAND xmm6, xmm10
	POR xmm6, xmm5
	PAND xmm11, xmm10
	POR xmm11, xmm5
	PAND xmm12, xmm10
	POR xmm12, xmm5
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c6]
	MOVAPS xmm2, xmm4
	MOVAPS xmm1, xmm4
	CMPLTPD xmm4, xmm6
	PSUBQ xmm13, xmm4
	PAND xmm4, xmm3
	PSUBD xmm6, xmm4
	CMPLTPD xmm2, xmm11
	PSUBQ xmm14, xmm2
	PAND xmm2, xmm3
	PSUBD xmm11, xmm2
	CMPLTPD xmm1, xmm12
	PSUBQ xmm15, xmm1
	PAND xmm1, xmm3
	PSUBD xmm12, xmm1
	MOVAPS xmm4,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c35]
	SUBPD xmm6, xmm5
	SUBPD xmm11, xmm5
	SUBPD xmm12, xmm5
	MOVAPS xmm5, xmm4
	MOVAPS xmm3, xmm4
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c36]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c37]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c38]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c39]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c40]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c41]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c42]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c43]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c44]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c45]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c46]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c47]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c48]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c49]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c50]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c51]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c52]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c53]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm2
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm2
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm2
	MULPD xmm4, xmm6
	MULPD xmm5, xmm11
	MULPD xmm3, xmm12
	MOVDQA xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c27]
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c28]
	MULPD xmm4, xmm6
	ADDPD xmm4, xmm6
	MULPD xmm5, xmm11
	ADDPD xmm5, xmm11
	MULPD xmm3, xmm12
	ADDPD xmm3, xmm12
	MOVAPD xmm0,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c54]
	PADDQ xmm13, xmm2
	SUBPD xmm13, xmm1
	PADDQ xmm14, xmm2
	SUBPD xmm14, xmm1
	PADDQ xmm15, xmm2
	SUBPD xmm15, xmm1
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c55]
	MOVAPS xmm1, xmm13
	MULPD xmm1, xmm0
	ADDPD xmm1, xmm4
	MOVAPS xmm4, xmm14
	MULPD xmm4, xmm0
	ADDPD xmm4, xmm5
	MOVAPS xmm5, xmm15
	MULPD xmm5, xmm0
	ADDPD xmm5, xmm3
	MULPD xmm13, xmm2
	ADDPD xmm1, xmm13
	MULPD xmm14, xmm2
	ADDPD xmm4, xmm14
	MULPD xmm15, xmm2
	ADDPD xmm5, xmm15
	MOVAPS xmm3, [rcx]
	PXOR xmm2, xmm2
	MOVAPS xmm0,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c56]
	CMPEQPD xmm2, xmm3
	PAND xmm0, xmm2
	PANDN xmm2, xmm1
	POR xmm2, xmm0
	MOVAPS xmm1, [byte rcx + 16]
	PXOR xmm0, xmm0
	MOVAPS xmm6,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c56]
	CMPEQPD xmm0, xmm1
	PAND xmm6, xmm0
	PANDN xmm0, xmm4
	POR xmm0, xmm6
	MOVAPS xmm4, [byte rcx + 32]
	PXOR xmm6, xmm6
	MOVAPS xmm7,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c56]
	CMPEQPD xmm6, xmm4
	PAND xmm7, xmm6
	PANDN xmm6, xmm5
	POR xmm6, xmm7
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c57]
	PSHUFD xmm7, xmm3, 245
	PSRAD xmm7, 31
	MOVAPS xmm8,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c58]
	PAND xmm8, xmm7
	PANDN xmm7, xmm2
	POR xmm7, xmm8
	PSHUFD xmm2, xmm1, 245
	PSRAD xmm2, 31
	MOVAPS xmm8,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c58]
	PAND xmm8, xmm2
	PANDN xmm2, xmm0
	POR xmm2, xmm8
	PSHUFD xmm0, xmm4, 245
	PSRAD xmm0, 31
	MOVAPS xmm8,  [rel _yepMath_Log_V64f_V64f_Bobcat_constants.c58]
	PAND xmm8, xmm0
	PANDN xmm0, xmm6
	POR xmm0, xmm8
	MOVAPS xmm6, xmm3
	CMPNLTPD xmm3, xmm5
	PAND xmm6, xmm3
	PANDN xmm3, xmm7
	POR xmm3, xmm6
	MOVUPS [rdx], xmm3
	MOVAPS xmm3, xmm1
	CMPNLTPD xmm1, xmm5
	PAND xmm3, xmm1
	PANDN xmm1, xmm2
	POR xmm1, xmm3
	MOVUPS [byte rdx + 16], xmm1
	MOVAPS xmm3, xmm4
	CMPNLTPD xmm4, xmm5
	PAND xmm3, xmm4
	PANDN xmm4, xmm0
	POR xmm4, xmm3
	MOVUPS [byte rdx + 32], xmm4
	JMP .process_batch_increment

section .rdata$m rdata align=32
_yepMath_Log_V64f_V64f_K10_constants:
	.c0: DQ 0x4330000000000000, 0x4330000000000000
	.c1: DQ 0x4330000000000000
	.c5: DQ 0x3FF6A09E667F3BCD
	.c2: DQ 0x0000000000000432, 0x0000000000000432
	.c3: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c6: DQ 0x0010000000000000, 0x0010000000000000
	.c7: DQ 0x3FF0000000000000
	.c8: DQ 0xBF9CC4EC078138E3
	.c9: DQ 0x3FB0266CD08DB2F2
	.c10: DQ 0xBFB1654764F478EC
	.c11: DQ 0x3FAEA17E14773369
	.c12: DQ 0xBFAEED2E2BB64B2E
	.c13: DQ 0x3FB0F23916A44515
	.c14: DQ 0xBFB25480A82633AF
	.c15: DQ 0x3FB3B4ED39194B87
	.c16: DQ 0xBFB554D5ACD502AB
	.c17: DQ 0x3FB745980F3FB889
	.c18: DQ 0xBFB9999C5BE751E3
	.c19: DQ 0x3FBC71C90DB06248
	.c20: DQ 0xBFBFFFFFFBD8606D
	.c21: DQ 0x3FC249248DAE4B2A
	.c22: DQ 0xBFC55555554A6A2B
	.c23: DQ 0x3FC9999999A43E4F
	.c24: DQ 0xBFD00000000013C7
	.c25: DQ 0x3FD5555555555103
	.c26: DQ 0xBFDFFFFFFFFFFFF2
	.c27: DQ 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01
	.c28: DQ 0x4338000000000000, 0x4338000000000000
	.c29: DQ 0x3D2EF35793C76730
	.c30: DQ 0x3FE62E42FEFA3800
	.c31: DQ 0xFFF0000000000000
	.c32: DQ 0x7FF8000000000000
	.c33: DQ 0x7FF0000000000000
	ALIGN 16
	.c34: DQ 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD
	.c35: DQ 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3
	.c36: DQ 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2
	.c37: DQ 0xBFB1654764F478EC, 0xBFB1654764F478EC
	.c38: DQ 0x3FAEA17E14773369, 0x3FAEA17E14773369
	.c39: DQ 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E
	.c40: DQ 0x3FB0F23916A44515, 0x3FB0F23916A44515
	.c41: DQ 0xBFB25480A82633AF, 0xBFB25480A82633AF
	.c42: DQ 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87
	.c43: DQ 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB
	.c44: DQ 0x3FB745980F3FB889, 0x3FB745980F3FB889
	.c45: DQ 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3
	.c46: DQ 0x3FBC71C90DB06248, 0x3FBC71C90DB06248
	.c47: DQ 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D
	.c48: DQ 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A
	.c49: DQ 0xBFC55555554A6A2B, 0xBFC55555554A6A2B
	.c50: DQ 0x3FC9999999A43E4F, 0x3FC9999999A43E4F
	.c51: DQ 0xBFD00000000013C7, 0xBFD00000000013C7
	.c52: DQ 0x3FD5555555555103, 0x3FD5555555555103
	.c53: DQ 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2
	.c54: DQ 0x3D2EF35793C76730, 0x3D2EF35793C76730
	.c55: DQ 0x3FE62E42FEFA3800, 0x3FE62E42FEFA3800
	.c56: DQ 0x7FF0000000000000, 0x7FF0000000000000
	.c57: DQ 0xFFF0000000000000, 0xFFF0000000000000
	.c58: DQ 0x7FF8000000000000, 0x7FF8000000000000


section .text$m code align=16
global _yepMath_Log_V64f_V64f_K10
_yepMath_Log_V64f_V64f_K10:
	.ENTRY:
	SUB rsp, 488
	MOVAPS [dword rsp + 320], xmm6
	MOVAPS [dword rsp + 336], xmm7
	MOVAPS [dword rsp + 352], xmm8
	MOVAPS [dword rsp + 368], xmm9
	MOVAPS [dword rsp + 384], xmm10
	MOVAPS [dword rsp + 400], xmm11
	MOVAPS [dword rsp + 416], xmm12
	MOVAPS [dword rsp + 432], xmm13
	MOVAPS [dword rsp + 448], xmm14
	MOVAPS [dword rsp + 464], xmm15
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 15
	JZ .source_16b_aligned
	.source_16b_misaligned:
	MOVSD xmm4, [rcx]
	MOVAPS xmm5, xmm4
	PSRLQ xmm5, 52
	MOVAPS xmm3, xmm4
	ORPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c0]
	SUBSD xmm3, [rel _yepMath_Log_V64f_V64f_K10_constants.c1]
	PXOR xmm2, xmm2
	CMPEQSD xmm2, xmm5
	MOVDQA xmm1, xmm3
	PSRLQ xmm1, 52
	PSUBQ xmm1,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm1, xmm2
	POR xmm1, xmm5
	PAND xmm3, xmm2
	PANDN xmm2, xmm4
	POR xmm2, xmm3
	PAND xmm2,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm2,  [rel _yepMath_Log_V64f_V64f_K10_constants.c4]
	MOVSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c5]
	CMPLTSD xmm4, xmm2
	PSUBQ xmm1, xmm4
	PAND xmm4,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm2, xmm4
	SUBSD xmm2, [rel _yepMath_Log_V64f_V64f_K10_constants.c7]
	MOVSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c8]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c9]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c10]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c11]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c12]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c13]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c14]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c15]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c16]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c17]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c18]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c19]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c20]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c21]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c22]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c23]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c24]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c25]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c26]
	MULSD xmm4, xmm2
	MULSD xmm4, xmm2
	ADDSD xmm4, xmm2
	PADDQ xmm1,  [rel _yepMath_Log_V64f_V64f_K10_constants.c27]
	SUBSD xmm1,  [rel _yepMath_Log_V64f_V64f_K10_constants.c28]
	MOVAPS xmm5, xmm1
	MULSD xmm5, [rel _yepMath_Log_V64f_V64f_K10_constants.c29]
	ADDSD xmm5, xmm4
	MULSD xmm1, [rel _yepMath_Log_V64f_V64f_K10_constants.c30]
	ADDSD xmm5, xmm1
	MOVSD xmm4, [rcx]
	PXOR xmm3, xmm3
	MOVSD xmm2, [rel _yepMath_Log_V64f_V64f_K10_constants.c31]
	CMPEQSD xmm3, xmm4
	PAND xmm2, xmm3
	PANDN xmm3, xmm5
	POR xmm3, xmm2
	PSHUFD xmm5, xmm4, 245
	PSRAD xmm5, 31
	MOVSD xmm2, [rel _yepMath_Log_V64f_V64f_K10_constants.c32]
	PAND xmm2, xmm5
	PANDN xmm5, xmm3
	POR xmm5, xmm2
	MOVAPS xmm3, xmm4
	CMPNLTSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c33]
	PAND xmm3, xmm4
	PANDN xmm4, xmm5
	POR xmm4, xmm3
	MOVSD [rdx], xmm4
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 15
	JNZ .source_16b_misaligned
	.source_16b_aligned:
	SUB r8, 16
	JB .process_restore
	align 32
	.process_batch_fast:
	MOV rax, 4503599627370496
	MOV r10, 9214364837600034815
	MOVAPS xmm4, [rcx]
	MOVAPS xmm5, xmm4
	PSRLQ xmm5, 52
	MOVAPS xmm3, [byte rcx + 16]
	MOVAPS xmm2, xmm3
	PSRLQ xmm2, 52
	MOVAPS xmm1, [byte rcx + 32]
	MOVAPS xmm0, xmm1
	PSRLQ xmm0, 52
	MOVAPS xmm6, [byte rcx + 48]
	MOVAPS xmm7, xmm6
	PSRLQ xmm7, 52
	MOVDQA xmm8,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	PAND xmm4, xmm8
	MOVAPD xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c4]
	POR xmm4, xmm9
	PAND xmm3, xmm8
	POR xmm3, xmm9
	PAND xmm1, xmm8
	POR xmm1, xmm9
	PAND xmm6, xmm8
	POR xmm6, xmm9
	MOVAPS xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm10, xmm4
	MOV r11, [rcx]
	PSUBQ xmm5, xmm10
	PAND xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm4, xmm10
	MOVAPS   [rsp], xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm5, xmm3
	SUB r11, rax
	PSUBQ xmm2, xmm5
	PAND xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm3, xmm5
	MOVAPS   [rsp + 16], xmm2
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm5, xmm1
	CMP r11, r10
	PSUBQ xmm0, xmm5
	PAND xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm1, xmm5
	MOVAPS   [rsp + 32], xmm0
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm5, xmm6
	JA .process_batch_full
	PSUBQ xmm7, xmm5
	PAND xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm6, xmm5
	MOVAPS   [rsp + 48], xmm7
	MOVAPS xmm5, [byte rcx + 64]
	MOVAPS xmm2, xmm5
	PSRLQ xmm2, 52
	MOVAPS xmm0, [byte rcx + 80]
	MOVAPS xmm7, xmm0
	PSRLQ xmm7, 52
	MOVAPS xmm10, [byte rcx + 96]
	MOVAPS xmm11, xmm10
	PSRLQ xmm11, 52
	MOVAPS xmm12, [byte rcx + 112]
	MOVAPS xmm13, xmm12
	PSRLQ xmm13, 52
	PAND xmm5, xmm8
	POR xmm5, xmm9
	PAND xmm0, xmm8
	POR xmm0, xmm9
	PAND xmm10, xmm8
	POR xmm10, xmm9
	PAND xmm12, xmm8
	POR xmm12, xmm9
	MOVAPS xmm8,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm8, xmm5
	MOV r11, [byte rcx + 8]
	PSUBQ xmm2, xmm8
	PAND xmm8,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm5, xmm8
	MOVAPS   [rsp + 64], xmm2
	MOVAPS xmm2,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm2, xmm0
	SUB r11, rax
	PSUBQ xmm7, xmm2
	PAND xmm2,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm0, xmm2
	MOVAPS   [rsp + 80], xmm7
	MOVAPS xmm2,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm2, xmm10
	CMP r11, r10
	PSUBQ xmm11, xmm2
	PAND xmm2,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm10, xmm2
	MOVAPS   [rsp + 96], xmm11
	MOVAPS xmm2,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm2, xmm12
	JA .process_batch_full
	PSUBQ xmm13, xmm2
	PAND xmm2,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm12, xmm2
	MOVAPS   [rsp + 112], xmm13
	SUBPD xmm4, xmm9
	MOV r11, [byte rcx + 16]
	MOVAPS xmm2,  [rel _yepMath_Log_V64f_V64f_K10_constants.c35]
	SUBPD xmm3, xmm9
	SUB r11, rax
	MOVAPS xmm7, xmm2
	SUBPD xmm1, xmm9
	CMP r11, r10
	MOVAPS xmm8, xmm2
	SUBPD xmm6, xmm9
	JA .process_batch_full
	MOVAPS xmm11, xmm2
	SUBPD xmm5, xmm9
	MOV r11, [byte rcx + 24]
	MOVAPS xmm13,  [rel _yepMath_Log_V64f_V64f_K10_constants.c35]
	SUBPD xmm0, xmm9
	SUB r11, rax
	MOVAPS xmm14, xmm13
	SUBPD xmm10, xmm9
	CMP r11, r10
	MOVAPS   [rsp + 128], xmm10
	MOVAPS xmm10, xmm13
	SUBPD xmm12, xmm9
	JA .process_batch_full
	MOVAPS   [rsp + 144], xmm12
	MOVAPS xmm9, xmm13
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c36]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MOV r11, [byte rcx + 32]
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	SUB r11, rax
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	CMP r11, r10
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	JA .process_batch_full
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MOV r11, [byte rcx + 40]
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	SUB r11, rax
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	CMP r11, r10
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	JA .process_batch_full
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c37]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c38]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c39]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c40]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c41]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c42]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c43]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c44]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c45]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c46]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c47]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c48]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c49]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c50]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c51]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c52]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MOVAPS xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c53]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm12
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm12
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm12
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm12
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm12
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm12
	MULPD xmm10,   [rsp + 128]
	ADDPD xmm10, xmm12
	MULPD xmm9,   [rsp + 144]
	ADDPD xmm9, xmm12
	MULPD xmm2, xmm4
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm4
	MULPD xmm7, xmm3
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm3
	MULPD xmm8, xmm1
	MULPD xmm8, xmm1
	ADDPD xmm8, xmm1
	MULPD xmm11, xmm6
	MULPD xmm11, xmm6
	ADDPD xmm11, xmm6
	MULPD xmm13, xmm5
	MULPD xmm13, xmm5
	ADDPD xmm13, xmm5
	MULPD xmm14, xmm0
	MULPD xmm14, xmm0
	ADDPD xmm14, xmm0
	MOVAPS xmm4,   [rsp + 128]
	MULPD xmm10, xmm4
	MULPD xmm10, xmm4
	ADDPD xmm10, xmm4
	MOVAPS xmm4,   [rsp + 144]
	MULPD xmm9, xmm4
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm4
	MOVDQA xmm4,  [rel _yepMath_Log_V64f_V64f_K10_constants.c27]
	MOVAPD xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c28]
	MOVAPS xmm3,   [rsp]
	PADDQ xmm3, xmm4
	SUBPD xmm3, xmm5
	MOVAPS xmm1,   [rsp + 16]
	PADDQ xmm1, xmm4
	SUBPD xmm1, xmm5
	MOVAPS xmm0,   [rsp + 32]
	PADDQ xmm0, xmm4
	SUBPD xmm0, xmm5
	MOVAPS xmm6,   [rsp + 48]
	PADDQ xmm6, xmm4
	SUBPD xmm6, xmm5
	MOVAPD xmm12,  [rel _yepMath_Log_V64f_V64f_K10_constants.c54]
	MOVAPS xmm15, xmm3
	MULPD xmm15, xmm12
	ADDPD xmm15, xmm2
	MOVAPS xmm2, xmm1
	MULPD xmm2, xmm12
	ADDPD xmm2, xmm7
	MOVAPS xmm7, xmm0
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm8
	MOVAPS xmm8, xmm6
	MULPD xmm8, xmm12
	ADDPD xmm8, xmm11
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c55]
	MULPD xmm3, xmm11
	ADDPD xmm15, xmm3
	MOVUPS [rdx], xmm15
	MULPD xmm1, xmm11
	ADDPD xmm2, xmm1
	MOVUPS [byte rdx + 16], xmm2
	MULPD xmm0, xmm11
	ADDPD xmm7, xmm0
	MOVUPS [byte rdx + 32], xmm7
	MULPD xmm6, xmm11
	ADDPD xmm8, xmm6
	MOVUPS [byte rdx + 48], xmm8
	MOVAPS xmm3,   [rsp + 64]
	PADDQ xmm3, xmm4
	SUBPD xmm3, xmm5
	MOVAPS xmm2,   [rsp + 80]
	PADDQ xmm2, xmm4
	SUBPD xmm2, xmm5
	MOVAPS xmm1,   [rsp + 96]
	PADDQ xmm1, xmm4
	SUBPD xmm1, xmm5
	MOVAPS xmm0,   [rsp + 112]
	PADDQ xmm0, xmm4
	SUBPD xmm0, xmm5
	MOVAPS xmm4, xmm3
	MULPD xmm4, xmm12
	ADDPD xmm4, xmm13
	MOVAPS xmm5, xmm2
	MULPD xmm5, xmm12
	ADDPD xmm5, xmm14
	MOVAPS xmm6, xmm1
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm10
	MOVAPS xmm7, xmm0
	MULPD xmm7, xmm12
	ADDPD xmm7, xmm9
	MULPD xmm3, xmm11
	ADDPD xmm4, xmm3
	MOVUPS [byte rdx + 64], xmm4
	MULPD xmm2, xmm11
	ADDPD xmm5, xmm2
	MOVUPS [byte rdx + 80], xmm5
	MULPD xmm1, xmm11
	ADDPD xmm6, xmm1
	MOVUPS [byte rdx + 96], xmm6
	MULPD xmm0, xmm11
	ADDPD xmm7, xmm0
	MOVUPS [byte rdx + 112], xmm7
	.process_batch_increment:
	ADD rcx, 128
	ADD rdx, 128
	SUB r8, 16
	JAE .process_batch_fast
	.process_restore:
	ADD r8, 16
	JZ .return_ok
	.process_single:
	MOVSD xmm4, [rcx]
	MOVAPS xmm5, xmm4
	PSRLQ xmm5, 52
	MOVAPS xmm3, xmm4
	ORPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c0]
	SUBSD xmm3, [rel _yepMath_Log_V64f_V64f_K10_constants.c1]
	PXOR xmm2, xmm2
	CMPEQSD xmm2, xmm5
	MOVDQA xmm1, xmm3
	PSRLQ xmm1, 52
	PSUBQ xmm1,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm1, xmm2
	POR xmm1, xmm5
	PAND xmm3, xmm2
	PANDN xmm2, xmm4
	POR xmm2, xmm3
	PAND xmm2,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm2,  [rel _yepMath_Log_V64f_V64f_K10_constants.c4]
	MOVSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c5]
	CMPLTSD xmm4, xmm2
	PSUBQ xmm1, xmm4
	PAND xmm4,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm2, xmm4
	SUBSD xmm2, [rel _yepMath_Log_V64f_V64f_K10_constants.c7]
	MOVSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c8]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c9]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c10]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c11]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c12]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c13]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c14]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c15]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c16]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c17]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c18]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c19]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c20]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c21]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c22]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c23]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c24]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c25]
	MULSD xmm4, xmm2
	ADDSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c26]
	MULSD xmm4, xmm2
	MULSD xmm4, xmm2
	ADDSD xmm4, xmm2
	PADDQ xmm1,  [rel _yepMath_Log_V64f_V64f_K10_constants.c27]
	SUBSD xmm1,  [rel _yepMath_Log_V64f_V64f_K10_constants.c28]
	MOVAPS xmm5, xmm1
	MULSD xmm5, [rel _yepMath_Log_V64f_V64f_K10_constants.c29]
	ADDSD xmm5, xmm4
	MULSD xmm1, [rel _yepMath_Log_V64f_V64f_K10_constants.c30]
	ADDSD xmm5, xmm1
	MOVSD xmm4, [rcx]
	PXOR xmm3, xmm3
	MOVSD xmm2, [rel _yepMath_Log_V64f_V64f_K10_constants.c31]
	CMPEQSD xmm3, xmm4
	PAND xmm2, xmm3
	PANDN xmm3, xmm5
	POR xmm3, xmm2
	PSHUFD xmm5, xmm4, 245
	PSRAD xmm5, 31
	MOVSD xmm2, [rel _yepMath_Log_V64f_V64f_K10_constants.c32]
	PAND xmm2, xmm5
	PANDN xmm5, xmm3
	POR xmm5, xmm2
	MOVAPS xmm3, xmm4
	CMPNLTSD xmm4, [rel _yepMath_Log_V64f_V64f_K10_constants.c33]
	PAND xmm3, xmm4
	PANDN xmm4, xmm5
	POR xmm4, xmm3
	MOVSD [rdx], xmm4
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	MOVAPS xmm6, [dword rsp + 320]
	MOVAPS xmm7, [dword rsp + 336]
	MOVAPS xmm8, [dword rsp + 352]
	MOVAPS xmm9, [dword rsp + 368]
	MOVAPS xmm10, [dword rsp + 384]
	MOVAPS xmm11, [dword rsp + 400]
	MOVAPS xmm12, [dword rsp + 416]
	MOVAPS xmm13, [dword rsp + 432]
	MOVAPS xmm14, [dword rsp + 448]
	MOVAPS xmm15, [dword rsp + 464]
	ADD rsp, 488
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	MOVAPS xmm4,  [rel _yepMath_Log_V64f_V64f_K10_constants.c0]
	MOVAPS xmm5, [rcx]
	MOVAPS xmm3, xmm5
	PSRLQ xmm3, 52
	MOVAPS xmm2, [byte rcx + 16]
	MOVAPS xmm1, xmm2
	PSRLQ xmm1, 52
	MOVAPS xmm0, [byte rcx + 32]
	MOVAPS xmm6, xmm0
	PSRLQ xmm6, 52
	MOVAPS xmm7, [byte rcx + 48]
	MOVAPS xmm8, xmm7
	PSRLQ xmm8, 52
	MOVAPS xmm9, xmm5
	ORPS xmm9, xmm4
	SUBPD xmm9, xmm4
	PXOR xmm10, xmm10
	CMPEQPD xmm10, xmm3
	MOVAPS xmm11, xmm9
	PSRLQ xmm11, 52
	PSUBQ xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm11, xmm10
	POR xmm3, xmm11
	ANDPS xmm9, xmm10
	ANDNPS xmm10, xmm5
	ORPS xmm10, xmm9
	MOVAPS xmm5, xmm2
	ORPS xmm5, xmm4
	SUBPD xmm5, xmm4
	PXOR xmm9, xmm9
	CMPEQPD xmm9, xmm1
	MOVAPS xmm11, xmm5
	PSRLQ xmm11, 52
	PSUBQ xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm11, xmm9
	POR xmm1, xmm11
	ANDPS xmm5, xmm9
	ANDNPS xmm9, xmm2
	ORPS xmm9, xmm5
	MOVAPS xmm5, xmm0
	ORPS xmm5, xmm4
	SUBPD xmm5, xmm4
	PXOR xmm2, xmm2
	CMPEQPD xmm2, xmm6
	MOVAPS xmm11, xmm5
	PSRLQ xmm11, 52
	PSUBQ xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm11, xmm2
	POR xmm6, xmm11
	ANDPS xmm5, xmm2
	ANDNPS xmm2, xmm0
	ORPS xmm2, xmm5
	MOVAPS xmm5, xmm7
	ORPS xmm5, xmm4
	SUBPD xmm5, xmm4
	PXOR xmm0, xmm0
	CMPEQPD xmm0, xmm8
	MOVAPS xmm11, xmm5
	PSRLQ xmm11, 52
	PSUBQ xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm11, xmm0
	POR xmm8, xmm11
	ANDPS xmm5, xmm0
	ANDNPS xmm0, xmm7
	ORPS xmm0, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c4]
	PAND xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm10, xmm5
	PAND xmm9,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm9, xmm5
	PAND xmm2,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm2, xmm5
	PAND xmm0,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm0, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm5, xmm10
	PSUBQ xmm3, xmm5
	PAND xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm10, xmm5
	MOVAPS   [rsp + 160], xmm3
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm5, xmm9
	PSUBQ xmm1, xmm5
	PAND xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm9, xmm5
	MOVAPS   [rsp + 176], xmm1
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm5, xmm2
	PSUBQ xmm6, xmm5
	PAND xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm2, xmm5
	MOVAPS   [rsp + 192], xmm6
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm5, xmm0
	PSUBQ xmm8, xmm5
	PAND xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm0, xmm5
	MOVAPS   [rsp + 208], xmm8
	MOVAPS xmm5, [byte rcx + 64]
	MOVAPS xmm3, xmm5
	PSRLQ xmm3, 52
	MOVAPS xmm1, [byte rcx + 80]
	MOVAPS xmm6, xmm1
	PSRLQ xmm6, 52
	MOVAPS xmm7, [byte rcx + 96]
	MOVAPS xmm8, xmm7
	PSRLQ xmm8, 52
	MOVAPS xmm11, [byte rcx + 112]
	MOVAPS xmm12, xmm11
	PSRLQ xmm12, 52
	MOVAPS xmm13, xmm5
	ORPS xmm13, xmm4
	SUBPD xmm13, xmm4
	PXOR xmm14, xmm14
	CMPEQPD xmm14, xmm3
	MOVAPS xmm15, xmm13
	PSRLQ xmm15, 52
	PSUBQ xmm15,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm15, xmm14
	POR xmm3, xmm15
	ANDPS xmm13, xmm14
	ANDNPS xmm14, xmm5
	ORPS xmm14, xmm13
	MOVAPS xmm5, xmm1
	ORPS xmm5, xmm4
	SUBPD xmm5, xmm4
	PXOR xmm13, xmm13
	CMPEQPD xmm13, xmm6
	MOVAPS xmm15, xmm5
	PSRLQ xmm15, 52
	PSUBQ xmm15,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm15, xmm13
	POR xmm6, xmm15
	ANDPS xmm5, xmm13
	ANDNPS xmm13, xmm1
	ORPS xmm13, xmm5
	MOVAPS xmm5, xmm7
	ORPS xmm5, xmm4
	SUBPD xmm5, xmm4
	PXOR xmm1, xmm1
	CMPEQPD xmm1, xmm8
	MOVAPS xmm15, xmm5
	PSRLQ xmm15, 52
	PSUBQ xmm15,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm15, xmm1
	POR xmm8, xmm15
	ANDPS xmm5, xmm1
	ANDNPS xmm1, xmm7
	ORPS xmm1, xmm5
	MOVAPS xmm5, xmm11
	ORPS xmm5, xmm4
	SUBPD xmm5, xmm4
	PXOR xmm4, xmm4
	CMPEQPD xmm4, xmm12
	MOVAPS xmm7, xmm5
	PSRLQ xmm7, 52
	PSUBQ xmm7,  [rel _yepMath_Log_V64f_V64f_K10_constants.c2]
	PAND xmm7, xmm4
	POR xmm12, xmm7
	ANDPS xmm5, xmm4
	ANDNPS xmm4, xmm11
	ORPS xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c4]
	PAND xmm14,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm14, xmm5
	PAND xmm13,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm13, xmm5
	PAND xmm1,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm1, xmm5
	PAND xmm4,  [rel _yepMath_Log_V64f_V64f_K10_constants.c3]
	POR xmm4, xmm5
	MOVAPS xmm7,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm7, xmm14
	PSUBQ xmm3, xmm7
	PAND xmm7,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm14, xmm7
	MOVAPS   [rsp + 224], xmm3
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm3, xmm13
	PSUBQ xmm6, xmm3
	PAND xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm13, xmm3
	MOVAPS   [rsp + 240], xmm6
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm3, xmm1
	PSUBQ xmm8, xmm3
	PAND xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm1, xmm3
	MOVAPS   [rsp + 256], xmm8
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c34]
	CMPLTPD xmm3, xmm4
	PSUBQ xmm12, xmm3
	PAND xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c6]
	PSUBD xmm4, xmm3
	MOVAPS   [rsp + 272], xmm12
	SUBPD xmm10, xmm5
	MOVAPS xmm3,  [rel _yepMath_Log_V64f_V64f_K10_constants.c35]
	SUBPD xmm9, xmm5
	MOVAPS xmm6, xmm3
	SUBPD xmm2, xmm5
	MOVAPS xmm7, xmm3
	SUBPD xmm0, xmm5
	MOVAPS xmm8, xmm3
	SUBPD xmm14, xmm5
	MOVAPS xmm11,  [rel _yepMath_Log_V64f_V64f_K10_constants.c35]
	SUBPD xmm13, xmm5
	MOVAPS xmm12, xmm11
	SUBPD xmm1, xmm5
	MOVAPS   [rsp + 288], xmm1
	MOVAPS xmm1, xmm11
	SUBPD xmm4, xmm5
	MOVAPS   [rsp + 304], xmm4
	MOVAPS xmm4, xmm11
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c36]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c37]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c38]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c39]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c40]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c41]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c42]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c43]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c44]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c45]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c46]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c47]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c48]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c49]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c50]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c51]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c52]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MOVAPS xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c53]
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm5
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm5
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm5
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm5
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm5
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm5
	MULPD xmm1,   [rsp + 288]
	ADDPD xmm1, xmm5
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm5
	MULPD xmm3, xmm10
	MULPD xmm3, xmm10
	ADDPD xmm3, xmm10
	MULPD xmm6, xmm9
	MULPD xmm6, xmm9
	ADDPD xmm6, xmm9
	MULPD xmm7, xmm2
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm2
	MULPD xmm8, xmm0
	MULPD xmm8, xmm0
	ADDPD xmm8, xmm0
	MULPD xmm11, xmm14
	MULPD xmm11, xmm14
	ADDPD xmm11, xmm14
	MULPD xmm12, xmm13
	MULPD xmm12, xmm13
	ADDPD xmm12, xmm13
	MOVAPS xmm5,   [rsp + 288]
	MULPD xmm1, xmm5
	MULPD xmm1, xmm5
	ADDPD xmm1, xmm5
	MOVAPS xmm5,   [rsp + 304]
	MULPD xmm4, xmm5
	MULPD xmm4, xmm5
	ADDPD xmm4, xmm5
	MOVDQA xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c27]
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_K10_constants.c28]
	MOVAPS xmm0,   [rsp + 160]
	PADDQ xmm0, xmm5
	SUBPD xmm0, xmm2
	MOVAPS xmm9,   [rsp + 176]
	PADDQ xmm9, xmm5
	SUBPD xmm9, xmm2
	MOVAPS xmm10,   [rsp + 192]
	PADDQ xmm10, xmm5
	SUBPD xmm10, xmm2
	MOVAPS xmm13,   [rsp + 208]
	PADDQ xmm13, xmm5
	SUBPD xmm13, xmm2
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_K10_constants.c54]
	MOVAPS xmm15, xmm0
	MULPD xmm15, xmm14
	ADDPD xmm15, xmm3
	MOVAPS xmm3, xmm9
	MULPD xmm3, xmm14
	ADDPD xmm3, xmm6
	MOVAPS xmm6, xmm10
	MULPD xmm6, xmm14
	ADDPD xmm6, xmm7
	MOVAPS xmm7, xmm13
	MULPD xmm7, xmm14
	ADDPD xmm7, xmm8
	MOVAPD xmm8,  [rel _yepMath_Log_V64f_V64f_K10_constants.c55]
	MULPD xmm0, xmm8
	ADDPD xmm15, xmm0
	MULPD xmm9, xmm8
	ADDPD xmm3, xmm9
	MULPD xmm10, xmm8
	ADDPD xmm6, xmm10
	MULPD xmm13, xmm8
	ADDPD xmm7, xmm13
	MOVAPS xmm0,   [rsp + 224]
	PADDQ xmm0, xmm5
	SUBPD xmm0, xmm2
	MOVAPS xmm8,   [rsp + 240]
	PADDQ xmm8, xmm5
	SUBPD xmm8, xmm2
	MOVAPS xmm9,   [rsp + 256]
	PADDQ xmm9, xmm5
	SUBPD xmm9, xmm2
	MOVAPS xmm10,   [rsp + 272]
	PADDQ xmm10, xmm5
	SUBPD xmm10, xmm2
	MOVAPD xmm5,  [rel _yepMath_Log_V64f_V64f_K10_constants.c54]
	MOVAPS xmm2, xmm0
	MULPD xmm2, xmm5
	ADDPD xmm2, xmm11
	MOVAPS xmm11, xmm8
	MULPD xmm11, xmm5
	ADDPD xmm11, xmm12
	MOVAPS xmm12, xmm9
	MULPD xmm12, xmm5
	ADDPD xmm12, xmm1
	MOVAPS xmm1, xmm10
	MULPD xmm1, xmm5
	ADDPD xmm1, xmm4
	MOVAPD xmm4,  [rel _yepMath_Log_V64f_V64f_K10_constants.c55]
	MULPD xmm0, xmm4
	ADDPD xmm2, xmm0
	MULPD xmm8, xmm4
	ADDPD xmm11, xmm8
	MULPD xmm9, xmm4
	ADDPD xmm12, xmm9
	MULPD xmm10, xmm4
	ADDPD xmm1, xmm10
	MOVAPS xmm4,  [rel _yepMath_Log_V64f_V64f_K10_constants.c56]
	MOVAPS xmm5, [rcx]
	PXOR xmm0, xmm0
	MOVAPS xmm8,  [rel _yepMath_Log_V64f_V64f_K10_constants.c57]
	CMPEQPD xmm0, xmm5
	ANDPS xmm8, xmm0
	ANDNPS xmm0, xmm15
	ORPS xmm0, xmm8
	MOVAPS xmm8, [byte rcx + 16]
	PXOR xmm9, xmm9
	MOVAPS xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c57]
	CMPEQPD xmm9, xmm8
	ANDPS xmm10, xmm9
	ANDNPS xmm9, xmm3
	ORPS xmm9, xmm10
	MOVAPS xmm3, [byte rcx + 32]
	PXOR xmm10, xmm10
	MOVAPS xmm13,  [rel _yepMath_Log_V64f_V64f_K10_constants.c57]
	CMPEQPD xmm10, xmm3
	ANDPS xmm13, xmm10
	ANDNPS xmm10, xmm6
	ORPS xmm10, xmm13
	MOVAPS xmm6, [byte rcx + 48]
	PXOR xmm13, xmm13
	MOVAPS xmm14,  [rel _yepMath_Log_V64f_V64f_K10_constants.c57]
	CMPEQPD xmm13, xmm6
	ANDPS xmm14, xmm13
	ANDNPS xmm13, xmm7
	ORPS xmm13, xmm14
	PSHUFD xmm7, xmm5, 245
	PSRAD xmm7, 31
	MOVAPS xmm14,  [rel _yepMath_Log_V64f_V64f_K10_constants.c58]
	ANDPS xmm14, xmm7
	ANDNPS xmm7, xmm0
	ORPS xmm7, xmm14
	PSHUFD xmm0, xmm8, 245
	PSRAD xmm0, 31
	MOVAPS xmm14,  [rel _yepMath_Log_V64f_V64f_K10_constants.c58]
	ANDPS xmm14, xmm0
	ANDNPS xmm0, xmm9
	ORPS xmm0, xmm14
	PSHUFD xmm9, xmm3, 245
	PSRAD xmm9, 31
	MOVAPS xmm14,  [rel _yepMath_Log_V64f_V64f_K10_constants.c58]
	ANDPS xmm14, xmm9
	ANDNPS xmm9, xmm10
	ORPS xmm9, xmm14
	PSHUFD xmm10, xmm6, 245
	PSRAD xmm10, 31
	MOVAPS xmm14,  [rel _yepMath_Log_V64f_V64f_K10_constants.c58]
	ANDPS xmm14, xmm10
	ANDNPS xmm10, xmm13
	ORPS xmm10, xmm14
	MOVAPS xmm13, xmm5
	CMPNLTPD xmm5, xmm4
	ANDPS xmm13, xmm5
	ANDNPS xmm5, xmm7
	ORPS xmm5, xmm13
	MOVUPS [rdx], xmm5
	MOVAPS xmm5, xmm8
	CMPNLTPD xmm8, xmm4
	ANDPS xmm5, xmm8
	ANDNPS xmm8, xmm0
	ORPS xmm8, xmm5
	MOVUPS [byte rdx + 16], xmm8
	MOVAPS xmm5, xmm3
	CMPNLTPD xmm3, xmm4
	ANDPS xmm5, xmm3
	ANDNPS xmm3, xmm9
	ORPS xmm3, xmm5
	MOVUPS [byte rdx + 32], xmm3
	MOVAPS xmm5, xmm6
	CMPNLTPD xmm6, xmm4
	ANDPS xmm5, xmm6
	ANDNPS xmm6, xmm10
	ORPS xmm6, xmm5
	MOVUPS [byte rdx + 48], xmm6
	MOVAPS xmm5, [byte rcx + 64]
	PXOR xmm3, xmm3
	MOVAPS xmm0,  [rel _yepMath_Log_V64f_V64f_K10_constants.c57]
	CMPEQPD xmm3, xmm5
	ANDPS xmm0, xmm3
	ANDNPS xmm3, xmm2
	ORPS xmm3, xmm0
	MOVAPS xmm2, [byte rcx + 80]
	PXOR xmm0, xmm0
	MOVAPS xmm6,  [rel _yepMath_Log_V64f_V64f_K10_constants.c57]
	CMPEQPD xmm0, xmm2
	ANDPS xmm6, xmm0
	ANDNPS xmm0, xmm11
	ORPS xmm0, xmm6
	MOVAPS xmm6, [byte rcx + 96]
	PXOR xmm7, xmm7
	MOVAPS xmm8,  [rel _yepMath_Log_V64f_V64f_K10_constants.c57]
	CMPEQPD xmm7, xmm6
	ANDPS xmm8, xmm7
	ANDNPS xmm7, xmm12
	ORPS xmm7, xmm8
	MOVAPS xmm8, [byte rcx + 112]
	PXOR xmm9, xmm9
	MOVAPS xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c57]
	CMPEQPD xmm9, xmm8
	ANDPS xmm10, xmm9
	ANDNPS xmm9, xmm1
	ORPS xmm9, xmm10
	PSHUFD xmm1, xmm5, 245
	PSRAD xmm1, 31
	MOVAPS xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c58]
	ANDPS xmm10, xmm1
	ANDNPS xmm1, xmm3
	ORPS xmm1, xmm10
	PSHUFD xmm3, xmm2, 245
	PSRAD xmm3, 31
	MOVAPS xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c58]
	ANDPS xmm10, xmm3
	ANDNPS xmm3, xmm0
	ORPS xmm3, xmm10
	PSHUFD xmm0, xmm6, 245
	PSRAD xmm0, 31
	MOVAPS xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c58]
	ANDPS xmm10, xmm0
	ANDNPS xmm0, xmm7
	ORPS xmm0, xmm10
	PSHUFD xmm7, xmm8, 245
	PSRAD xmm7, 31
	MOVAPS xmm10,  [rel _yepMath_Log_V64f_V64f_K10_constants.c58]
	ANDPS xmm10, xmm7
	ANDNPS xmm7, xmm9
	ORPS xmm7, xmm10
	MOVAPS xmm9, xmm5
	CMPNLTPD xmm5, xmm4
	ANDPS xmm9, xmm5
	ANDNPS xmm5, xmm1
	ORPS xmm5, xmm9
	MOVUPS [byte rdx + 64], xmm5
	MOVAPS xmm5, xmm2
	CMPNLTPD xmm2, xmm4
	ANDPS xmm5, xmm2
	ANDNPS xmm2, xmm3
	ORPS xmm2, xmm5
	MOVUPS [byte rdx + 80], xmm2
	MOVAPS xmm5, xmm6
	CMPNLTPD xmm6, xmm4
	ANDPS xmm5, xmm6
	ANDNPS xmm6, xmm0
	ORPS xmm6, xmm5
	MOVUPS [byte rdx + 96], xmm6
	MOVAPS xmm5, xmm8
	CMPNLTPD xmm8, xmm4
	ANDPS xmm5, xmm8
	ANDNPS xmm8, xmm7
	ORPS xmm8, xmm5
	MOVUPS [byte rdx + 112], xmm8
	JMP .process_batch_increment

section .rdata$e rdata align=32
_yepMath_Log_V64f_V64f_Nehalem_constants:
	.c0: DQ 0x4330000000000000, 0x4330000000000000
	.c1: DQ 0x4330000000000000
	.c5: DQ 0x3FF6A09E667F3BCD
	.c2: DQ 0x0000000000000432, 0x0000000000000432
	.c3: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c6: DQ 0x0010000000000000, 0x0010000000000000
	.c7: DQ 0x3FF0000000000000
	.c8: DQ 0xBF9CC4EC078138E3
	.c9: DQ 0x3FB0266CD08DB2F2
	.c10: DQ 0xBFB1654764F478EC
	.c11: DQ 0x3FAEA17E14773369
	.c12: DQ 0xBFAEED2E2BB64B2E
	.c13: DQ 0x3FB0F23916A44515
	.c14: DQ 0xBFB25480A82633AF
	.c15: DQ 0x3FB3B4ED39194B87
	.c16: DQ 0xBFB554D5ACD502AB
	.c17: DQ 0x3FB745980F3FB889
	.c18: DQ 0xBFB9999C5BE751E3
	.c19: DQ 0x3FBC71C90DB06248
	.c20: DQ 0xBFBFFFFFFBD8606D
	.c21: DQ 0x3FC249248DAE4B2A
	.c22: DQ 0xBFC55555554A6A2B
	.c23: DQ 0x3FC9999999A43E4F
	.c24: DQ 0xBFD00000000013C7
	.c25: DQ 0x3FD5555555555103
	.c26: DQ 0xBFDFFFFFFFFFFFF2
	.c27: DQ 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01
	.c28: DQ 0x4338000000000000, 0x4338000000000000
	.c29: DQ 0x3D2EF35793C76730
	.c30: DQ 0x3FE62E42FEFA3800
	.c31: DQ 0x7FF8000000000000, 0x7FF8000000000000
	.c32: DQ 0xFFF0000000000000
	.c33: DQ 0x7FF0000000000000
	.c34: DD 0x000003FF, 0x000003FF, 0x000003FF, 0x000003FF
	.c35: DQ 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD
	.c36: DQ 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3
	.c37: DQ 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2
	.c38: DQ 0xBFB1654764F478EC, 0xBFB1654764F478EC
	.c39: DQ 0x3FAEA17E14773369, 0x3FAEA17E14773369
	.c40: DQ 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E
	.c41: DQ 0x3FB0F23916A44515, 0x3FB0F23916A44515
	.c42: DQ 0xBFB25480A82633AF, 0xBFB25480A82633AF
	.c43: DQ 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87
	.c44: DQ 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB
	.c45: DQ 0x3FB745980F3FB889, 0x3FB745980F3FB889
	.c46: DQ 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3
	.c47: DQ 0x3FBC71C90DB06248, 0x3FBC71C90DB06248
	.c48: DQ 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D
	.c49: DQ 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A
	.c50: DQ 0xBFC55555554A6A2B, 0xBFC55555554A6A2B
	.c51: DQ 0x3FC9999999A43E4F, 0x3FC9999999A43E4F
	.c52: DQ 0xBFD00000000013C7, 0xBFD00000000013C7
	.c53: DQ 0x3FD5555555555103, 0x3FD5555555555103
	.c54: DQ 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2
	.c55: DQ 0x3D2EF35793C76730, 0x3D2EF35793C76730
	.c56: DQ 0x3FE62E42FEFA3800, 0x3FE62E42FEFA3800
	.c57: DQ 0x7FF0000000000000, 0x7FF0000000000000
	.c58: DQ 0xFFF0000000000000, 0xFFF0000000000000


section .text$e code align=16
global _yepMath_Log_V64f_V64f_Nehalem
_yepMath_Log_V64f_V64f_Nehalem:
	.ENTRY:
	SUB rsp, 488
	MOVAPS [dword rsp + 320], xmm6
	MOVAPS [dword rsp + 336], xmm7
	MOVAPS [dword rsp + 352], xmm8
	MOVAPS [dword rsp + 368], xmm9
	MOVAPS [dword rsp + 384], xmm10
	MOVAPS [dword rsp + 400], xmm11
	MOVAPS [dword rsp + 416], xmm12
	MOVAPS [dword rsp + 432], xmm13
	MOVAPS [dword rsp + 448], xmm14
	MOVAPS [dword rsp + 464], xmm15
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 15
	JZ .source_16b_aligned
	.source_16b_misaligned:
	MOVSD xmm4, [rcx]
	MOVAPS xmm5, xmm4
	PSRLQ xmm5, 52
	MOVAPS xmm3, xmm4
	ORPS xmm3,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	SUBSD xmm3, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c1]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm5
	MOVDQA xmm2, xmm3
	PSRLQ xmm2, 52
	PSUBQ xmm2,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PAND xmm2, xmm0
	POR xmm2, xmm5
	PBLENDVB xmm4, xmm3, xmm0
	PAND xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	MOVSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c5]
	CMPLTSD xmm5, xmm4
	PSUBQ xmm2, xmm5
	PAND xmm5,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm4, xmm5
	SUBSD xmm4, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c7]
	MOVSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c8]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c9]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c10]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c11]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c12]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c13]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c14]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c15]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c16]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c17]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c18]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c19]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c20]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c21]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c22]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c23]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c24]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c25]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c26]
	MULSD xmm5, xmm4
	MULSD xmm5, xmm4
	ADDSD xmm5, xmm4
	PADDQ xmm2,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c27]
	SUBSD xmm2,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c28]
	MOVAPS xmm4, xmm2
	MULSD xmm4, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c29]
	ADDSD xmm4, xmm5
	MULSD xmm2, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c30]
	ADDSD xmm4, xmm2
	MOVSD xmm0, [rcx]
	BLENDVPD xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c31], xmm0
	PXOR xmm5, xmm5
	MOVSD xmm3, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c32]
	PCMPEQQ xmm5, xmm0
	PAND xmm3, xmm5
	PANDN xmm5, xmm4
	POR xmm5, xmm3
	MOVAPS xmm4, xmm0
	CMPNLTSD xmm0, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c33]
	BLENDVPD xmm5, xmm4, xmm0
	MOVSD [rdx], xmm5
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 15
	JNZ .source_16b_misaligned
	.source_16b_aligned:
	SUB r8, 16
	JB .process_restore
	align 32
	.process_batch_fast:
	MOVAPD xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	MOV rax, 4503599627370496
	MOVDQA xmm5,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	MOV r10, 9214364837600034815
	MOVDQA xmm3,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c34]
	MOVAPS xmm2, [rcx]
	MOVAPS xmm1, xmm2
	MOV r11, [rcx]
	PSRLD xmm1, 20
	SUB r11, rax
	PAND xmm2, xmm5
	CMP r11, r10
	JA .process_batch_full
	PSUBD xmm1, xmm3
	POR xmm2, xmm4
	MOVAPS xmm0, [byte rcx + 16]
	MOVAPS xmm6, xmm0
	MOV r11, [byte rcx + 16]
	PSRLD xmm6, 20
	SUB r11, rax
	PAND xmm0, xmm5
	CMP r11, r10
	JA .process_batch_full
	PSUBD xmm6, xmm3
	POR xmm0, xmm4
	MOVAPS xmm7, [byte rcx + 32]
	MOVAPS xmm8, xmm7
	MOV r11, [byte rcx + 32]
	PSRLD xmm8, 20
	SUB r11, rax
	PAND xmm7, xmm5
	CMP r11, r10
	JA .process_batch_full
	PSUBD xmm8, xmm3
	POR xmm7, xmm4
	MOVAPS xmm9, [byte rcx + 48]
	MOVAPS xmm10, xmm9
	MOV r11, [byte rcx + 48]
	PSRLD xmm10, 20
	SUB r11, rax
	PAND xmm9, xmm5
	CMP r11, r10
	JA .process_batch_full
	PSUBD xmm10, xmm3
	POR xmm9, xmm4
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	MOVAPD xmm12,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm12, xmm2
	MOV r11, [byte rcx + 8]
	PSUBD xmm1, xmm12
	PAND xmm12, xmm11
	SUB r11, rax
	PSUBD xmm2, xmm12
	PSHUFD xmm1, xmm1, 221
	CMP r11, r10
	JA .process_batch_full
	MOVAPD   [rsp], xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm1, xmm0
	MOV r11, [byte rcx + 24]
	PSUBD xmm6, xmm1
	PAND xmm1, xmm11
	SUB r11, rax
	PSUBD xmm0, xmm1
	PSHUFD xmm6, xmm6, 221
	CMP r11, r10
	JA .process_batch_full
	MOVAPD   [rsp + 16], xmm6
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm1, xmm7
	MOV r11, [byte rcx + 40]
	PSUBD xmm8, xmm1
	PAND xmm1, xmm11
	SUB r11, rax
	PSUBD xmm7, xmm1
	PSHUFD xmm8, xmm8, 221
	CMP r11, r10
	JA .process_batch_full
	MOVAPD   [rsp + 32], xmm8
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm1, xmm9
	MOV r11, [byte rcx + 56]
	PSUBD xmm10, xmm1
	PAND xmm1, xmm11
	SUB r11, rax
	PSUBD xmm9, xmm1
	PSHUFD xmm10, xmm10, 221
	CMP r11, r10
	JA .process_batch_full
	MOVAPD   [rsp + 48], xmm10
	MOVAPS xmm1, [byte rcx + 64]
	MOVAPS xmm6, xmm1
	MOV r11, [byte rcx + 64]
	PSRLD xmm6, 20
	SUB r11, rax
	PAND xmm1, xmm5
	CMP r11, r10
	JA .process_batch_full
	PSUBD xmm6, xmm3
	POR xmm1, xmm4
	MOVAPS xmm8, [byte rcx + 80]
	MOVAPS xmm10, xmm8
	MOV r11, [byte rcx + 80]
	PSRLD xmm10, 20
	SUB r11, rax
	PAND xmm8, xmm5
	CMP r11, r10
	JA .process_batch_full
	PSUBD xmm10, xmm3
	POR xmm8, xmm4
	MOVAPS xmm12, [byte rcx + 96]
	MOVAPS xmm13, xmm12
	MOV r11, [byte rcx + 96]
	PSRLD xmm13, 20
	SUB r11, rax
	PAND xmm12, xmm5
	CMP r11, r10
	JA .process_batch_full
	PSUBD xmm13, xmm3
	POR xmm12, xmm4
	MOVAPS xmm14, [byte rcx + 112]
	MOVAPS xmm15, xmm14
	MOV r11, [byte rcx + 112]
	PSRLD xmm15, 20
	SUB r11, rax
	PAND xmm14, xmm5
	CMP r11, r10
	JA .process_batch_full
	PSUBD xmm15, xmm3
	POR xmm14, xmm4
	MOVAPD xmm5,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm5, xmm1
	MOV r11, [byte rcx + 72]
	PSUBD xmm6, xmm5
	PAND xmm5, xmm11
	SUB r11, rax
	PSUBD xmm1, xmm5
	PSHUFD xmm6, xmm6, 221
	CMP r11, r10
	JA .process_batch_full
	MOVAPD   [rsp + 64], xmm6
	MOVAPD xmm5,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm5, xmm8
	MOV r11, [byte rcx + 88]
	PSUBD xmm10, xmm5
	PAND xmm5, xmm11
	SUB r11, rax
	PSUBD xmm8, xmm5
	PSHUFD xmm10, xmm10, 221
	CMP r11, r10
	JA .process_batch_full
	MOVAPD   [rsp + 80], xmm10
	MOVAPD xmm5,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm5, xmm12
	MOV r11, [byte rcx + 104]
	PSUBD xmm13, xmm5
	PAND xmm5, xmm11
	SUB r11, rax
	PSUBD xmm12, xmm5
	PSHUFD xmm13, xmm13, 221
	CMP r11, r10
	JA .process_batch_full
	MOVAPD   [rsp + 96], xmm13
	MOVAPD xmm5,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm5, xmm14
	MOV r11, [byte rcx + 120]
	PSUBD xmm15, xmm5
	PAND xmm5, xmm11
	SUB r11, rax
	PSUBD xmm14, xmm5
	PSHUFD xmm15, xmm15, 221
	CMP r11, r10
	JA .process_batch_full
	MOVAPD   [rsp + 112], xmm15
	SUBPD xmm2, xmm4
	MOVAPD xmm5,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c36]
	SUBPD xmm0, xmm4
	MOVAPD xmm3, xmm5
	SUBPD xmm7, xmm4
	MOVAPD xmm6, xmm5
	SUBPD xmm9, xmm4
	MOVAPD xmm10, xmm5
	SUBPD xmm1, xmm4
	MOVAPD xmm11,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c36]
	SUBPD xmm8, xmm4
	MOVAPD xmm13, xmm11
	SUBPD xmm12, xmm4
	MOVAPD   [rsp + 128], xmm12
	MOVAPD xmm12, xmm11
	SUBPD xmm14, xmm4
	MOVAPD   [rsp + 144], xmm14
	MOVAPD xmm4, xmm11
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c37]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c38]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c39]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c40]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c41]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c42]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c43]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c44]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c45]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c46]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c47]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c48]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c49]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c50]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c51]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c52]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c53]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MOVAPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c54]
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm14
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm14
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm14
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm14
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm14
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm14
	MULPD xmm12,   [rsp + 128]
	ADDPD xmm12, xmm14
	MULPD xmm4,   [rsp + 144]
	ADDPD xmm4, xmm14
	MULPD xmm5, xmm2
	CVTDQ2PD xmm14,   [rsp + 16]
	MOVAPS   [rsp + 16], xmm14
	MULPD xmm3, xmm0
	MULPD xmm6, xmm7
	CVTDQ2PD xmm14,   [rsp + 48]
	MOVAPS   [rsp + 48], xmm14
	MULPD xmm10, xmm9
	MULPD xmm11, xmm1
	CVTDQ2PD xmm14,   [rsp + 80]
	MOVAPS   [rsp + 80], xmm14
	MULPD xmm13, xmm8
	MOVAPD xmm14,   [rsp + 128]
	MULPD xmm12, xmm14
	CVTDQ2PD xmm15,   [rsp + 112]
	MOVAPS   [rsp + 112], xmm15
	MOVAPD xmm15,   [rsp + 144]
	MULPD xmm4, xmm15
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm2
	CVTDQ2PD xmm2,   [rsp]
	MOVAPS   [rsp], xmm2
	MULPD xmm3, xmm0
	ADDPD xmm3, xmm0
	MULPD xmm6, xmm7
	ADDPD xmm6, xmm7
	CVTDQ2PD xmm0,   [rsp + 32]
	MOVAPS   [rsp + 32], xmm0
	MULPD xmm10, xmm9
	ADDPD xmm10, xmm9
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm1
	CVTDQ2PD xmm1,   [rsp + 64]
	MOVAPS   [rsp + 64], xmm1
	MULPD xmm13, xmm8
	ADDPD xmm13, xmm8
	MULPD xmm12, xmm14
	ADDPD xmm12, xmm14
	CVTDQ2PD xmm7,   [rsp + 96]
	MOVAPS   [rsp + 96], xmm7
	MULPD xmm4, xmm15
	ADDPD xmm4, xmm15
	MOVAPD xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c55]
	MOVAPS xmm9, xmm2
	MULPD xmm2, xmm8
	ADDPD xmm2, xmm5
	MOVAPS xmm5,   [rsp + 16]
	MULPD xmm5, xmm8
	ADDPD xmm5, xmm3
	MOVAPS xmm3, xmm0
	MULPD xmm0, xmm8
	ADDPD xmm0, xmm6
	MOVAPS xmm6,   [rsp + 48]
	MULPD xmm6, xmm8
	ADDPD xmm6, xmm10
	MOVAPS xmm10, xmm1
	MULPD xmm1, xmm8
	ADDPD xmm1, xmm11
	MOVAPS xmm11,   [rsp + 80]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm13
	MOVAPS xmm13, xmm7
	MULPD xmm7, xmm8
	ADDPD xmm7, xmm12
	MOVAPS xmm12,   [rsp + 112]
	MULPD xmm12, xmm8
	ADDPD xmm12, xmm4
	MOVAPD xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c56]
	MULPD xmm9, xmm4
	ADDPD xmm2, xmm9
	MOVUPD [rdx], xmm2
	MOVAPS xmm2,   [rsp + 16]
	MULPD xmm2, xmm4
	ADDPD xmm5, xmm2
	MOVUPD [byte rdx + 16], xmm5
	MULPD xmm3, xmm4
	ADDPD xmm0, xmm3
	MOVUPD [byte rdx + 32], xmm0
	MOVAPS xmm5,   [rsp + 48]
	MULPD xmm5, xmm4
	ADDPD xmm6, xmm5
	MOVUPD [byte rdx + 48], xmm6
	MULPD xmm10, xmm4
	ADDPD xmm1, xmm10
	MOVUPD [byte rdx + 64], xmm1
	MOVAPS xmm5,   [rsp + 80]
	MULPD xmm5, xmm4
	ADDPD xmm11, xmm5
	MOVUPD [byte rdx + 80], xmm11
	MULPD xmm13, xmm4
	ADDPD xmm7, xmm13
	MOVUPD [byte rdx + 96], xmm7
	MOVAPS xmm5,   [rsp + 112]
	MULPD xmm5, xmm4
	ADDPD xmm12, xmm5
	MOVUPD [byte rdx + 112], xmm12
	.process_batch_increment:
	ADD rcx, 128
	ADD rdx, 128
	SUB r8, 16
	JAE .process_batch_fast
	.process_restore:
	ADD r8, 16
	JZ .return_ok
	.process_single:
	MOVSD xmm4, [rcx]
	MOVAPS xmm5, xmm4
	PSRLQ xmm5, 52
	MOVAPS xmm3, xmm4
	ORPS xmm3,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	SUBSD xmm3, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c1]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm5
	MOVDQA xmm2, xmm3
	PSRLQ xmm2, 52
	PSUBQ xmm2,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PAND xmm2, xmm0
	POR xmm2, xmm5
	PBLENDVB xmm4, xmm3, xmm0
	PAND xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	MOVSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c5]
	CMPLTSD xmm5, xmm4
	PSUBQ xmm2, xmm5
	PAND xmm5,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm4, xmm5
	SUBSD xmm4, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c7]
	MOVSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c8]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c9]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c10]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c11]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c12]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c13]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c14]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c15]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c16]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c17]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c18]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c19]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c20]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c21]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c22]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c23]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c24]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c25]
	MULSD xmm5, xmm4
	ADDSD xmm5, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c26]
	MULSD xmm5, xmm4
	MULSD xmm5, xmm4
	ADDSD xmm5, xmm4
	PADDQ xmm2,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c27]
	SUBSD xmm2,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c28]
	MOVAPS xmm4, xmm2
	MULSD xmm4, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c29]
	ADDSD xmm4, xmm5
	MULSD xmm2, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c30]
	ADDSD xmm4, xmm2
	MOVSD xmm0, [rcx]
	BLENDVPD xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c31], xmm0
	PXOR xmm5, xmm5
	MOVSD xmm3, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c32]
	PCMPEQQ xmm5, xmm0
	PAND xmm3, xmm5
	PANDN xmm5, xmm4
	POR xmm5, xmm3
	MOVAPS xmm4, xmm0
	CMPNLTSD xmm0, [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c33]
	BLENDVPD xmm5, xmm4, xmm0
	MOVSD [rdx], xmm5
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	MOVAPS xmm6, [dword rsp + 320]
	MOVAPS xmm7, [dword rsp + 336]
	MOVAPS xmm8, [dword rsp + 352]
	MOVAPS xmm9, [dword rsp + 368]
	MOVAPS xmm10, [dword rsp + 384]
	MOVAPS xmm11, [dword rsp + 400]
	MOVAPS xmm12, [dword rsp + 416]
	MOVAPS xmm13, [dword rsp + 432]
	MOVAPS xmm14, [dword rsp + 448]
	MOVAPS xmm15, [dword rsp + 464]
	ADD rsp, 488
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	MOVAPS xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	MOVAPS xmm5, [rcx]
	MOVAPS xmm3, xmm5
	PSRLQ xmm3, 52
	MOVAPS xmm2, xmm5
	ORPS xmm2, xmm4
	SUBPD xmm2,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm3
	MOVDQA xmm1, xmm2
	PSRLQ xmm1, 52
	PSUBQ xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PBLENDVB xmm5, xmm2, xmm0
	PAND xmm5,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm5,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	PAND xmm1, xmm0
	POR xmm1, xmm3
	MOVAPS xmm3, [byte rcx + 16]
	MOVAPS xmm2, xmm3
	PSRLQ xmm2, 52
	MOVAPS xmm6, xmm3
	ORPS xmm6, xmm4
	SUBPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm2
	MOVDQA xmm7, xmm6
	PSRLQ xmm7, 52
	PSUBQ xmm7,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PBLENDVB xmm3, xmm6, xmm0
	PAND xmm3,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm3,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	PAND xmm7, xmm0
	POR xmm7, xmm2
	MOVAPS xmm2, [byte rcx + 32]
	MOVAPS xmm6, xmm2
	PSRLQ xmm6, 52
	MOVAPS xmm8, xmm2
	ORPS xmm8, xmm4
	SUBPD xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm6
	MOVDQA xmm9, xmm8
	PSRLQ xmm9, 52
	PSUBQ xmm9,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PBLENDVB xmm2, xmm8, xmm0
	PAND xmm2,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm2,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	PAND xmm9, xmm0
	POR xmm9, xmm6
	MOVAPS xmm6, [byte rcx + 48]
	MOVAPS xmm8, xmm6
	PSRLQ xmm8, 52
	MOVAPS xmm10, xmm6
	ORPS xmm10, xmm4
	SUBPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm8
	MOVDQA xmm11, xmm10
	PSRLQ xmm11, 52
	PSUBQ xmm11,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PBLENDVB xmm6, xmm10, xmm0
	PAND xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	PAND xmm11, xmm0
	POR xmm11, xmm8
	MOVAPD xmm0,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm0, xmm5
	PSUBQ xmm1, xmm0
	PAND xmm0,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm5, xmm0
	MOVAPD   [rsp + 160], xmm1
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm1, xmm3
	PSUBQ xmm7, xmm1
	PAND xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm3, xmm1
	MOVAPD   [rsp + 176], xmm7
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm1, xmm2
	PSUBQ xmm9, xmm1
	PAND xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm2, xmm1
	MOVAPD   [rsp + 192], xmm9
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm1, xmm6
	PSUBQ xmm11, xmm1
	PAND xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm6, xmm1
	MOVAPD   [rsp + 208], xmm11
	MOVAPS xmm1, [byte rcx + 64]
	MOVAPS xmm7, xmm1
	PSRLQ xmm7, 52
	MOVAPS xmm8, xmm1
	ORPS xmm8, xmm4
	SUBPD xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm7
	MOVDQA xmm9, xmm8
	PSRLQ xmm9, 52
	PSUBQ xmm9,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PBLENDVB xmm1, xmm8, xmm0
	PAND xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	PAND xmm9, xmm0
	POR xmm9, xmm7
	MOVAPS xmm7, [byte rcx + 80]
	MOVAPS xmm8, xmm7
	PSRLQ xmm8, 52
	MOVAPS xmm10, xmm7
	ORPS xmm10, xmm4
	SUBPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm8
	MOVDQA xmm11, xmm10
	PSRLQ xmm11, 52
	PSUBQ xmm11,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PBLENDVB xmm7, xmm10, xmm0
	PAND xmm7,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm7,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	PAND xmm11, xmm0
	POR xmm11, xmm8
	MOVAPS xmm8, [byte rcx + 96]
	MOVAPS xmm10, xmm8
	PSRLQ xmm10, 52
	MOVAPS xmm12, xmm8
	ORPS xmm12, xmm4
	SUBPD xmm12,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm10
	MOVDQA xmm13, xmm12
	PSRLQ xmm13, 52
	PSUBQ xmm13,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PBLENDVB xmm8, xmm12, xmm0
	PAND xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm8,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	PAND xmm13, xmm0
	POR xmm13, xmm10
	MOVAPS xmm10, [byte rcx + 112]
	MOVAPS xmm12, xmm10
	PSRLQ xmm12, 52
	MOVAPS xmm14, xmm10
	ORPS xmm14, xmm4
	SUBPD xmm14,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c0]
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm12
	MOVDQA xmm4, xmm14
	PSRLQ xmm4, 52
	PSUBQ xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c2]
	PBLENDVB xmm10, xmm14, xmm0
	PAND xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c3]
	POR xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	PAND xmm4, xmm0
	POR xmm4, xmm12
	MOVAPD xmm0,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm0, xmm1
	PSUBQ xmm9, xmm0
	PAND xmm0,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm1, xmm0
	MOVAPD   [rsp + 224], xmm9
	MOVAPD xmm0,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm0, xmm7
	PSUBQ xmm11, xmm0
	PAND xmm0,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm7, xmm0
	MOVAPD   [rsp + 240], xmm11
	MOVAPD xmm0,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm0, xmm8
	PSUBQ xmm13, xmm0
	PAND xmm0,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm8, xmm0
	MOVAPD   [rsp + 256], xmm13
	MOVAPD xmm0,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c35]
	CMPLTPD xmm0, xmm10
	PSUBQ xmm4, xmm0
	PAND xmm0,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c6]
	PSUBD xmm10, xmm0
	MOVAPD   [rsp + 272], xmm4
	MOVAPD xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c4]
	SUBPD xmm5, xmm4
	MOVAPD xmm0,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c36]
	SUBPD xmm3, xmm4
	MOVAPD xmm9, xmm0
	SUBPD xmm2, xmm4
	MOVAPD xmm11, xmm0
	SUBPD xmm6, xmm4
	MOVAPD xmm12, xmm0
	SUBPD xmm1, xmm4
	MOVAPD xmm13,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c36]
	SUBPD xmm7, xmm4
	MOVAPD xmm14, xmm13
	SUBPD xmm8, xmm4
	MOVAPD   [rsp + 288], xmm8
	MOVAPD xmm8, xmm13
	SUBPD xmm10, xmm4
	MOVAPD   [rsp + 304], xmm10
	MOVAPD xmm4, xmm13
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c37]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c38]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c39]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c40]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c41]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c42]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c43]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c44]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c45]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c46]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c47]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c48]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c49]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c50]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c51]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c52]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c53]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MOVAPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c54]
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm10
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm10
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm10
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm10
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm10
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm10
	MULPD xmm8,   [rsp + 288]
	ADDPD xmm8, xmm10
	MULPD xmm4,   [rsp + 304]
	ADDPD xmm4, xmm10
	MULPD xmm0, xmm5
	MULPD xmm0, xmm5
	ADDPD xmm0, xmm5
	MULPD xmm9, xmm3
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm3
	MULPD xmm11, xmm2
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm2
	MULPD xmm12, xmm6
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm6
	MULPD xmm13, xmm1
	MULPD xmm13, xmm1
	ADDPD xmm13, xmm1
	MULPD xmm14, xmm7
	MULPD xmm14, xmm7
	ADDPD xmm14, xmm7
	MOVAPD xmm5,   [rsp + 288]
	MULPD xmm8, xmm5
	MULPD xmm8, xmm5
	ADDPD xmm8, xmm5
	MOVAPD xmm5,   [rsp + 304]
	MULPD xmm4, xmm5
	MULPD xmm4, xmm5
	ADDPD xmm4, xmm5
	MOVDQA xmm5,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c27]
	MOVAPD xmm3,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c28]
	MOVAPD xmm2,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c55]
	MOVAPD xmm1,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c56]
	MOVAPD xmm6,   [rsp + 160]
	PADDQ xmm6, xmm5
	SUBPD xmm6, xmm3
	MOVAPS xmm7, xmm6
	MULPD xmm7, xmm2
	ADDPD xmm7, xmm0
	MULPD xmm6, xmm1
	ADDPD xmm7, xmm6
	MOVAPD xmm0,   [rsp + 176]
	PADDQ xmm0, xmm5
	SUBPD xmm0, xmm3
	MOVAPS xmm6, xmm0
	MULPD xmm6, xmm2
	ADDPD xmm6, xmm9
	MULPD xmm0, xmm1
	ADDPD xmm6, xmm0
	MOVAPD xmm0,   [rsp + 192]
	PADDQ xmm0, xmm5
	SUBPD xmm0, xmm3
	MOVAPS xmm9, xmm0
	MULPD xmm9, xmm2
	ADDPD xmm9, xmm11
	MULPD xmm0, xmm1
	ADDPD xmm9, xmm0
	MOVAPD xmm0,   [rsp + 208]
	PADDQ xmm0, xmm5
	SUBPD xmm0, xmm3
	MOVAPS xmm10, xmm0
	MULPD xmm10, xmm2
	ADDPD xmm10, xmm12
	MULPD xmm0, xmm1
	ADDPD xmm10, xmm0
	MOVAPD xmm0,   [rsp + 224]
	PADDQ xmm0, xmm5
	SUBPD xmm0, xmm3
	MOVAPS xmm11, xmm0
	MULPD xmm11, xmm2
	ADDPD xmm11, xmm13
	MULPD xmm0, xmm1
	ADDPD xmm11, xmm0
	MOVAPD xmm0,   [rsp + 240]
	PADDQ xmm0, xmm5
	SUBPD xmm0, xmm3
	MOVAPS xmm12, xmm0
	MULPD xmm12, xmm2
	ADDPD xmm12, xmm14
	MULPD xmm0, xmm1
	ADDPD xmm12, xmm0
	MOVAPD xmm0,   [rsp + 256]
	PADDQ xmm0, xmm5
	SUBPD xmm0, xmm3
	MOVAPS xmm13, xmm0
	MULPD xmm13, xmm2
	ADDPD xmm13, xmm8
	MULPD xmm0, xmm1
	ADDPD xmm13, xmm0
	MOVAPD xmm0,   [rsp + 272]
	PADDQ xmm0, xmm5
	SUBPD xmm0, xmm3
	MOVAPS xmm5, xmm0
	MULPD xmm5, xmm2
	ADDPD xmm5, xmm4
	MULPD xmm0, xmm1
	ADDPD xmm5, xmm0
	MOVAPD xmm4,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c31]
	MOVAPD xmm3,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c57]
	MOVAPD xmm0, [rcx]
	BLENDVPD xmm7, xmm4, xmm0
	MOVAPS xmm2, xmm0
	CMPNLTPD xmm0, xmm3
	BLENDVPD xmm7, xmm2, xmm0
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm2
	BLENDVPD xmm7,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c58], xmm0
	MOVUPD [rdx], xmm7
	MOVAPD xmm0, [byte rcx + 16]
	BLENDVPD xmm6, xmm4, xmm0
	MOVAPS xmm2, xmm0
	CMPNLTPD xmm0, xmm3
	BLENDVPD xmm6, xmm2, xmm0
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm2
	BLENDVPD xmm6,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c58], xmm0
	MOVUPD [byte rdx + 16], xmm6
	MOVAPD xmm0, [byte rcx + 32]
	BLENDVPD xmm9, xmm4, xmm0
	MOVAPS xmm2, xmm0
	CMPNLTPD xmm0, xmm3
	BLENDVPD xmm9, xmm2, xmm0
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm2
	BLENDVPD xmm9,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c58], xmm0
	MOVUPD [byte rdx + 32], xmm9
	MOVAPD xmm0, [byte rcx + 48]
	BLENDVPD xmm10, xmm4, xmm0
	MOVAPS xmm2, xmm0
	CMPNLTPD xmm0, xmm3
	BLENDVPD xmm10, xmm2, xmm0
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm2
	BLENDVPD xmm10,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c58], xmm0
	MOVUPD [byte rdx + 48], xmm10
	MOVAPD xmm0, [byte rcx + 64]
	BLENDVPD xmm11, xmm4, xmm0
	MOVAPS xmm2, xmm0
	CMPNLTPD xmm0, xmm3
	BLENDVPD xmm11, xmm2, xmm0
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm2
	BLENDVPD xmm11,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c58], xmm0
	MOVUPD [byte rdx + 64], xmm11
	MOVAPD xmm0, [byte rcx + 80]
	BLENDVPD xmm12, xmm4, xmm0
	MOVAPS xmm2, xmm0
	CMPNLTPD xmm0, xmm3
	BLENDVPD xmm12, xmm2, xmm0
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm2
	BLENDVPD xmm12,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c58], xmm0
	MOVUPD [byte rdx + 80], xmm12
	MOVAPD xmm0, [byte rcx + 96]
	BLENDVPD xmm13, xmm4, xmm0
	MOVAPS xmm2, xmm0
	CMPNLTPD xmm0, xmm3
	BLENDVPD xmm13, xmm2, xmm0
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm2
	BLENDVPD xmm13,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c58], xmm0
	MOVUPD [byte rdx + 96], xmm13
	MOVAPD xmm0, [byte rcx + 112]
	BLENDVPD xmm5, xmm4, xmm0
	MOVAPS xmm4, xmm0
	CMPNLTPD xmm0, xmm3
	BLENDVPD xmm5, xmm4, xmm0
	PXOR xmm0, xmm0
	PCMPEQQ xmm0, xmm4
	BLENDVPD xmm5,  [rel _yepMath_Log_V64f_V64f_Nehalem_constants.c58], xmm0
	MOVUPD [byte rdx + 112], xmm5
	JMP .process_batch_increment

section .rdata$f rdata align=32
_yepMath_Log_V64f_V64f_SandyBridge_constants:
	.c0: DQ 0x4330000000000000, 0x4330000000000000
	.c2: DQ 0x0000000000000432, 0x0000000000000432
	.c1: DQ 0x4330000000000000
	.c5: DQ 0x3FF6A09E667F3BCD
	.c7: DQ 0x3FF0000000000000
	.c8: DQ 0xBF9CC4EC078138E3
	.c3: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c6: DQ 0x0010000000000000, 0x0010000000000000
	.c27: DQ 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01
	.c9: DQ 0x3FB0266CD08DB2F2
	.c10: DQ 0xBFB1654764F478EC
	.c11: DQ 0x3FAEA17E14773369
	.c12: DQ 0xBFAEED2E2BB64B2E
	.c13: DQ 0x3FB0F23916A44515
	.c14: DQ 0xBFB25480A82633AF
	.c15: DQ 0x3FB3B4ED39194B87
	.c16: DQ 0xBFB554D5ACD502AB
	.c17: DQ 0x3FB745980F3FB889
	.c18: DQ 0xBFB9999C5BE751E3
	.c19: DQ 0x3FBC71C90DB06248
	.c20: DQ 0xBFBFFFFFFBD8606D
	.c21: DQ 0x3FC249248DAE4B2A
	.c22: DQ 0xBFC55555554A6A2B
	.c23: DQ 0x3FC9999999A43E4F
	.c24: DQ 0xBFD00000000013C7
	.c25: DQ 0x3FD5555555555103
	.c26: DQ 0xBFDFFFFFFFFFFFF2
	.c28: DQ 0x4338000000000000
	.c29: DQ 0x3D2EF35793C76730
	.c30: DQ 0x3FE62E42FEFA3800
	ALIGN 32
	.c31: DQ 0x7FF8000000000000, 0x7FF8000000000000
	.c32: DQ 0xFFF0000000000000, 0xFFF0000000000000
	.c33: DQ 0x7FF0000000000000, 0x7FF0000000000000
	ALIGN 32
	.c34: DQ 0x0010000000000000, 0x0010000000000000, 0x0010000000000000, 0x0010000000000000
	.c35: DQ 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000
	.c36: DQ 0x7FEFFFFFFFFFFFFF, 0x7FEFFFFFFFFFFFFF, 0x7FEFFFFFFFFFFFFF, 0x7FEFFFFFFFFFFFFF
	.c37: DQ 0x41F8000000000000, 0x41F8000000000000, 0x41F8000000000000, 0x41F8000000000000
	.c38: DQ 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000
	.c39: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c40: DQ 0x41F800003FF00000, 0x41F800003FF00000, 0x41F800003FF00000, 0x41F800003FF00000
	.c41: DQ 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD
	.c42: DQ 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3
	.c43: DQ 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2
	.c44: DQ 0xBFB1654764F478EC, 0xBFB1654764F478EC, 0xBFB1654764F478EC, 0xBFB1654764F478EC
	.c45: DQ 0x3FAEA17E14773369, 0x3FAEA17E14773369, 0x3FAEA17E14773369, 0x3FAEA17E14773369
	.c46: DQ 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E
	.c47: DQ 0x3FB0F23916A44515, 0x3FB0F23916A44515, 0x3FB0F23916A44515, 0x3FB0F23916A44515
	.c48: DQ 0xBFB25480A82633AF, 0xBFB25480A82633AF, 0xBFB25480A82633AF, 0xBFB25480A82633AF
	.c49: DQ 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87
	.c50: DQ 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB
	.c51: DQ 0x3FB745980F3FB889, 0x3FB745980F3FB889, 0x3FB745980F3FB889, 0x3FB745980F3FB889
	.c52: DQ 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3
	.c53: DQ 0x3FBC71C90DB06248, 0x3FBC71C90DB06248, 0x3FBC71C90DB06248, 0x3FBC71C90DB06248
	.c54: DQ 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D
	.c55: DQ 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A
	.c56: DQ 0xBFC55555554A6A2B, 0xBFC55555554A6A2B, 0xBFC55555554A6A2B, 0xBFC55555554A6A2B
	.c57: DQ 0x3FC9999999A43E4F, 0x3FC9999999A43E4F, 0x3FC9999999A43E4F, 0x3FC9999999A43E4F
	.c58: DQ 0xBFD00000000013C7, 0xBFD00000000013C7, 0xBFD00000000013C7, 0xBFD00000000013C7
	.c59: DQ 0x3FD5555555555103, 0x3FD5555555555103, 0x3FD5555555555103, 0x3FD5555555555103
	.c60: DQ 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2
	.c61: DQ 0x3D2EF35793C76730, 0x3D2EF35793C76730, 0x3D2EF35793C76730, 0x3D2EF35793C76730
	.c62: DQ 0x3FE62E42FEFA3800, 0x3FE62E42FEFA3800, 0x3FE62E42FEFA3800, 0x3FE62E42FEFA3800
	.c63: DQ 0x4330000000000000, 0x4330000000000000, 0x4330000000000000, 0x4330000000000000
	.c64: DQ 0x41F8000083100000, 0x41F8000083100000, 0x41F8000083100000, 0x41F8000083100000
	.c65: DQ 0x7FF8000000000000, 0x7FF8000000000000, 0x7FF8000000000000, 0x7FF8000000000000


section .text$f code align=16
global _yepMath_Log_V64f_V64f_SandyBridge
_yepMath_Log_V64f_V64f_SandyBridge:
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 800
	VMOVAPS [dword rsp + 640], xmm6
	VMOVAPS [dword rsp + 656], xmm7
	VMOVAPS [dword rsp + 672], xmm8
	VMOVAPS [dword rsp + 688], xmm9
	VMOVAPS [dword rsp + 704], xmm10
	VMOVAPS [dword rsp + 720], xmm11
	VMOVAPS [dword rsp + 736], xmm12
	VMOVAPS [dword rsp + 752], xmm13
	VMOVAPS [dword rsp + 768], xmm14
	VMOVAPS [dword rsp + 784], xmm15
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm4, [rcx]
	VPSRLQ xmm5, xmm4, 52
	VORPS xmm3, xmm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c0]
	VSUBSD xmm3, xmm3, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c1]
	VPXOR xmm2, xmm2, xmm2
	VPCMPEQQ xmm2, xmm2, xmm5
	VPSRLQ xmm1, xmm3, 52
	VPSUBQ xmm1, xmm1,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c2]
	VPBLENDVB xmm4, xmm4, xmm3, xmm2
	VPAND xmm4, xmm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c3]
	VPOR xmm4, xmm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c4]
	VPAND xmm3, xmm1, xmm2
	VPOR xmm3, xmm3, xmm5
	VMOVSD xmm5, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c5]
	VCMPLTSD xmm5, xmm5, xmm4
	VPSUBQ xmm3, xmm3, xmm5
	VPAND xmm5, xmm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c6]
	VPXOR xmm4, xmm4, xmm5
	VSUBSD xmm5, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c7]
	VMOVSD xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c8]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c9]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c10]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c11]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c12]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c13]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c14]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c15]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c16]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c17]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c18]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c19]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c20]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c21]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c22]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c23]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c24]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c25]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c26]
	VMULSD xmm4, xmm4, xmm5
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, xmm5
	VPADDQ xmm3, xmm3,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c27]
	VSUBSD xmm3, xmm3, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c28]
	VMOVSD xmm5, [rcx]
	VMULSD xmm2, xmm3, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c29]
	VADDSD xmm2, xmm2, xmm4
	VMULSD xmm3, xmm3, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c30]
	VADDSD xmm2, xmm2, xmm3
	VBLENDVPD xmm2, xmm2,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c31], xmm5
	VPXOR xmm4, xmm4, xmm4
	VPCMPEQQ xmm4, xmm4, xmm5
	VBLENDVPD xmm2, xmm2,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c32], xmm4
	VCMPNLTSD xmm4, xmm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c33]
	VBLENDVPD xmm2, xmm2, xmm5, xmm4
	VMOVSD [rdx], xmm2
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB r8, 32
	JB .process_restore
	align 32
	.process_batch_fast:
	VMOVAPD ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VMOVAPD ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c35]
	VMOVAPD ymm3,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c36]
	VMOVAPD ymm2, [rcx]
	VCMPLTPD ymm1, ymm2, ymm4
	VANDPD ymm0, ymm2, ymm5
	VMOVSHDUP ymm0, ymm0
	VCMPGTPD ymm6, ymm2, ymm3
	VORPD ymm1, ymm1, ymm6
	VTESTPD ymm1, ymm1
	JNZ .process_batch_full
	VMOVAPD ymm1, [byte rcx + 32]
	VCMPLTPD ymm6, ymm1, ymm4
	VANDPD ymm7, ymm1, ymm5
	VMOVSHDUP ymm7, ymm7
	VCMPGTPD ymm8, ymm1, ymm3
	VORPD ymm6, ymm6, ymm8
	VTESTPD ymm6, ymm6
	JNZ .process_batch_full
	VMOVAPD ymm6, [byte rcx + 64]
	VCMPLTPD ymm8, ymm6, ymm4
	VANDPD ymm9, ymm6, ymm5
	VMOVSHDUP ymm9, ymm9
	VCMPGTPD ymm10, ymm6, ymm3
	VORPD ymm8, ymm8, ymm10
	VTESTPD ymm8, ymm8
	JNZ .process_batch_full
	VMOVAPD ymm8, [byte rcx + 96]
	VCMPLTPD ymm10, ymm8, ymm4
	VANDPD ymm5, ymm8, ymm5
	VMOVSHDUP ymm5, ymm5
	VCMPGTPD ymm3, ymm8, ymm3
	VORPD ymm3, ymm10, ymm3
	VTESTPD ymm3, ymm3
	JNZ .process_batch_full
	VMOVAPD ymm3,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37]
	VMOVAPD ymm10,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c38]
	VANDPD ymm2, ymm2,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm2, ymm2, ymm10
	VBLENDPS ymm0, ymm0, ymm3, 170
	VSUBPD ymm0, ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VANDPD ymm1, ymm1,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm1, ymm1, ymm10
	VBLENDPS ymm7, ymm7, ymm3, 170
	VSUBPD ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VANDPD ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm6, ymm6, ymm10
	VBLENDPS ymm9, ymm9, ymm3, 170
	VSUBPD ymm9, ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VANDPD ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm8, ymm8, ymm10
	VBLENDPS ymm5, ymm5, ymm3, 170
	VSUBPD ymm5, ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VCMPGTPD ymm3, ymm2,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm11, ymm3, ymm10
	VADDPD ymm0, ymm0, ymm11
	VMOVAPD   [rsp], ymm0
	VANDPD ymm3, ymm3, ymm4
	VXORPD ymm2, ymm2, ymm3
	VSUBPD ymm3, ymm2, ymm10
	VCMPGTPD ymm2, ymm1,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm0, ymm2, ymm10
	VADDPD ymm7, ymm7, ymm0
	VMOVAPD   [rsp + 32], ymm7
	VANDPD ymm2, ymm2, ymm4
	VXORPD ymm1, ymm1, ymm2
	VSUBPD ymm2, ymm1, ymm10
	VCMPGTPD ymm1, ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm0, ymm1, ymm10
	VADDPD ymm9, ymm9, ymm0
	VMOVAPD   [rsp + 64], ymm9
	VANDPD ymm1, ymm1, ymm4
	VXORPD ymm6, ymm6, ymm1
	VSUBPD ymm1, ymm6, ymm10
	VCMPGTPD ymm0, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm6, ymm0, ymm10
	VADDPD ymm5, ymm5, ymm6
	VMOVAPD   [rsp + 96], ymm5
	VANDPD ymm5, ymm0, ymm4
	VXORPD ymm8, ymm8, ymm5
	VSUBPD ymm5, ymm8, ymm10
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c35]
	VMOVAPD ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c36]
	VMOVAPD ymm7, [dword rcx + 128]
	VCMPLTPD ymm8, ymm7, ymm4
	VANDPD ymm9, ymm7, ymm0
	VMOVSHDUP ymm9, ymm9
	VCMPGTPD ymm10, ymm7, ymm6
	VORPD ymm8, ymm8, ymm10
	VTESTPD ymm8, ymm8
	JNZ .process_batch_full
	VMOVAPD ymm8, [dword rcx + 160]
	VCMPLTPD ymm10, ymm8, ymm4
	VANDPD ymm11, ymm8, ymm0
	VMOVSHDUP ymm11, ymm11
	VCMPGTPD ymm12, ymm8, ymm6
	VORPD ymm10, ymm10, ymm12
	VTESTPD ymm10, ymm10
	JNZ .process_batch_full
	VMOVAPD ymm10, [dword rcx + 192]
	VCMPLTPD ymm12, ymm10, ymm4
	VANDPD ymm13, ymm10, ymm0
	VMOVSHDUP ymm13, ymm13
	VCMPGTPD ymm14, ymm10, ymm6
	VORPD ymm12, ymm12, ymm14
	VTESTPD ymm12, ymm12
	JNZ .process_batch_full
	VMOVAPD ymm12, [dword rcx + 224]
	VCMPLTPD ymm14, ymm12, ymm4
	VANDPD ymm0, ymm12, ymm0
	VMOVSHDUP ymm0, ymm0
	VCMPGTPD ymm6, ymm12, ymm6
	VORPD ymm6, ymm14, ymm6
	VTESTPD ymm6, ymm6
	JNZ .process_batch_full
	VMOVAPD ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37]
	VMOVAPD ymm14,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c38]
	VANDPD ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm7, ymm7, ymm14
	VBLENDPS ymm9, ymm9, ymm6, 170
	VSUBPD ymm9, ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VANDPD ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm8, ymm8, ymm14
	VBLENDPS ymm11, ymm11, ymm6, 170
	VSUBPD ymm11, ymm11,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VANDPD ymm10, ymm10,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm10, ymm10, ymm14
	VBLENDPS ymm13, ymm13, ymm6, 170
	VSUBPD ymm13, ymm13,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VANDPD ymm12, ymm12,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm12, ymm12, ymm14
	VBLENDPS ymm0, ymm0, ymm6, 170
	VSUBPD ymm0, ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VCMPGTPD ymm6, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm15, ymm6, ymm14
	VADDPD ymm9, ymm9, ymm15
	VMOVAPD   [rsp + 128], ymm9
	VANDPD ymm6, ymm6, ymm4
	VXORPD ymm7, ymm7, ymm6
	VSUBPD ymm6, ymm7, ymm14
	VCMPGTPD ymm7, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm9, ymm7, ymm14
	VADDPD ymm11, ymm11, ymm9
	VMOVAPD   [rsp + 160], ymm11
	VANDPD ymm7, ymm7, ymm4
	VXORPD ymm8, ymm8, ymm7
	VSUBPD ymm7, ymm8, ymm14
	VCMPGTPD ymm8, ymm10,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm9, ymm8, ymm14
	VADDPD ymm13, ymm13, ymm9
	VMOVAPD   [rsp + 192], ymm13
	VANDPD ymm8, ymm8, ymm4
	VXORPD ymm10, ymm10, ymm8
	VSUBPD ymm8, ymm10, ymm14
	VMOVAPD   [rsp + 224], ymm8
	VCMPGTPD ymm8, ymm12,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm9, ymm8, ymm14
	VADDPD ymm0, ymm0, ymm9
	VMOVAPD   [rsp + 256], ymm0
	VANDPD ymm4, ymm8, ymm4
	VXORPD ymm12, ymm12, ymm4
	VSUBPD ymm4, ymm12, ymm14
	VMOVAPD   [rsp + 288], ymm4
	VMOVAPD ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c42]
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c43]
	VMULPD ymm8, ymm4, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm4, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm4, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm4, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm4, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm4, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm4,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c44]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c45]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c46]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c47]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c48]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c49]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c50]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c51]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c52]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c53]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c54]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c55]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c56]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c57]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c58]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c59]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMOVAPD ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c60]
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm0
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm0
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm0
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm0
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm0
	VMULPD ymm14, ymm14,   [rsp + 224]
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4,   [rsp + 288]
	VADDPD ymm4, ymm4, ymm0
	VMULPD ymm8, ymm8, ymm3
	VMULPD ymm9, ymm9, ymm2
	VMULPD ymm10, ymm10, ymm1
	VMULPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm6
	VMULPD ymm13, ymm13, ymm7
	VMOVAPD ymm0,   [rsp + 224]
	VMULPD ymm14, ymm14, ymm0
	VMOVAPD ymm15,   [rsp + 288]
	VMULPD ymm4, ymm4, ymm15
	VMULPD ymm8, ymm8, ymm3
	VADDPD ymm8, ymm8, ymm3
	VMULPD ymm9, ymm9, ymm2
	VADDPD ymm9, ymm9, ymm2
	VMULPD ymm10, ymm10, ymm1
	VADDPD ymm10, ymm10, ymm1
	VMULPD ymm11, ymm11, ymm5
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm6
	VADDPD ymm12, ymm12, ymm6
	VMULPD ymm13, ymm13, ymm7
	VADDPD ymm13, ymm13, ymm7
	VMULPD ymm14, ymm14, ymm0
	VADDPD ymm14, ymm14, ymm0
	VMULPD ymm4, ymm4, ymm15
	VADDPD ymm4, ymm4, ymm15
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c61]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c62]
	VMOVAPD ymm2,   [rsp]
	VMULPD ymm1, ymm2, ymm5
	VADDPD ymm8, ymm8, ymm1
	VMOVAPD ymm1,   [rsp + 32]
	VMULPD ymm0, ymm1, ymm5
	VADDPD ymm9, ymm9, ymm0
	VMOVAPD ymm0,   [rsp + 64]
	VMULPD ymm6, ymm0, ymm5
	VADDPD ymm10, ymm10, ymm6
	VMOVAPD ymm6,   [rsp + 96]
	VMULPD ymm7, ymm6, ymm5
	VADDPD ymm11, ymm11, ymm7
	VMULPD ymm2, ymm2, ymm3
	VADDPD ymm8, ymm8, ymm2
	VMOVUPD [rdx], xmm8
	VEXTRACTF128 [byte rdx + 16], ymm8, 1
	VMULPD ymm2, ymm1, ymm3
	VADDPD ymm9, ymm9, ymm2
	VMOVUPD [byte rdx + 32], xmm9
	VEXTRACTF128 [byte rdx + 48], ymm9, 1
	VMULPD ymm2, ymm0, ymm3
	VADDPD ymm10, ymm10, ymm2
	VMOVUPD [byte rdx + 64], xmm10
	VEXTRACTF128 [byte rdx + 80], ymm10, 1
	VMULPD ymm2, ymm6, ymm3
	VADDPD ymm11, ymm11, ymm2
	VMOVUPD [byte rdx + 96], xmm11
	VEXTRACTF128 [byte rdx + 112], ymm11, 1
	VMOVAPD ymm2,   [rsp + 128]
	VMULPD ymm1, ymm2, ymm5
	VADDPD ymm12, ymm12, ymm1
	VMOVAPD ymm1,   [rsp + 160]
	VMULPD ymm0, ymm1, ymm5
	VADDPD ymm13, ymm13, ymm0
	VMOVAPD ymm0,   [rsp + 192]
	VMULPD ymm6, ymm0, ymm5
	VADDPD ymm14, ymm14, ymm6
	VMOVAPD ymm6,   [rsp + 256]
	VMULPD ymm5, ymm6, ymm5
	VADDPD ymm4, ymm4, ymm5
	VMULPD ymm5, ymm2, ymm3
	VADDPD ymm12, ymm12, ymm5
	VMOVUPD [dword rdx + 128], xmm12
	VEXTRACTF128 [dword rdx + 144], ymm12, 1
	VMULPD ymm5, ymm1, ymm3
	VADDPD ymm13, ymm13, ymm5
	VMOVUPD [dword rdx + 160], xmm13
	VEXTRACTF128 [dword rdx + 176], ymm13, 1
	VMULPD ymm5, ymm0, ymm3
	VADDPD ymm14, ymm14, ymm5
	VMOVUPD [dword rdx + 192], xmm14
	VEXTRACTF128 [dword rdx + 208], ymm14, 1
	VMULPD ymm5, ymm6, ymm3
	VADDPD ymm4, ymm4, ymm5
	VMOVUPD [dword rdx + 224], xmm4
	VEXTRACTF128 [dword rdx + 240], ymm4, 1
	.process_batch_increment:
	ADD rcx, 256
	ADD rdx, 256
	SUB r8, 32
	JAE .process_batch_fast
	.process_restore:
	ADD r8, 32
	JZ .return_ok
	.process_single:
	VMOVSD xmm4, [rcx]
	VPSRLQ xmm5, xmm4, 52
	VORPS xmm3, xmm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c0]
	VSUBSD xmm3, xmm3, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c1]
	VPXOR xmm2, xmm2, xmm2
	VPCMPEQQ xmm2, xmm2, xmm5
	VPSRLQ xmm1, xmm3, 52
	VPSUBQ xmm1, xmm1,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c2]
	VPBLENDVB xmm4, xmm4, xmm3, xmm2
	VPAND xmm4, xmm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c3]
	VPOR xmm4, xmm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c4]
	VPAND xmm3, xmm1, xmm2
	VPOR xmm3, xmm3, xmm5
	VMOVSD xmm5, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c5]
	VCMPLTSD xmm5, xmm5, xmm4
	VPSUBQ xmm3, xmm3, xmm5
	VPAND xmm5, xmm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c6]
	VPXOR xmm4, xmm4, xmm5
	VSUBSD xmm5, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c7]
	VMOVSD xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c8]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c9]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c10]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c11]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c12]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c13]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c14]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c15]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c16]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c17]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c18]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c19]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c20]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c21]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c22]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c23]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c24]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c25]
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c26]
	VMULSD xmm4, xmm4, xmm5
	VMULSD xmm4, xmm4, xmm5
	VADDSD xmm4, xmm4, xmm5
	VPADDQ xmm3, xmm3,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c27]
	VSUBSD xmm3, xmm3, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c28]
	VMOVSD xmm5, [rcx]
	VMULSD xmm2, xmm3, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c29]
	VADDSD xmm2, xmm2, xmm4
	VMULSD xmm3, xmm3, [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c30]
	VADDSD xmm2, xmm2, xmm3
	VBLENDVPD xmm2, xmm2,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c31], xmm5
	VPXOR xmm4, xmm4, xmm4
	VPCMPEQQ xmm4, xmm4, xmm5
	VBLENDVPD xmm2, xmm2,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c32], xmm4
	VCMPNLTSD xmm4, xmm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c33]
	VBLENDVPD xmm2, xmm2, xmm5, xmm4
	VMOVSD [rdx], xmm2
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	VMOVAPS xmm6, [dword rsp + 640]
	VMOVAPS xmm7, [dword rsp + 656]
	VMOVAPS xmm8, [dword rsp + 672]
	VMOVAPS xmm9, [dword rsp + 688]
	VMOVAPS xmm10, [dword rsp + 704]
	VMOVAPS xmm11, [dword rsp + 720]
	VMOVAPS xmm12, [dword rsp + 736]
	VMOVAPS xmm13, [dword rsp + 752]
	VMOVAPS xmm14, [dword rsp + 768]
	VMOVAPS xmm15, [dword rsp + 784]
	MOV rsp, [dword rsp + 800]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	VMOVAPS ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c40]
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c63]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c38]
	VMOVDQA ymm2,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c35]
	VMOVAPD ymm1, [rcx]
	VORPD ymm0, ymm1, ymm5
	VSUBPD ymm0, ymm0, ymm5
	VCMPLTPD ymm6, ymm1,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VBLENDVPD ymm1, ymm1, ymm0, ymm6
	VANDPD ymm0, ymm1,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm0, ymm0, ymm3
	VANDPD ymm1, ymm1, ymm2
	VBLENDVPD ymm6, ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c64], ymm6
	VMOVSHDUP ymm1, ymm1
	VBLENDPS ymm1, ymm1,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37], 170
	VSUBPD ymm1, ymm1, ymm6
	VCMPGTPD ymm6, ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm7, ymm6, ymm3
	VADDPD ymm1, ymm1, ymm7
	VMOVAPD   [rsp + 320], ymm1
	VANDPD ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VXORPD ymm0, ymm0, ymm6
	VSUBPD ymm1, ymm0, ymm3
	VMOVAPD ymm0, [byte rcx + 32]
	VORPD ymm6, ymm0, ymm5
	VSUBPD ymm6, ymm6, ymm5
	VCMPLTPD ymm7, ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VBLENDVPD ymm0, ymm0, ymm6, ymm7
	VANDPD ymm6, ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm6, ymm6, ymm3
	VANDPD ymm0, ymm0, ymm2
	VBLENDVPD ymm7, ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c64], ymm7
	VMOVSHDUP ymm0, ymm0
	VBLENDPS ymm0, ymm0,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37], 170
	VSUBPD ymm0, ymm0, ymm7
	VCMPGTPD ymm7, ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm8, ymm7, ymm3
	VADDPD ymm0, ymm0, ymm8
	VMOVAPD   [rsp + 352], ymm0
	VANDPD ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VXORPD ymm6, ymm6, ymm7
	VSUBPD ymm0, ymm6, ymm3
	VMOVAPD ymm6, [byte rcx + 64]
	VORPD ymm7, ymm6, ymm5
	VSUBPD ymm7, ymm7, ymm5
	VCMPLTPD ymm8, ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VBLENDVPD ymm6, ymm6, ymm7, ymm8
	VANDPD ymm7, ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm7, ymm7, ymm3
	VANDPD ymm6, ymm6, ymm2
	VBLENDVPD ymm8, ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c64], ymm8
	VMOVSHDUP ymm6, ymm6
	VBLENDPS ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37], 170
	VSUBPD ymm6, ymm6, ymm8
	VCMPGTPD ymm8, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm9, ymm8, ymm3
	VADDPD ymm6, ymm6, ymm9
	VMOVAPD   [rsp + 384], ymm6
	VANDPD ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VXORPD ymm7, ymm7, ymm8
	VSUBPD ymm6, ymm7, ymm3
	VMOVAPD ymm7, [byte rcx + 96]
	VORPD ymm8, ymm7, ymm5
	VSUBPD ymm8, ymm8, ymm5
	VCMPLTPD ymm9, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VBLENDVPD ymm7, ymm7, ymm8, ymm9
	VANDPD ymm8, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm8, ymm8, ymm3
	VANDPD ymm7, ymm7, ymm2
	VBLENDVPD ymm9, ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c64], ymm9
	VMOVSHDUP ymm7, ymm7
	VBLENDPS ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37], 170
	VSUBPD ymm7, ymm7, ymm9
	VCMPGTPD ymm9, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm10, ymm9, ymm3
	VADDPD ymm7, ymm7, ymm10
	VMOVAPD   [rsp + 416], ymm7
	VANDPD ymm9, ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VXORPD ymm8, ymm8, ymm9
	VSUBPD ymm7, ymm8, ymm3
	VMOVAPD ymm8, [dword rcx + 128]
	VORPD ymm9, ymm8, ymm5
	VSUBPD ymm9, ymm9, ymm5
	VCMPLTPD ymm10, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VBLENDVPD ymm8, ymm8, ymm9, ymm10
	VANDPD ymm9, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm9, ymm9, ymm3
	VANDPD ymm8, ymm8, ymm2
	VBLENDVPD ymm10, ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c64], ymm10
	VMOVSHDUP ymm8, ymm8
	VBLENDPS ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37], 170
	VSUBPD ymm8, ymm8, ymm10
	VCMPGTPD ymm10, ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm11, ymm10, ymm3
	VADDPD ymm8, ymm8, ymm11
	VMOVAPD   [rsp + 448], ymm8
	VANDPD ymm10, ymm10,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VXORPD ymm9, ymm9, ymm10
	VSUBPD ymm8, ymm9, ymm3
	VMOVAPD ymm9, [dword rcx + 160]
	VORPD ymm10, ymm9, ymm5
	VSUBPD ymm10, ymm10, ymm5
	VCMPLTPD ymm11, ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VBLENDVPD ymm9, ymm9, ymm10, ymm11
	VANDPD ymm10, ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm10, ymm10, ymm3
	VANDPD ymm9, ymm9, ymm2
	VBLENDVPD ymm11, ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c64], ymm11
	VMOVSHDUP ymm9, ymm9
	VBLENDPS ymm9, ymm9,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37], 170
	VSUBPD ymm9, ymm9, ymm11
	VCMPGTPD ymm11, ymm10,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm12, ymm11, ymm3
	VADDPD ymm9, ymm9, ymm12
	VMOVAPD   [rsp + 480], ymm9
	VANDPD ymm11, ymm11,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VXORPD ymm10, ymm10, ymm11
	VSUBPD ymm9, ymm10, ymm3
	VMOVAPD ymm10, [dword rcx + 192]
	VORPD ymm11, ymm10, ymm5
	VSUBPD ymm11, ymm11, ymm5
	VCMPLTPD ymm12, ymm10,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VBLENDVPD ymm10, ymm10, ymm11, ymm12
	VANDPD ymm11, ymm10,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm11, ymm11, ymm3
	VANDPD ymm10, ymm10, ymm2
	VBLENDVPD ymm12, ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c64], ymm12
	VMOVSHDUP ymm10, ymm10
	VBLENDPS ymm10, ymm10,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37], 170
	VSUBPD ymm10, ymm10, ymm12
	VCMPGTPD ymm12, ymm11,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm13, ymm12, ymm3
	VADDPD ymm10, ymm10, ymm13
	VMOVAPD   [rsp + 512], ymm10
	VANDPD ymm12, ymm12,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VXORPD ymm11, ymm11, ymm12
	VSUBPD ymm10, ymm11, ymm3
	VMOVAPD   [rsp + 544], ymm10
	VMOVAPD ymm10, [dword rcx + 224]
	VORPD ymm11, ymm10, ymm5
	VSUBPD ymm11, ymm11, ymm5
	VCMPLTPD ymm5, ymm10,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VBLENDVPD ymm10, ymm10, ymm11, ymm5
	VANDPD ymm11, ymm10,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c39]
	VORPD ymm11, ymm11, ymm3
	VANDPD ymm2, ymm10, ymm2
	VBLENDVPD ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c64], ymm5
	VMOVSHDUP ymm2, ymm2
	VBLENDPS ymm2, ymm2,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c37], 170
	VSUBPD ymm2, ymm2, ymm4
	VCMPGTPD ymm4, ymm11,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c41]
	VANDPD ymm5, ymm4, ymm3
	VADDPD ymm2, ymm2, ymm5
	VMOVAPD   [rsp + 576], ymm2
	VANDPD ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c34]
	VXORPD ymm11, ymm11, ymm4
	VSUBPD ymm4, ymm11, ymm3
	VMOVAPD   [rsp + 608], ymm4
	VMOVAPS ymm4,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c42]
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c43]
	VMULPD ymm3, ymm4, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm4, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm4, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm4, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm4, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm4, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm4,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c44]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c45]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c46]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c47]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c48]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c49]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c50]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c51]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c52]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c53]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c54]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c55]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c56]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c57]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c58]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c59]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c60]
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm5
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm5
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm5
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14,   [rsp + 544]
	VADDPD ymm14, ymm14, ymm5
	VMULPD ymm4, ymm4,   [rsp + 608]
	VADDPD ymm4, ymm4, ymm5
	VMULPD ymm3, ymm3, ymm1
	VMULPD ymm3, ymm3, ymm1
	VADDPD ymm3, ymm3, ymm1
	VMULPD ymm2, ymm2, ymm0
	VMULPD ymm2, ymm2, ymm0
	VADDPD ymm2, ymm2, ymm0
	VMULPD ymm10, ymm10, ymm6
	VMULPD ymm10, ymm10, ymm6
	VADDPD ymm10, ymm10, ymm6
	VMULPD ymm11, ymm11, ymm7
	VMULPD ymm11, ymm11, ymm7
	VADDPD ymm11, ymm11, ymm7
	VMULPD ymm12, ymm12, ymm8
	VMULPD ymm12, ymm12, ymm8
	VADDPD ymm12, ymm12, ymm8
	VMULPD ymm13, ymm13, ymm9
	VMULPD ymm13, ymm13, ymm9
	VADDPD ymm13, ymm13, ymm9
	VMOVAPD ymm5,   [rsp + 544]
	VMULPD ymm14, ymm14, ymm5
	VMULPD ymm14, ymm14, ymm5
	VADDPD ymm14, ymm14, ymm5
	VMOVAPD ymm5,   [rsp + 608]
	VMULPD ymm4, ymm4, ymm5
	VMULPD ymm4, ymm4, ymm5
	VADDPD ymm4, ymm4, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c61]
	VMOVAPS ymm1,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c62]
	VMOVAPD ymm0,   [rsp + 320]
	VMULPD ymm6, ymm0, ymm5
	VADDPD ymm3, ymm3, ymm6
	VMULPD ymm0, ymm0, ymm1
	VADDPD ymm3, ymm3, ymm0
	VMOVAPD ymm0,   [rsp + 352]
	VMULPD ymm6, ymm0, ymm5
	VADDPD ymm2, ymm2, ymm6
	VMULPD ymm0, ymm0, ymm1
	VADDPD ymm2, ymm2, ymm0
	VMOVAPD ymm0,   [rsp + 384]
	VMULPD ymm6, ymm0, ymm5
	VADDPD ymm10, ymm10, ymm6
	VMULPD ymm0, ymm0, ymm1
	VADDPD ymm10, ymm10, ymm0
	VMOVAPD ymm0,   [rsp + 416]
	VMULPD ymm6, ymm0, ymm5
	VADDPD ymm11, ymm11, ymm6
	VMULPD ymm0, ymm0, ymm1
	VADDPD ymm11, ymm11, ymm0
	VMOVAPD ymm0,   [rsp + 448]
	VMULPD ymm6, ymm0, ymm5
	VADDPD ymm12, ymm12, ymm6
	VMULPD ymm0, ymm0, ymm1
	VADDPD ymm12, ymm12, ymm0
	VMOVAPD ymm0,   [rsp + 480]
	VMULPD ymm6, ymm0, ymm5
	VADDPD ymm13, ymm13, ymm6
	VMULPD ymm0, ymm0, ymm1
	VADDPD ymm13, ymm13, ymm0
	VMOVAPD ymm0,   [rsp + 512]
	VMULPD ymm6, ymm0, ymm5
	VADDPD ymm14, ymm14, ymm6
	VMULPD ymm0, ymm0, ymm1
	VADDPD ymm14, ymm14, ymm0
	VMOVAPD ymm0,   [rsp + 576]
	VMULPD ymm5, ymm0, ymm5
	VADDPD ymm4, ymm4, ymm5
	VMULPD ymm5, ymm0, ymm1
	VADDPD ymm4, ymm4, ymm5
	VXORPD ymm5, ymm5, ymm5
	VMOVAPD ymm1,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c35]
	VSUBPD ymm0, ymm5, ymm1
	VMOVAPD ymm6,  [rel _yepMath_Log_V64f_V64f_SandyBridge_constants.c65]
	VMOVAPD ymm7, [rcx]
	VCMPEQPD ymm8, ymm7, ymm5
	VBLENDVPD ymm3, ymm3, ymm0, ymm8
	VBLENDVPD ymm3, ymm3, ymm6, ymm7
	VCMPNLTPD ymm8, ymm7, ymm1
	VBLENDVPD ymm3, ymm3, ymm7, ymm8
	VMOVUPD [rdx], xmm3
	VEXTRACTF128 [byte rdx + 16], ymm3, 1
	VMOVAPD ymm3, [byte rcx + 32]
	VCMPEQPD ymm7, ymm3, ymm5
	VBLENDVPD ymm2, ymm2, ymm0, ymm7
	VBLENDVPD ymm2, ymm2, ymm6, ymm3
	VCMPNLTPD ymm7, ymm3, ymm1
	VBLENDVPD ymm2, ymm2, ymm3, ymm7
	VMOVUPD [byte rdx + 32], xmm2
	VEXTRACTF128 [byte rdx + 48], ymm2, 1
	VMOVAPD ymm3, [byte rcx + 64]
	VCMPEQPD ymm2, ymm3, ymm5
	VBLENDVPD ymm10, ymm10, ymm0, ymm2
	VBLENDVPD ymm10, ymm10, ymm6, ymm3
	VCMPNLTPD ymm2, ymm3, ymm1
	VBLENDVPD ymm10, ymm10, ymm3, ymm2
	VMOVUPD [byte rdx + 64], xmm10
	VEXTRACTF128 [byte rdx + 80], ymm10, 1
	VMOVAPD ymm3, [byte rcx + 96]
	VCMPEQPD ymm2, ymm3, ymm5
	VBLENDVPD ymm11, ymm11, ymm0, ymm2
	VBLENDVPD ymm11, ymm11, ymm6, ymm3
	VCMPNLTPD ymm2, ymm3, ymm1
	VBLENDVPD ymm11, ymm11, ymm3, ymm2
	VMOVUPD [byte rdx + 96], xmm11
	VEXTRACTF128 [byte rdx + 112], ymm11, 1
	VMOVAPD ymm3, [dword rcx + 128]
	VCMPEQPD ymm2, ymm3, ymm5
	VBLENDVPD ymm12, ymm12, ymm0, ymm2
	VBLENDVPD ymm12, ymm12, ymm6, ymm3
	VCMPNLTPD ymm2, ymm3, ymm1
	VBLENDVPD ymm12, ymm12, ymm3, ymm2
	VMOVUPD [dword rdx + 128], xmm12
	VEXTRACTF128 [dword rdx + 144], ymm12, 1
	VMOVAPD ymm3, [dword rcx + 160]
	VCMPEQPD ymm2, ymm3, ymm5
	VBLENDVPD ymm13, ymm13, ymm0, ymm2
	VBLENDVPD ymm13, ymm13, ymm6, ymm3
	VCMPNLTPD ymm2, ymm3, ymm1
	VBLENDVPD ymm13, ymm13, ymm3, ymm2
	VMOVUPD [dword rdx + 160], xmm13
	VEXTRACTF128 [dword rdx + 176], ymm13, 1
	VMOVAPD ymm3, [dword rcx + 192]
	VCMPEQPD ymm2, ymm3, ymm5
	VBLENDVPD ymm14, ymm14, ymm0, ymm2
	VBLENDVPD ymm14, ymm14, ymm6, ymm3
	VCMPNLTPD ymm2, ymm3, ymm1
	VBLENDVPD ymm14, ymm14, ymm3, ymm2
	VMOVUPD [dword rdx + 192], xmm14
	VEXTRACTF128 [dword rdx + 208], ymm14, 1
	VMOVAPD ymm3, [dword rcx + 224]
	VCMPEQPD ymm5, ymm3, ymm5
	VBLENDVPD ymm4, ymm4, ymm0, ymm5
	VBLENDVPD ymm4, ymm4, ymm6, ymm3
	VCMPNLTPD ymm5, ymm3, ymm1
	VBLENDVPD ymm4, ymm4, ymm3, ymm5
	VMOVUPD [dword rdx + 224], xmm4
	VEXTRACTF128 [dword rdx + 240], ymm4, 1
	JMP .process_batch_increment

section .rdata$n rdata align=32
_yepMath_Log_V64f_V64f_Bulldozer_constants:
	.c0: DQ 0x4330000000000000, 0x4330000000000000
	.c2: DQ 0x0000000000000432, 0x0000000000000432
	.c1: DQ 0x4330000000000000
	.c5: DQ 0x3FF6A09E667F3BCD
	.c7: DQ 0x3FF0000000000000
	.c8: DQ 0xBF9CC4EC078138E3
	.c3: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c6: DQ 0x0010000000000000, 0x0010000000000000
	.c27: DQ 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01
	.c9: DQ 0x3FB0266CD08DB2F2
	.c10: DQ 0xBFB1654764F478EC
	.c11: DQ 0x3FAEA17E14773369
	.c12: DQ 0xBFAEED2E2BB64B2E
	.c13: DQ 0x3FB0F23916A44515
	.c14: DQ 0xBFB25480A82633AF
	.c15: DQ 0x3FB3B4ED39194B87
	.c16: DQ 0xBFB554D5ACD502AB
	.c17: DQ 0x3FB745980F3FB889
	.c18: DQ 0xBFB9999C5BE751E3
	.c19: DQ 0x3FBC71C90DB06248
	.c20: DQ 0xBFBFFFFFFBD8606D
	.c21: DQ 0x3FC249248DAE4B2A
	.c22: DQ 0xBFC55555554A6A2B
	.c23: DQ 0x3FC9999999A43E4F
	.c24: DQ 0xBFD00000000013C7
	.c25: DQ 0x3FD5555555555103
	.c26: DQ 0xBFDFFFFFFFFFFFF2
	.c28: DQ 0x4338000000000000
	.c29: DQ 0x3C7ABC9E3B39803F
	.c30: DQ 0x3FE62E42FEFA39EF
	ALIGN 32
	.c31: DQ 0x7FF8000000000000, 0x7FF8000000000000
	.c32: DQ 0xFFF0000000000000, 0xFFF0000000000000
	.c33: DQ 0x7FF0000000000000, 0x7FF0000000000000
	.c36: DQ 0x4338000000000000, 0x4338000000000000
	.c34: DQ 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000
	.c35: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c37: DQ 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD
	.c38: DQ 0x0010000000000000, 0x0010000000000000, 0x0010000000000000, 0x0010000000000000
	.c39: DQ 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3
	.c40: DQ 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2
	.c41: DQ 0xBFB1654764F478EC, 0xBFB1654764F478EC, 0xBFB1654764F478EC, 0xBFB1654764F478EC
	.c42: DQ 0x3FAEA17E14773369, 0x3FAEA17E14773369, 0x3FAEA17E14773369, 0x3FAEA17E14773369
	.c43: DQ 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E
	.c44: DQ 0x3FB0F23916A44515, 0x3FB0F23916A44515, 0x3FB0F23916A44515, 0x3FB0F23916A44515
	.c45: DQ 0xBFB25480A82633AF, 0xBFB25480A82633AF, 0xBFB25480A82633AF, 0xBFB25480A82633AF
	.c46: DQ 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87
	.c47: DQ 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB
	.c48: DQ 0x3FB745980F3FB889, 0x3FB745980F3FB889, 0x3FB745980F3FB889, 0x3FB745980F3FB889
	.c49: DQ 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3
	.c50: DQ 0x3FBC71C90DB06248, 0x3FBC71C90DB06248, 0x3FBC71C90DB06248, 0x3FBC71C90DB06248
	.c51: DQ 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D
	.c52: DQ 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A
	.c53: DQ 0xBFC55555554A6A2B, 0xBFC55555554A6A2B, 0xBFC55555554A6A2B, 0xBFC55555554A6A2B
	.c54: DQ 0x3FC9999999A43E4F, 0x3FC9999999A43E4F, 0x3FC9999999A43E4F, 0x3FC9999999A43E4F
	.c55: DQ 0xBFD00000000013C7, 0xBFD00000000013C7, 0xBFD00000000013C7, 0xBFD00000000013C7
	.c56: DQ 0x3FD5555555555103, 0x3FD5555555555103, 0x3FD5555555555103, 0x3FD5555555555103
	.c57: DQ 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2
	.c58: DQ 0x3C7ABC9E3B39803F, 0x3C7ABC9E3B39803F, 0x3C7ABC9E3B39803F, 0x3C7ABC9E3B39803F
	.c59: DQ 0x3FE62E42FEFA39EF, 0x3FE62E42FEFA39EF
	ALIGN 32
	.c60: DQ 0x41F800003FF00000, 0x41F800003FF00000, 0x41F800003FF00000, 0x41F800003FF00000
	.c61: DQ 0x4330000000000000, 0x4330000000000000, 0x4330000000000000, 0x4330000000000000
	.c62: DQ 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000
	.c63: DQ 0x41F8000083100000, 0x41F8000083100000, 0x41F8000083100000, 0x41F8000083100000
	.c64: DQ 0x41F8000000000000, 0x41F8000000000000, 0x41F8000000000000, 0x41F8000000000000
	.c65: DQ 0x3FE62E42FEFA39EF, 0x3FE62E42FEFA39EF, 0x3FE62E42FEFA39EF, 0x3FE62E42FEFA39EF
	.c66: DQ 0x7FF8000000000000, 0x7FF8000000000000, 0x7FF8000000000000, 0x7FF8000000000000


section .text$n code align=16
global _yepMath_Log_V64f_V64f_Bulldozer
_yepMath_Log_V64f_V64f_Bulldozer:
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 544
	VMOVAPS [dword rsp + 384], xmm6
	VMOVAPS [dword rsp + 400], xmm7
	VMOVAPS [dword rsp + 416], xmm8
	VMOVAPS [dword rsp + 432], xmm9
	VMOVAPS [dword rsp + 448], xmm10
	VMOVAPS [dword rsp + 464], xmm11
	VMOVAPS [dword rsp + 480], xmm12
	VMOVAPS [dword rsp + 496], xmm13
	VMOVAPS [dword rsp + 512], xmm14
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm4, [rcx]
	VPSRLQ xmm5, xmm4, 52
	VORPS xmm3, xmm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c0]
	VSUBSD xmm3, xmm3, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c1]
	VPXOR xmm2, xmm2, xmm2
	VPCMPEQQ xmm2, xmm2, xmm5
	VPSRLQ xmm1, xmm3, 52
	VPSUBQ xmm1, xmm1,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c2]
	VPBLENDVB xmm4, xmm4, xmm3, xmm2
	VPAND xmm4, xmm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c3]
	VPOR xmm4, xmm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c4]
	VPAND xmm3, xmm1, xmm2
	VPOR xmm3, xmm3, xmm5
	VMOVSD xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c5]
	VCMPLTSD xmm5, xmm5, xmm4
	VPSUBQ xmm3, xmm3, xmm5
	VPAND xmm5, xmm5,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c6]
	VPXOR xmm4, xmm4, xmm5
	VSUBSD xmm5, xmm4, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c7]
	VMOVSD xmm4, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c8]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c9]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c10]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c11]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c12]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c13]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c14]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c15]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c16]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c17]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c19]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c20]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c21]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c22]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c23]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c24]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c25]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c26]
	VMULSD xmm4, xmm4, xmm5
	VFMADDSD xmm4, xmm4, xmm5, xmm5
	VPADDQ xmm3, xmm3,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c27]
	VSUBSD xmm3, xmm3, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c28]
	VMOVSD xmm5, [rcx]
	VFMADDSD xmm4, xmm3, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c29], xmm4
	VFMADDSD xmm4, xmm3, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c30], xmm4
	VBLENDVPD xmm4, xmm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c31], xmm5
	VPXOR xmm3, xmm3, xmm3
	VPCMPEQQ xmm3, xmm3, xmm5
	VBLENDVPD xmm4, xmm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c32], xmm3
	VCMPNLTSD xmm3, xmm5,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c33]
	VBLENDVPD xmm4, xmm4, xmm5, xmm3
	VMOVSD [rdx], xmm4
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB r8, 24
	JB .process_restore
	align 32
	.process_batch_fast:
	MOV rax, 4503599627370496
	MOV r10, 9214364837600034815
	VMOVAPD ymm4, [rcx]
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c34]
	VPSRLQ xmm3, xmm4, 52
	VEXTRACTF128 xmm2, ymm4, 1
	VPCMOV ymm4, ymm4, ymm5,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VMOVDQA xmm1,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c27]
	VPSRLQ xmm2, xmm2, 52
	VPADDQ xmm3, xmm3, xmm1
	VPADDQ xmm2, xmm2, xmm1
	VMOVAPD xmm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c36]
	VCMPGTPD ymm6, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VEXTRACTF128 xmm7, ymm6, 1
	VPSUBQ xmm3, xmm3, xmm6
	VPSUBQ xmm2, xmm2, xmm7
	VANDPD ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VSUBPD xmm3, xmm3, xmm0
	VSUBPD xmm2, xmm2, xmm0
	VXORPD ymm4, ymm4, ymm6
	VMOVAPD   [rsp], xmm3
	VSUBPD ymm4, ymm4, ymm5
	VMOVAPD   [rsp + 16], xmm2
	VMOVAPD ymm3, [byte rcx + 32]
	VPSRLQ xmm2, xmm3, 52
	VEXTRACTF128 xmm6, ymm3, 1
	VPCMOV ymm3, ymm3, ymm5,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VPSRLQ xmm6, xmm6, 52
	VPADDQ xmm2, xmm2, xmm1
	VPADDQ xmm6, xmm6, xmm1
	VCMPGTPD ymm7, ymm3,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VEXTRACTF128 xmm8, ymm7, 1
	VPSUBQ xmm2, xmm2, xmm7
	VPSUBQ xmm6, xmm6, xmm8
	VANDPD ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VSUBPD xmm2, xmm2, xmm0
	VSUBPD xmm6, xmm6, xmm0
	VXORPD ymm3, ymm3, ymm7
	VMOVAPD   [rsp + 32], xmm2
	VSUBPD ymm3, ymm3, ymm5
	VMOVAPD   [rsp + 48], xmm6
	VMOVAPD ymm2, [byte rcx + 64]
	VPSRLQ xmm6, xmm2, 52
	VEXTRACTF128 xmm7, ymm2, 1
	VPCMOV ymm2, ymm2, ymm5,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VPSRLQ xmm7, xmm7, 52
	VPADDQ xmm6, xmm6, xmm1
	VPADDQ xmm7, xmm7, xmm1
	VCMPGTPD ymm8, ymm2,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VEXTRACTF128 xmm9, ymm8, 1
	VPSUBQ xmm6, xmm6, xmm8
	VPSUBQ xmm7, xmm7, xmm9
	VANDPD ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VSUBPD xmm6, xmm6, xmm0
	VSUBPD xmm7, xmm7, xmm0
	VXORPD ymm2, ymm2, ymm8
	VMOVAPD   [rsp + 64], xmm6
	VSUBPD ymm2, ymm2, ymm5
	VMOVAPD   [rsp + 80], xmm7
	VMOVAPD ymm6, [byte rcx + 96]
	VPSRLQ xmm7, xmm6, 52
	VEXTRACTF128 xmm8, ymm6, 1
	VPCMOV ymm6, ymm6, ymm5,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VPSRLQ xmm8, xmm8, 52
	VPADDQ xmm7, xmm7, xmm1
	VPADDQ xmm8, xmm8, xmm1
	VCMPGTPD ymm9, ymm6,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VEXTRACTF128 xmm10, ymm9, 1
	VPSUBQ xmm7, xmm7, xmm9
	VPSUBQ xmm8, xmm8, xmm10
	VANDPD ymm9, ymm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VSUBPD xmm7, xmm7, xmm0
	VSUBPD xmm8, xmm8, xmm0
	VXORPD ymm6, ymm6, ymm9
	VMOVAPD   [rsp + 96], xmm7
	VSUBPD ymm6, ymm6, ymm5
	VMOVAPD   [rsp + 112], xmm8
	VMOVAPD ymm7, [dword rcx + 128]
	VPSRLQ xmm8, xmm7, 52
	VEXTRACTF128 xmm9, ymm7, 1
	VPCMOV ymm7, ymm7, ymm5,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VPSRLQ xmm9, xmm9, 52
	VPADDQ xmm8, xmm8, xmm1
	VPADDQ xmm9, xmm9, xmm1
	VCMPGTPD ymm10, ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VEXTRACTF128 xmm11, ymm10, 1
	VPSUBQ xmm8, xmm8, xmm10
	VPSUBQ xmm9, xmm9, xmm11
	VANDPD ymm10, ymm10,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VSUBPD xmm8, xmm8, xmm0
	VSUBPD xmm9, xmm9, xmm0
	VXORPD ymm7, ymm7, ymm10
	VMOVAPD   [rsp + 128], xmm8
	VSUBPD ymm7, ymm7, ymm5
	VMOVAPD   [rsp + 144], xmm9
	VMOVAPD ymm8, [dword rcx + 160]
	VPSRLQ xmm9, xmm8, 52
	VEXTRACTF128 xmm10, ymm8, 1
	VPCMOV ymm8, ymm8, ymm5,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VPSRLQ xmm10, xmm10, 52
	VPADDQ xmm9, xmm9, xmm1
	VPADDQ xmm10, xmm10, xmm1
	VCMPGTPD ymm1, ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VEXTRACTF128 xmm11, ymm1, 1
	VPSUBQ xmm9, xmm9, xmm1
	VPSUBQ xmm10, xmm10, xmm11
	VANDPD ymm1, ymm1,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VSUBPD xmm9, xmm9, xmm0
	VSUBPD xmm10, xmm10, xmm0
	VXORPD ymm8, ymm8, ymm1
	VMOVAPD   [rsp + 160], xmm9
	VSUBPD ymm5, ymm8, ymm5
	VMOVAPD   [rsp + 176], xmm10
	VMOVAPS ymm1,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c39]
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c40]
	VFMADDPD ymm8, ymm1, ymm4, ymm0
	MOV r11, [rcx]
	SUB r11, rax
	VFMADDPD ymm9, ymm1, ymm3, ymm0
	CMP r11, r10
	JA .process_batch_full
	VFMADDPD ymm10, ymm1, ymm2, ymm0
	MOV r11, [byte rcx + 8]
	SUB r11, rax
	VFMADDPD ymm11, ymm1, ymm6, ymm0
	CMP r11, r10
	JA .process_batch_full
	VFMADDPD ymm12, ymm1, ymm7, ymm0
	MOV r11, [byte rcx + 16]
	SUB r11, rax
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	CMP r11, r10
	JA .process_batch_full
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c41]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	MOV r11, [byte rcx + 24]
	SUB r11, rax
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	CMP r11, r10
	JA .process_batch_full
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	MOV r11, [byte rcx + 32]
	SUB r11, rax
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	CMP r11, r10
	JA .process_batch_full
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	MOV r11, [byte rcx + 40]
	SUB r11, rax
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	CMP r11, r10
	JA .process_batch_full
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c42]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c43]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c44]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c45]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c46]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c47]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c48]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c49]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c50]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c51]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c52]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c53]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c54]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c55]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c56]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c57]
	VFMADDPD ymm8, ymm8, ymm4, ymm0
	VFMADDPD ymm9, ymm9, ymm3, ymm0
	VFMADDPD ymm10, ymm10, ymm2, ymm0
	VFMADDPD ymm11, ymm11, ymm6, ymm0
	VFMADDPD ymm12, ymm12, ymm7, ymm0
	VFMADDPD ymm1, ymm1, ymm5, ymm0
	VMULPD ymm8, ymm8, ymm4
	VMULPD ymm9, ymm9, ymm3
	VMULPD ymm10, ymm10, ymm2
	VMULPD ymm11, ymm11, ymm6
	VMULPD ymm12, ymm12, ymm7
	VMULPD ymm1, ymm1, ymm5
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c58]
	VFMADDPD ymm8, ymm8, ymm4, ymm4
	VFMADDPD ymm9, ymm9, ymm3, ymm3
	VFMADDPD ymm10, ymm10, ymm2, ymm2
	VFMADDPD ymm11, ymm11, ymm6, ymm6
	VFMADDPD ymm12, ymm12, ymm7, ymm7
	VFMADDPD ymm1, ymm1, ymm5, ymm5
	VFMADDPD ymm8, ymm0,   [rsp], ymm8
	VFMADDPD ymm9, ymm0,   [rsp + 32], ymm9
	VFMADDPD ymm10, ymm0,   [rsp + 64], ymm10
	VFMADDPD ymm11, ymm0,   [rsp + 96], ymm11
	VFMADDPD ymm12, ymm0,   [rsp + 128], ymm12
	VFMADDPD ymm1, ymm0,   [rsp + 160], ymm1
	VMOVAPD xmm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c59]
	VEXTRACTF128 xmm5, ymm8, 1
	VFMADDPD xmm8, xmm4,   [rsp], xmm8
	VMOVUPD [rdx], xmm8
	VFMADDPD xmm5, xmm4,   [rsp + 16], xmm5
	VMOVUPD [byte rdx + 16], xmm5
	VEXTRACTF128 xmm5, ymm9, 1
	VFMADDPD xmm9, xmm4,   [rsp + 32], xmm9
	VMOVUPD [byte rdx + 32], xmm9
	VFMADDPD xmm5, xmm4,   [rsp + 48], xmm5
	VMOVUPD [byte rdx + 48], xmm5
	VEXTRACTF128 xmm5, ymm10, 1
	VFMADDPD xmm10, xmm4,   [rsp + 64], xmm10
	VMOVUPD [byte rdx + 64], xmm10
	VFMADDPD xmm5, xmm4,   [rsp + 80], xmm5
	VMOVUPD [byte rdx + 80], xmm5
	VEXTRACTF128 xmm5, ymm11, 1
	VFMADDPD xmm11, xmm4,   [rsp + 96], xmm11
	VMOVUPD [byte rdx + 96], xmm11
	VFMADDPD xmm5, xmm4,   [rsp + 112], xmm5
	VMOVUPD [byte rdx + 112], xmm5
	VEXTRACTF128 xmm5, ymm12, 1
	VFMADDPD xmm12, xmm4,   [rsp + 128], xmm12
	VMOVUPD [dword rdx + 128], xmm12
	VFMADDPD xmm5, xmm4,   [rsp + 144], xmm5
	VMOVUPD [dword rdx + 144], xmm5
	VEXTRACTF128 xmm5, ymm1, 1
	VFMADDPD xmm1, xmm4,   [rsp + 160], xmm1
	VMOVUPD [dword rdx + 160], xmm1
	VFMADDPD xmm5, xmm4,   [rsp + 176], xmm5
	VMOVUPD [dword rdx + 176], xmm5
	.process_batch_increment:
	ADD rcx, 192
	ADD rdx, 192
	SUB r8, 24
	JAE .process_batch_fast
	.process_restore:
	ADD r8, 24
	JZ .return_ok
	.process_single:
	VMOVSD xmm4, [rcx]
	VPSRLQ xmm5, xmm4, 52
	VORPS xmm3, xmm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c0]
	VSUBSD xmm3, xmm3, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c1]
	VPXOR xmm2, xmm2, xmm2
	VPCMPEQQ xmm2, xmm2, xmm5
	VPSRLQ xmm1, xmm3, 52
	VPSUBQ xmm1, xmm1,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c2]
	VPBLENDVB xmm4, xmm4, xmm3, xmm2
	VPAND xmm4, xmm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c3]
	VPOR xmm4, xmm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c4]
	VPAND xmm3, xmm1, xmm2
	VPOR xmm3, xmm3, xmm5
	VMOVSD xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c5]
	VCMPLTSD xmm5, xmm5, xmm4
	VPSUBQ xmm3, xmm3, xmm5
	VPAND xmm5, xmm5,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c6]
	VPXOR xmm4, xmm4, xmm5
	VSUBSD xmm5, xmm4, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c7]
	VMOVSD xmm4, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c8]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c9]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c10]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c11]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c12]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c13]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c14]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c15]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c16]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c17]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c19]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c20]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c21]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c22]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c23]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c24]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c25]
	VFMADDSD xmm4, xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c26]
	VMULSD xmm4, xmm4, xmm5
	VFMADDSD xmm4, xmm4, xmm5, xmm5
	VPADDQ xmm3, xmm3,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c27]
	VSUBSD xmm3, xmm3, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c28]
	VMOVSD xmm5, [rcx]
	VFMADDSD xmm4, xmm3, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c29], xmm4
	VFMADDSD xmm4, xmm3, [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c30], xmm4
	VBLENDVPD xmm4, xmm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c31], xmm5
	VPXOR xmm3, xmm3, xmm3
	VPCMPEQQ xmm3, xmm3, xmm5
	VBLENDVPD xmm4, xmm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c32], xmm3
	VCMPNLTSD xmm3, xmm5,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c33]
	VBLENDVPD xmm4, xmm4, xmm5, xmm3
	VMOVSD [rdx], xmm4
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	VMOVAPS xmm6, [dword rsp + 384]
	VMOVAPS xmm7, [dword rsp + 400]
	VMOVAPS xmm8, [dword rsp + 416]
	VMOVAPS xmm9, [dword rsp + 432]
	VMOVAPS xmm10, [dword rsp + 448]
	VMOVAPS xmm11, [dword rsp + 464]
	VMOVAPS xmm12, [dword rsp + 480]
	VMOVAPS xmm13, [dword rsp + 496]
	VMOVAPS xmm14, [dword rsp + 512]
	MOV rsp, [dword rsp + 544]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	VMOVAPS ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c60]
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c61]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c34]
	VMOVAPD ymm2, [rcx]
	VORPD ymm1, ymm2, ymm5
	VSUBPD ymm1, ymm1, ymm5
	VCMPLTPD ymm0, ymm2,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VBLENDVPD ymm2, ymm2, ymm1, ymm0
	VANDPD ymm1, ymm2,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VORPD ymm1, ymm1, ymm3
	VANDPD ymm2, ymm2,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c62]
	VBLENDVPD ymm0, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c63], ymm0
	VMOVSHDUP ymm2, ymm2
	VBLENDPS ymm2, ymm2,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c64], 170
	VSUBPD ymm2, ymm2, ymm0
	VMOVAPD ymm0, [byte rcx + 32]
	VORPD ymm6, ymm0, ymm5
	VSUBPD ymm6, ymm6, ymm5
	VCMPLTPD ymm7, ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VBLENDVPD ymm0, ymm0, ymm6, ymm7
	VANDPD ymm6, ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VORPD ymm6, ymm6, ymm3
	VANDPD ymm0, ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c62]
	VBLENDVPD ymm7, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c63], ymm7
	VMOVSHDUP ymm0, ymm0
	VBLENDPS ymm0, ymm0,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c64], 170
	VSUBPD ymm0, ymm0, ymm7
	VMOVAPD ymm7, [byte rcx + 64]
	VORPD ymm8, ymm7, ymm5
	VSUBPD ymm8, ymm8, ymm5
	VCMPLTPD ymm9, ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VBLENDVPD ymm7, ymm7, ymm8, ymm9
	VANDPD ymm8, ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VORPD ymm8, ymm8, ymm3
	VANDPD ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c62]
	VBLENDVPD ymm9, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c63], ymm9
	VMOVSHDUP ymm7, ymm7
	VBLENDPS ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c64], 170
	VSUBPD ymm7, ymm7, ymm9
	VMOVAPD ymm9, [byte rcx + 96]
	VORPD ymm10, ymm9, ymm5
	VSUBPD ymm10, ymm10, ymm5
	VCMPLTPD ymm11, ymm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VBLENDVPD ymm9, ymm9, ymm10, ymm11
	VANDPD ymm10, ymm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VORPD ymm10, ymm10, ymm3
	VANDPD ymm9, ymm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c62]
	VBLENDVPD ymm11, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c63], ymm11
	VMOVSHDUP ymm9, ymm9
	VBLENDPS ymm9, ymm9,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c64], 170
	VSUBPD ymm9, ymm9, ymm11
	VMOVAPD ymm11, [dword rcx + 128]
	VORPD ymm12, ymm11, ymm5
	VSUBPD ymm12, ymm12, ymm5
	VCMPLTPD ymm13, ymm11,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VBLENDVPD ymm11, ymm11, ymm12, ymm13
	VANDPD ymm12, ymm11,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VORPD ymm12, ymm12, ymm3
	VANDPD ymm11, ymm11,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c62]
	VBLENDVPD ymm13, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c63], ymm13
	VMOVSHDUP ymm11, ymm11
	VBLENDPS ymm11, ymm11,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c64], 170
	VSUBPD ymm11, ymm11, ymm13
	VMOVAPD ymm13, [dword rcx + 160]
	VORPD ymm14, ymm13, ymm5
	VSUBPD ymm14, ymm14, ymm5
	VCMPLTPD ymm5, ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VBLENDVPD ymm13, ymm13, ymm14, ymm5
	VANDPD ymm14, ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c35]
	VORPD ymm14, ymm14, ymm3
	VANDPD ymm13, ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c62]
	VBLENDVPD ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c63], ymm5
	VMOVSHDUP ymm13, ymm13
	VBLENDPS ymm13, ymm13,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c64], 170
	VSUBPD ymm13, ymm13, ymm4
	VCMPGTPD ymm4, ymm1,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VANDPD ymm5, ymm4, ymm3
	VADDPD ymm2, ymm2, ymm5
	VMOVAPD   [rsp + 192], xmm2
	VANDPD ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VEXTRACTF128   [rsp + 208], ymm2, 1
	VXORPD ymm1, ymm1, ymm4
	VSUBPD ymm5, ymm1, ymm3
	VCMPGTPD ymm4, ymm6,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VANDPD ymm2, ymm4, ymm3
	VADDPD ymm0, ymm0, ymm2
	VMOVAPD   [rsp + 224], xmm0
	VANDPD ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VEXTRACTF128   [rsp + 240], ymm0, 1
	VXORPD ymm6, ymm6, ymm4
	VSUBPD ymm2, ymm6, ymm3
	VCMPGTPD ymm4, ymm8,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VANDPD ymm1, ymm4, ymm3
	VADDPD ymm7, ymm7, ymm1
	VMOVAPD   [rsp + 256], xmm7
	VANDPD ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VEXTRACTF128   [rsp + 272], ymm7, 1
	VXORPD ymm8, ymm8, ymm4
	VSUBPD ymm1, ymm8, ymm3
	VCMPGTPD ymm4, ymm10,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VANDPD ymm0, ymm4, ymm3
	VADDPD ymm9, ymm9, ymm0
	VMOVAPD   [rsp + 288], xmm9
	VANDPD ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VEXTRACTF128   [rsp + 304], ymm9, 1
	VXORPD ymm10, ymm10, ymm4
	VSUBPD ymm0, ymm10, ymm3
	VCMPGTPD ymm4, ymm12,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VANDPD ymm6, ymm4, ymm3
	VADDPD ymm11, ymm11, ymm6
	VMOVAPD   [rsp + 320], xmm11
	VANDPD ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VEXTRACTF128   [rsp + 336], ymm11, 1
	VXORPD ymm12, ymm12, ymm4
	VSUBPD ymm6, ymm12, ymm3
	VCMPGTPD ymm4, ymm14,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c37]
	VANDPD ymm7, ymm4, ymm3
	VADDPD ymm13, ymm13, ymm7
	VMOVAPD   [rsp + 352], xmm13
	VANDPD ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c38]
	VEXTRACTF128   [rsp + 368], ymm13, 1
	VXORPD ymm14, ymm14, ymm4
	VSUBPD ymm4, ymm14, ymm3
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c39]
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c40]
	VFMADDPD ymm8, ymm3, ymm5, ymm7
	VFMADDPD ymm9, ymm3, ymm2, ymm7
	VFMADDPD ymm10, ymm3, ymm1, ymm7
	VFMADDPD ymm11, ymm3, ymm0, ymm7
	VFMADDPD ymm12, ymm3, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c41]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c42]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c43]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c44]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c45]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c46]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c47]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c48]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c49]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c50]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c51]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c52]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c53]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c54]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c55]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c56]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMOVAPS ymm7,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c57]
	VFMADDPD ymm8, ymm8, ymm5, ymm7
	VFMADDPD ymm9, ymm9, ymm2, ymm7
	VFMADDPD ymm10, ymm10, ymm1, ymm7
	VFMADDPD ymm11, ymm11, ymm0, ymm7
	VFMADDPD ymm12, ymm12, ymm6, ymm7
	VFMADDPD ymm3, ymm3, ymm4, ymm7
	VMULPD ymm8, ymm8, ymm5
	VFMADDPD ymm8, ymm8, ymm5, ymm5
	VMULPD ymm9, ymm9, ymm2
	VFMADDPD ymm9, ymm9, ymm2, ymm2
	VMULPD ymm10, ymm10, ymm1
	VFMADDPD ymm10, ymm10, ymm1, ymm1
	VMULPD ymm11, ymm11, ymm0
	VFMADDPD ymm11, ymm11, ymm0, ymm0
	VMULPD ymm12, ymm12, ymm6
	VFMADDPD ymm12, ymm12, ymm6, ymm6
	VMULPD ymm3, ymm3, ymm4
	VFMADDPD ymm3, ymm3, ymm4, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c58]
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c65]
	VMOVAPD ymm2,   [rsp + 192]
	VFMADDPD ymm8, ymm2, ymm4, ymm8
	VFMADDPD ymm8, ymm2, ymm5, ymm8
	VMOVAPD ymm2,   [rsp + 224]
	VFMADDPD ymm9, ymm2, ymm4, ymm9
	VFMADDPD ymm9, ymm2, ymm5, ymm9
	VMOVAPD ymm2,   [rsp + 256]
	VFMADDPD ymm10, ymm2, ymm4, ymm10
	VFMADDPD ymm10, ymm2, ymm5, ymm10
	VMOVAPD ymm2,   [rsp + 288]
	VFMADDPD ymm11, ymm2, ymm4, ymm11
	VFMADDPD ymm11, ymm2, ymm5, ymm11
	VMOVAPD ymm2,   [rsp + 320]
	VFMADDPD ymm12, ymm2, ymm4, ymm12
	VFMADDPD ymm12, ymm2, ymm5, ymm12
	VMOVAPD ymm2,   [rsp + 352]
	VFMADDPD ymm3, ymm2, ymm4, ymm3
	VFMADDPD ymm3, ymm2, ymm5, ymm3
	VXORPD ymm4, ymm4, ymm4
	VMOVAPD ymm5,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c62]
	VSUBPD ymm2, ymm4, ymm5
	VMOVAPD ymm1,  [rel _yepMath_Log_V64f_V64f_Bulldozer_constants.c66]
	VMOVAPD ymm0, [rcx]
	VCMPEQPD ymm6, ymm0, ymm4
	VBLENDVPD ymm8, ymm8, ymm2, ymm6
	VBLENDVPD ymm8, ymm8, ymm1, ymm0
	VCMPNLTPD ymm6, ymm0, ymm5
	VBLENDVPD ymm8, ymm8, ymm0, ymm6
	VMOVUPD [rdx], xmm8
	VEXTRACTF128 [byte rdx + 16], ymm8, 1
	VMOVAPD ymm0, [byte rcx + 32]
	VCMPEQPD ymm6, ymm0, ymm4
	VBLENDVPD ymm9, ymm9, ymm2, ymm6
	VBLENDVPD ymm9, ymm9, ymm1, ymm0
	VCMPNLTPD ymm6, ymm0, ymm5
	VBLENDVPD ymm9, ymm9, ymm0, ymm6
	VMOVUPD [byte rdx + 32], xmm9
	VEXTRACTF128 [byte rdx + 48], ymm9, 1
	VMOVAPD ymm0, [byte rcx + 64]
	VCMPEQPD ymm6, ymm0, ymm4
	VBLENDVPD ymm10, ymm10, ymm2, ymm6
	VBLENDVPD ymm10, ymm10, ymm1, ymm0
	VCMPNLTPD ymm6, ymm0, ymm5
	VBLENDVPD ymm10, ymm10, ymm0, ymm6
	VMOVUPD [byte rdx + 64], xmm10
	VEXTRACTF128 [byte rdx + 80], ymm10, 1
	VMOVAPD ymm0, [byte rcx + 96]
	VCMPEQPD ymm6, ymm0, ymm4
	VBLENDVPD ymm11, ymm11, ymm2, ymm6
	VBLENDVPD ymm11, ymm11, ymm1, ymm0
	VCMPNLTPD ymm6, ymm0, ymm5
	VBLENDVPD ymm11, ymm11, ymm0, ymm6
	VMOVUPD [byte rdx + 96], xmm11
	VEXTRACTF128 [byte rdx + 112], ymm11, 1
	VMOVAPD ymm0, [dword rcx + 128]
	VCMPEQPD ymm6, ymm0, ymm4
	VBLENDVPD ymm12, ymm12, ymm2, ymm6
	VBLENDVPD ymm12, ymm12, ymm1, ymm0
	VCMPNLTPD ymm6, ymm0, ymm5
	VBLENDVPD ymm12, ymm12, ymm0, ymm6
	VMOVUPD [dword rdx + 128], xmm12
	VEXTRACTF128 [dword rdx + 144], ymm12, 1
	VMOVAPD ymm0, [dword rcx + 160]
	VCMPEQPD ymm4, ymm0, ymm4
	VBLENDVPD ymm3, ymm3, ymm2, ymm4
	VBLENDVPD ymm3, ymm3, ymm1, ymm0
	VCMPNLTPD ymm4, ymm0, ymm5
	VBLENDVPD ymm3, ymm3, ymm0, ymm4
	VMOVUPD [dword rdx + 160], xmm3
	VEXTRACTF128 [dword rdx + 176], ymm3, 1
	JMP .process_batch_increment

section .rdata$h rdata align=32
_yepMath_Log_V64f_V64f_Haswell_constants:
	.c0: DQ 0x4330000000000000, 0x4330000000000000
	.c2: DQ 0x0000000000000432, 0x0000000000000432
	.c1: DQ 0x4330000000000000
	.c5: DQ 0x3FF6A09E667F3BCD
	.c7: DQ 0x3FF0000000000000
	.c8: DQ 0xBF9CC4EC078138E3
	.c3: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c4: DQ 0x3FF0000000000000, 0x3FF0000000000000
	.c6: DQ 0x0010000000000000, 0x0010000000000000
	.c27: DQ 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01
	.c9: DQ 0x3FB0266CD08DB2F2
	.c10: DQ 0xBFB1654764F478EC
	.c11: DQ 0x3FAEA17E14773369
	.c12: DQ 0xBFAEED2E2BB64B2E
	.c13: DQ 0x3FB0F23916A44515
	.c14: DQ 0xBFB25480A82633AF
	.c15: DQ 0x3FB3B4ED39194B87
	.c16: DQ 0xBFB554D5ACD502AB
	.c17: DQ 0x3FB745980F3FB889
	.c18: DQ 0xBFB9999C5BE751E3
	.c19: DQ 0x3FBC71C90DB06248
	.c20: DQ 0xBFBFFFFFFBD8606D
	.c21: DQ 0x3FC249248DAE4B2A
	.c22: DQ 0xBFC55555554A6A2B
	.c23: DQ 0x3FC9999999A43E4F
	.c24: DQ 0xBFD00000000013C7
	.c25: DQ 0x3FD5555555555103
	.c26: DQ 0xBFDFFFFFFFFFFFF2
	.c28: DQ 0x4338000000000000
	.c29: DQ 0x3C7ABC9E3B39803F
	.c30: DQ 0x3FE62E42FEFA39EF
	ALIGN 32
	.c31: DQ 0x7FF8000000000000, 0x7FF8000000000000
	.c32: DQ 0xFFF0000000000000, 0xFFF0000000000000
	.c33: DQ 0x7FF0000000000000, 0x7FF0000000000000
	ALIGN 32
	.c34: DQ 0x0010000000000000, 0x0010000000000000, 0x0010000000000000, 0x0010000000000000
	.c35: DQ 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000
	.c36: DQ 0x7FEFFFFFFFFFFFFF, 0x7FEFFFFFFFFFFFFF, 0x7FEFFFFFFFFFFFFF, 0x7FEFFFFFFFFFFFFF
	.c37: DQ 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF, 0x000FFFFFFFFFFFFF
	.c38: DQ 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01, 0x4337FFFFFFFFFC01
	.c39: DQ 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD, 0x3FF6A09E667F3BCD
	.c40: DQ 0x4338000000000000, 0x4338000000000000, 0x4338000000000000, 0x4338000000000000
	.c41: DQ 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3, 0xBF9CC4EC078138E3
	.c42: DQ 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2, 0x3FB0266CD08DB2F2
	.c43: DQ 0xBFB1654764F478EC, 0xBFB1654764F478EC, 0xBFB1654764F478EC, 0xBFB1654764F478EC
	.c44: DQ 0x3FAEA17E14773369, 0x3FAEA17E14773369, 0x3FAEA17E14773369, 0x3FAEA17E14773369
	.c45: DQ 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E, 0xBFAEED2E2BB64B2E
	.c46: DQ 0x3FB0F23916A44515, 0x3FB0F23916A44515, 0x3FB0F23916A44515, 0x3FB0F23916A44515
	.c47: DQ 0xBFB25480A82633AF, 0xBFB25480A82633AF, 0xBFB25480A82633AF, 0xBFB25480A82633AF
	.c48: DQ 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87, 0x3FB3B4ED39194B87
	.c49: DQ 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB, 0xBFB554D5ACD502AB
	.c50: DQ 0x3FB745980F3FB889, 0x3FB745980F3FB889, 0x3FB745980F3FB889, 0x3FB745980F3FB889
	.c51: DQ 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3, 0xBFB9999C5BE751E3
	.c52: DQ 0x3FBC71C90DB06248, 0x3FBC71C90DB06248, 0x3FBC71C90DB06248, 0x3FBC71C90DB06248
	.c53: DQ 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D, 0xBFBFFFFFFBD8606D
	.c54: DQ 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A, 0x3FC249248DAE4B2A
	.c55: DQ 0xBFC55555554A6A2B, 0xBFC55555554A6A2B, 0xBFC55555554A6A2B, 0xBFC55555554A6A2B
	.c56: DQ 0x3FC9999999A43E4F, 0x3FC9999999A43E4F, 0x3FC9999999A43E4F, 0x3FC9999999A43E4F
	.c57: DQ 0xBFD00000000013C7, 0xBFD00000000013C7, 0xBFD00000000013C7, 0xBFD00000000013C7
	.c58: DQ 0x3FD5555555555103, 0x3FD5555555555103, 0x3FD5555555555103, 0x3FD5555555555103
	.c59: DQ 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2, 0xBFDFFFFFFFFFFFF2
	.c60: DQ 0x3C7ABC9E3B39803F, 0x3C7ABC9E3B39803F, 0x3C7ABC9E3B39803F, 0x3C7ABC9E3B39803F
	.c61: DQ 0x3FE62E42FEFA39EF, 0x3FE62E42FEFA39EF, 0x3FE62E42FEFA39EF, 0x3FE62E42FEFA39EF
	.c62: DQ 0x4330000000000000, 0x4330000000000000, 0x4330000000000000, 0x4330000000000000
	.c63: DQ 0x0000000000000432, 0x0000000000000432, 0x0000000000000432, 0x0000000000000432
	.c64: DQ 0x7FF8000000000000, 0x7FF8000000000000, 0x7FF8000000000000, 0x7FF8000000000000
	.c65: DQ 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000
	.c66: DQ 0xFFF0000000000000, 0xFFF0000000000000, 0xFFF0000000000000, 0xFFF0000000000000


section .text$h code align=16
global _yepMath_Log_V64f_V64f_Haswell
_yepMath_Log_V64f_V64f_Haswell:
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 1120
	VMOVAPS [dword rsp + 960], xmm6
	VMOVAPS [dword rsp + 976], xmm7
	VMOVAPS [dword rsp + 992], xmm8
	VMOVAPS [dword rsp + 1008], xmm9
	VMOVAPS [dword rsp + 1024], xmm10
	VMOVAPS [dword rsp + 1040], xmm11
	VMOVAPS [dword rsp + 1056], xmm12
	VMOVAPS [dword rsp + 1072], xmm13
	VMOVAPS [dword rsp + 1088], xmm14
	VMOVAPS [dword rsp + 1104], xmm15
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm4, [rcx]
	VPSRLQ xmm5, xmm4, 52
	VORPS xmm3, xmm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c0]
	VSUBSD xmm3, xmm3, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c1]
	VPXOR xmm2, xmm2, xmm2
	VPCMPEQQ xmm2, xmm2, xmm5
	VPSRLQ xmm1, xmm3, 52
	VPSUBQ xmm1, xmm1,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c2]
	VPBLENDVB xmm4, xmm4, xmm3, xmm2
	VPAND xmm4, xmm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c3]
	VPOR xmm4, xmm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c4]
	VPAND xmm3, xmm1, xmm2
	VPOR xmm3, xmm3, xmm5
	VMOVSD xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c5]
	VCMPLTSD xmm5, xmm5, xmm4
	VPSUBQ xmm3, xmm3, xmm5
	VPAND xmm5, xmm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c6]
	VPXOR xmm4, xmm4, xmm5
	VSUBSD xmm5, xmm4, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c7]
	VMOVSD xmm4, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c8]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c9]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c10]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c11]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c12]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c13]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c14]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c15]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c16]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c17]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c18]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c19]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c20]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c21]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c22]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c23]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c24]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c25]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c26]
	VMULSD xmm4, xmm4, xmm5
	VFMADD213SD xmm4, xmm5, xmm5
	VPADDQ xmm3, xmm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c27]
	VSUBSD xmm3, xmm3, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c28]
	VMOVSD xmm5, [rcx]
	VMOVAPD xmm2, xmm3
	VFMADD132SD xmm2, xmm4, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c29]
	VFMADD231SD xmm2, xmm3, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c30]
	VBLENDVPD xmm2, xmm2,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c31], xmm5
	VPXOR xmm4, xmm4, xmm4
	VPCMPEQQ xmm4, xmm4, xmm5
	VBLENDVPD xmm2, xmm2,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c32], xmm4
	VCMPNLTSD xmm4, xmm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c33]
	VBLENDVPD xmm2, xmm2, xmm5, xmm4
	VMOVSD [rdx], xmm2
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB r8, 40
	JB .process_restore
	align 32
	.process_batch_fast:
	VMOVAPD ymm4, [rcx]
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VCMPLTPD ymm3, ymm4, ymm5
	VMOVAPS ymm2,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c35]
	VPSRLQ ymm1, ymm4, 52
	VCMPGTPD ymm0, ymm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm4, ymm4, ymm2
	VORPD ymm3, ymm3, ymm0
	VMOVDQA ymm0,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c38]
	VPADDQ ymm1, ymm1, ymm0
	VCMPGTPD ymm6, ymm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm1, ymm1, ymm6
	VTESTPD ymm3, ymm3
	JNZ .process_batch_full
	VANDPD ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c40]
	VSUBPD ymm1, ymm1, ymm3
	VXORPD ymm4, ymm4, ymm6
	VMOVAPD   [rsp], ymm1
	VFMSUB213PD ymm4, ymm2, ymm2
	VMOVAPD ymm1, [byte rcx + 32]
	VCMPLTPD ymm6, ymm1, ymm5
	VPSRLQ ymm7, ymm1, 52
	VCMPGTPD ymm8, ymm1,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm1, ymm1,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm1, ymm1, ymm2
	VORPD ymm6, ymm6, ymm8
	VPADDQ ymm7, ymm7, ymm0
	VCMPGTPD ymm8, ymm1,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm7, ymm7, ymm8
	VTESTPD ymm6, ymm6
	JNZ .process_batch_full
	VANDPD ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm7, ymm7, ymm3
	VXORPD ymm1, ymm1, ymm8
	VMOVAPD   [rsp + 32], ymm7
	VFMSUB213PD ymm1, ymm2, ymm2
	VMOVAPD   [rsp + 64], ymm1
	VMOVAPD ymm6, [byte rcx + 64]
	VCMPLTPD ymm7, ymm6, ymm5
	VPSRLQ ymm8, ymm6, 52
	VCMPGTPD ymm9, ymm6,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm6, ymm6, ymm2
	VORPD ymm7, ymm7, ymm9
	VPADDQ ymm8, ymm8, ymm0
	VCMPGTPD ymm9, ymm6,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm8, ymm8, ymm9
	VTESTPD ymm7, ymm7
	JNZ .process_batch_full
	VANDPD ymm9, ymm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm8, ymm8, ymm3
	VXORPD ymm6, ymm6, ymm9
	VMOVAPD   [rsp + 96], ymm8
	VFMSUB213PD ymm6, ymm2, ymm2
	VMOVAPD ymm7, [byte rcx + 96]
	VCMPLTPD ymm8, ymm7, ymm5
	VPSRLQ ymm9, ymm7, 52
	VCMPGTPD ymm10, ymm7,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm7, ymm7, ymm2
	VORPD ymm8, ymm8, ymm10
	VPADDQ ymm9, ymm9, ymm0
	VCMPGTPD ymm10, ymm7,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm9, ymm9, ymm10
	VTESTPD ymm8, ymm8
	JNZ .process_batch_full
	VANDPD ymm10, ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm9, ymm9, ymm3
	VXORPD ymm7, ymm7, ymm10
	VMOVAPD   [rsp + 128], ymm9
	VFMSUB213PD ymm7, ymm2, ymm2
	VMOVAPD   [rsp + 160], ymm7
	VMOVAPD ymm8, [dword rcx + 128]
	VCMPLTPD ymm9, ymm8, ymm5
	VPSRLQ ymm10, ymm8, 52
	VCMPGTPD ymm11, ymm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm8, ymm8, ymm2
	VORPD ymm9, ymm9, ymm11
	VPADDQ ymm10, ymm10, ymm0
	VCMPGTPD ymm11, ymm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm10, ymm10, ymm11
	VTESTPD ymm9, ymm9
	JNZ .process_batch_full
	VANDPD ymm11, ymm11,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm10, ymm10, ymm3
	VXORPD ymm8, ymm8, ymm11
	VMOVAPD   [rsp + 192], ymm10
	VFMSUB213PD ymm8, ymm2, ymm2
	VMOVAPD ymm9, [dword rcx + 160]
	VCMPLTPD ymm10, ymm9, ymm5
	VPSRLQ ymm11, ymm9, 52
	VCMPGTPD ymm12, ymm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm9, ymm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm9, ymm9, ymm2
	VORPD ymm10, ymm10, ymm12
	VPADDQ ymm11, ymm11, ymm0
	VCMPGTPD ymm12, ymm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm11, ymm11, ymm12
	VTESTPD ymm10, ymm10
	JNZ .process_batch_full
	VANDPD ymm12, ymm12,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm11, ymm11, ymm3
	VXORPD ymm9, ymm9, ymm12
	VMOVAPD   [rsp + 224], ymm11
	VFMSUB213PD ymm9, ymm2, ymm2
	VMOVAPD   [rsp + 256], ymm9
	VMOVAPD ymm10, [dword rcx + 192]
	VCMPLTPD ymm11, ymm10, ymm5
	VPSRLQ ymm12, ymm10, 52
	VCMPGTPD ymm13, ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm10, ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm10, ymm10, ymm2
	VORPD ymm11, ymm11, ymm13
	VPADDQ ymm12, ymm12, ymm0
	VCMPGTPD ymm13, ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm12, ymm12, ymm13
	VTESTPD ymm11, ymm11
	JNZ .process_batch_full
	VANDPD ymm13, ymm13,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm12, ymm12, ymm3
	VXORPD ymm10, ymm10, ymm13
	VMOVAPD   [rsp + 288], ymm12
	VFMSUB213PD ymm10, ymm2, ymm2
	VMOVAPD ymm11, [dword rcx + 224]
	VCMPLTPD ymm12, ymm11, ymm5
	VPSRLQ ymm13, ymm11, 52
	VCMPGTPD ymm14, ymm11,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm11, ymm11,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm11, ymm11, ymm2
	VORPD ymm12, ymm12, ymm14
	VPADDQ ymm13, ymm13, ymm0
	VCMPGTPD ymm14, ymm11,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm13, ymm13, ymm14
	VTESTPD ymm12, ymm12
	JNZ .process_batch_full
	VANDPD ymm14, ymm14,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm13, ymm13, ymm3
	VXORPD ymm11, ymm11, ymm14
	VMOVAPD   [rsp + 320], ymm13
	VFMSUB213PD ymm11, ymm2, ymm2
	VMOVAPD   [rsp + 352], ymm11
	VMOVAPD ymm12, [dword rcx + 256]
	VCMPLTPD ymm13, ymm12, ymm5
	VPSRLQ ymm14, ymm12, 52
	VCMPGTPD ymm15, ymm12,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm12, ymm12,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm12, ymm12, ymm2
	VORPD ymm13, ymm13, ymm15
	VPADDQ ymm14, ymm14, ymm0
	VCMPGTPD ymm15, ymm12,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm14, ymm14, ymm15
	VTESTPD ymm13, ymm13
	JNZ .process_batch_full
	VANDPD ymm15, ymm15,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm14, ymm14, ymm3
	VXORPD ymm12, ymm12, ymm15
	VMOVAPD   [rsp + 384], ymm14
	VFMSUB213PD ymm12, ymm2, ymm2
	VMOVAPD ymm13, [dword rcx + 288]
	VCMPLTPD ymm5, ymm13, ymm5
	VPSRLQ ymm14, ymm13, 52
	VCMPGTPD ymm15, ymm13,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c36]
	VPAND ymm13, ymm13,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm13, ymm13, ymm2
	VORPD ymm5, ymm5, ymm15
	VPADDQ ymm14, ymm14, ymm0
	VCMPGTPD ymm0, ymm13,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VPSUBQ ymm14, ymm14, ymm0
	VTESTPD ymm5, ymm5
	JNZ .process_batch_full
	VANDPD ymm0, ymm0,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VSUBPD ymm14, ymm14, ymm3
	VXORPD ymm13, ymm13, ymm0
	VMOVAPD   [rsp + 416], ymm14
	VFMSUB213PD ymm13, ymm2, ymm2
	VMOVAPD   [rsp + 448], ymm13
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c41]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c42]
	VMOVAPD ymm2, ymm5
	VFMADD132PD ymm2, ymm3, ymm4
	VMOVAPD ymm0, ymm5
	VFMADD132PD ymm0, ymm3, ymm1
	VMOVAPD ymm1, ymm5
	VFMADD132PD ymm1, ymm3, ymm6
	VMOVAPD ymm13, ymm5
	VFMADD132PD ymm13, ymm3, ymm7
	VMOVAPD ymm7, ymm5
	VFMADD132PD ymm7, ymm3, ymm8
	VMOVAPD ymm14, ymm5
	VFMADD132PD ymm14, ymm3, ymm9
	VMOVAPD ymm9, ymm5
	VFMADD132PD ymm9, ymm3, ymm10
	VMOVAPD ymm15, ymm5
	VFMADD132PD ymm15, ymm3, ymm11
	VMOVAPD ymm11, ymm5
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c43]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c44]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c45]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c46]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c47]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c48]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c49]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c50]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c51]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c52]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c53]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c54]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c55]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c56]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c57]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c58]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c59]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm0, ymm3,   [rsp + 64]
	VFMADD132PD ymm1, ymm3, ymm6
	VFMADD132PD ymm13, ymm3,   [rsp + 160]
	VFMADD132PD ymm7, ymm3, ymm8
	VFMADD132PD ymm14, ymm3,   [rsp + 256]
	VFMADD132PD ymm9, ymm3, ymm10
	VFMADD132PD ymm15, ymm3,   [rsp + 352]
	VFMADD132PD ymm11, ymm3, ymm12
	VFMADD132PD ymm5, ymm3,   [rsp + 448]
	VMULPD ymm2, ymm2, ymm4
	VFMADD132PD ymm2, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 64]
	VMULPD ymm0, ymm0, ymm4
	VFMADD132PD ymm0, ymm4, ymm4
	VMULPD ymm1, ymm1, ymm6
	VFMADD132PD ymm1, ymm6, ymm6
	VMOVAPD ymm4,   [rsp + 160]
	VMULPD ymm13, ymm13, ymm4
	VFMADD132PD ymm13, ymm4, ymm4
	VMULPD ymm7, ymm7, ymm8
	VFMADD132PD ymm7, ymm8, ymm8
	VMOVAPD ymm4,   [rsp + 256]
	VMULPD ymm14, ymm14, ymm4
	VFMADD132PD ymm14, ymm4, ymm4
	VMULPD ymm9, ymm9, ymm10
	VFMADD132PD ymm9, ymm10, ymm10
	VMOVAPD ymm4,   [rsp + 352]
	VMULPD ymm15, ymm15, ymm4
	VFMADD132PD ymm15, ymm4, ymm4
	VMULPD ymm11, ymm11, ymm12
	VFMADD132PD ymm11, ymm12, ymm12
	VMOVAPD ymm4,   [rsp + 448]
	VMULPD ymm5, ymm5, ymm4
	VFMADD132PD ymm5, ymm4, ymm4
	VMOVAPD ymm4,   [rsp]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c60]
	VFMADD231PD ymm2, ymm3, ymm4
	VMOVAPS ymm6,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c61]
	VFMADD231PD ymm2, ymm6, ymm4
	VMOVUPD [rdx], ymm2
	VMOVAPD ymm4,   [rsp + 32]
	VFMADD231PD ymm0, ymm3, ymm4
	VFMADD231PD ymm0, ymm6, ymm4
	VMOVUPD [byte rdx + 32], ymm0
	VMOVAPD ymm4,   [rsp + 96]
	VFMADD231PD ymm1, ymm3, ymm4
	VFMADD231PD ymm1, ymm6, ymm4
	VMOVUPD [byte rdx + 64], ymm1
	VMOVAPD ymm4,   [rsp + 128]
	VFMADD231PD ymm13, ymm3, ymm4
	VFMADD231PD ymm13, ymm6, ymm4
	VMOVUPD [byte rdx + 96], ymm13
	VMOVAPD ymm4,   [rsp + 192]
	VFMADD231PD ymm7, ymm3, ymm4
	VFMADD231PD ymm7, ymm6, ymm4
	VMOVUPD [dword rdx + 128], ymm7
	VMOVAPD ymm4,   [rsp + 224]
	VFMADD231PD ymm14, ymm3, ymm4
	VFMADD231PD ymm14, ymm6, ymm4
	VMOVUPD [dword rdx + 160], ymm14
	VMOVAPD ymm4,   [rsp + 288]
	VFMADD231PD ymm9, ymm3, ymm4
	VFMADD231PD ymm9, ymm6, ymm4
	VMOVUPD [dword rdx + 192], ymm9
	VMOVAPD ymm4,   [rsp + 320]
	VFMADD231PD ymm15, ymm3, ymm4
	VFMADD231PD ymm15, ymm6, ymm4
	VMOVUPD [dword rdx + 224], ymm15
	VMOVAPD ymm4,   [rsp + 384]
	VFMADD231PD ymm11, ymm3, ymm4
	VFMADD231PD ymm11, ymm6, ymm4
	VMOVUPD [dword rdx + 256], ymm11
	VMOVAPD ymm4,   [rsp + 416]
	VFMADD231PD ymm5, ymm3, ymm4
	VFMADD231PD ymm5, ymm6, ymm4
	VMOVUPD [dword rdx + 288], ymm5
	.process_batch_increment:
	ADD rcx, 320
	ADD rdx, 320
	SUB r8, 40
	JAE .process_batch_fast
	.process_restore:
	ADD r8, 40
	JZ .return_ok
	.process_single:
	VMOVSD xmm4, [rcx]
	VPSRLQ xmm5, xmm4, 52
	VORPS xmm3, xmm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c0]
	VSUBSD xmm3, xmm3, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c1]
	VPXOR xmm2, xmm2, xmm2
	VPCMPEQQ xmm2, xmm2, xmm5
	VPSRLQ xmm1, xmm3, 52
	VPSUBQ xmm1, xmm1,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c2]
	VPBLENDVB xmm4, xmm4, xmm3, xmm2
	VPAND xmm4, xmm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c3]
	VPOR xmm4, xmm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c4]
	VPAND xmm3, xmm1, xmm2
	VPOR xmm3, xmm3, xmm5
	VMOVSD xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c5]
	VCMPLTSD xmm5, xmm5, xmm4
	VPSUBQ xmm3, xmm3, xmm5
	VPAND xmm5, xmm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c6]
	VPXOR xmm4, xmm4, xmm5
	VSUBSD xmm5, xmm4, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c7]
	VMOVSD xmm4, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c8]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c9]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c10]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c11]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c12]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c13]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c14]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c15]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c16]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c17]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c18]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c19]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c20]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c21]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c22]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c23]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c24]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c25]
	VFMADD213SD xmm4, xmm5, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c26]
	VMULSD xmm4, xmm4, xmm5
	VFMADD213SD xmm4, xmm5, xmm5
	VPADDQ xmm3, xmm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c27]
	VSUBSD xmm3, xmm3, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c28]
	VMOVSD xmm5, [rcx]
	VMOVAPD xmm2, xmm3
	VFMADD132SD xmm2, xmm4, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c29]
	VFMADD231SD xmm2, xmm3, [rel _yepMath_Log_V64f_V64f_Haswell_constants.c30]
	VBLENDVPD xmm2, xmm2,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c31], xmm5
	VPXOR xmm4, xmm4, xmm4
	VPCMPEQQ xmm4, xmm4, xmm5
	VBLENDVPD xmm2, xmm2,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c32], xmm4
	VCMPNLTSD xmm4, xmm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c33]
	VBLENDVPD xmm2, xmm2, xmm5, xmm4
	VMOVSD [rdx], xmm2
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	VMOVAPS xmm6, [dword rsp + 960]
	VMOVAPS xmm7, [dword rsp + 976]
	VMOVAPS xmm8, [dword rsp + 992]
	VMOVAPS xmm9, [dword rsp + 1008]
	VMOVAPS xmm10, [dword rsp + 1024]
	VMOVAPS xmm11, [dword rsp + 1040]
	VMOVAPS xmm12, [dword rsp + 1056]
	VMOVAPS xmm13, [dword rsp + 1072]
	VMOVAPS xmm14, [dword rsp + 1088]
	VMOVAPS xmm15, [dword rsp + 1104]
	MOV rsp, [dword rsp + 1120]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
	align 16
	.process_batch_full:
	VMOVAPS ymm4, [rcx]
	VPSRLQ ymm5, ymm4, 52
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c62]
	VORPS ymm2, ymm4, ymm3
	VSUBPD ymm2, ymm2, ymm3
	VPXOR xmm1, xmm1, xmm1
	VPCMPEQQ ymm1, ymm1, ymm5
	VPSRLQ ymm0, ymm2, 52
	VPSUBQ ymm0, ymm0,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm4, ymm4, ymm2, ymm1
	VPAND ymm4, ymm4,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VMOVAPS ymm2,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c35]
	VPOR ymm4, ymm4, ymm2
	VPAND ymm0, ymm0, ymm1
	VPOR ymm0, ymm0, ymm5
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c39]
	VCMPLTPD ymm1, ymm5, ymm4
	VPSUBQ ymm0, ymm0, ymm1
	VPAND ymm1, ymm1,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm4, ymm4, ymm1
	VMOVAPD   [rsp + 480], ymm0
	VMOVAPS ymm1, [byte rcx + 32]
	VPSRLQ ymm0, ymm1, 52
	VORPS ymm6, ymm1, ymm3
	VSUBPD ymm6, ymm6, ymm3
	VPXOR xmm7, xmm7, xmm7
	VPCMPEQQ ymm7, ymm7, ymm0
	VPSRLQ ymm8, ymm6, 52
	VPSUBQ ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm1, ymm1, ymm6, ymm7
	VPAND ymm1, ymm1,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm1, ymm1, ymm2
	VPAND ymm8, ymm8, ymm7
	VPOR ymm8, ymm8, ymm0
	VCMPLTPD ymm0, ymm5, ymm1
	VPSUBQ ymm8, ymm8, ymm0
	VPAND ymm0, ymm0,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm1, ymm1, ymm0
	VMOVAPD   [rsp + 512], ymm8
	VMOVAPS ymm0, [byte rcx + 64]
	VPSRLQ ymm6, ymm0, 52
	VORPS ymm7, ymm0, ymm3
	VSUBPD ymm7, ymm7, ymm3
	VPXOR xmm8, xmm8, xmm8
	VPCMPEQQ ymm8, ymm8, ymm6
	VPSRLQ ymm9, ymm7, 52
	VPSUBQ ymm9, ymm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm0, ymm0, ymm7, ymm8
	VPAND ymm0, ymm0,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm0, ymm0, ymm2
	VPAND ymm9, ymm9, ymm8
	VPOR ymm9, ymm9, ymm6
	VCMPLTPD ymm6, ymm5, ymm0
	VPSUBQ ymm9, ymm9, ymm6
	VPAND ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm0, ymm0, ymm6
	VMOVAPD   [rsp + 544], ymm9
	VMOVAPS ymm6, [byte rcx + 96]
	VPSRLQ ymm7, ymm6, 52
	VORPS ymm8, ymm6, ymm3
	VSUBPD ymm8, ymm8, ymm3
	VPXOR xmm9, xmm9, xmm9
	VPCMPEQQ ymm9, ymm9, ymm7
	VPSRLQ ymm10, ymm8, 52
	VPSUBQ ymm10, ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm6, ymm6, ymm8, ymm9
	VPAND ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm6, ymm6, ymm2
	VPAND ymm10, ymm10, ymm9
	VPOR ymm10, ymm10, ymm7
	VCMPLTPD ymm7, ymm5, ymm6
	VPSUBQ ymm10, ymm10, ymm7
	VPAND ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm6, ymm6, ymm7
	VMOVAPD   [rsp + 576], ymm10
	VMOVAPS ymm7, [dword rcx + 128]
	VPSRLQ ymm8, ymm7, 52
	VORPS ymm9, ymm7, ymm3
	VSUBPD ymm9, ymm9, ymm3
	VPXOR xmm10, xmm10, xmm10
	VPCMPEQQ ymm10, ymm10, ymm8
	VPSRLQ ymm11, ymm9, 52
	VPSUBQ ymm11, ymm11,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm7, ymm7, ymm9, ymm10
	VPAND ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm7, ymm7, ymm2
	VPAND ymm11, ymm11, ymm10
	VPOR ymm11, ymm11, ymm8
	VCMPLTPD ymm8, ymm5, ymm7
	VPSUBQ ymm11, ymm11, ymm8
	VPAND ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm7, ymm7, ymm8
	VMOVAPD   [rsp + 608], ymm11
	VMOVAPS ymm8, [dword rcx + 160]
	VPSRLQ ymm9, ymm8, 52
	VORPS ymm10, ymm8, ymm3
	VSUBPD ymm10, ymm10, ymm3
	VPXOR xmm11, xmm11, xmm11
	VPCMPEQQ ymm11, ymm11, ymm9
	VPSRLQ ymm12, ymm10, 52
	VPSUBQ ymm12, ymm12,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm8, ymm8, ymm10, ymm11
	VPAND ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm8, ymm8, ymm2
	VPAND ymm12, ymm12, ymm11
	VPOR ymm12, ymm12, ymm9
	VCMPLTPD ymm9, ymm5, ymm8
	VPSUBQ ymm12, ymm12, ymm9
	VPAND ymm9, ymm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm8, ymm8, ymm9
	VMOVAPD   [rsp + 640], ymm12
	VMOVAPS ymm9, [dword rcx + 192]
	VPSRLQ ymm10, ymm9, 52
	VORPS ymm11, ymm9, ymm3
	VSUBPD ymm11, ymm11, ymm3
	VPXOR xmm12, xmm12, xmm12
	VPCMPEQQ ymm12, ymm12, ymm10
	VPSRLQ ymm13, ymm11, 52
	VPSUBQ ymm13, ymm13,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm9, ymm9, ymm11, ymm12
	VPAND ymm9, ymm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm9, ymm9, ymm2
	VPAND ymm13, ymm13, ymm12
	VPOR ymm13, ymm13, ymm10
	VCMPLTPD ymm10, ymm5, ymm9
	VPSUBQ ymm13, ymm13, ymm10
	VPAND ymm10, ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm9, ymm9, ymm10
	VMOVAPD   [rsp + 672], ymm13
	VMOVAPS ymm10, [dword rcx + 224]
	VPSRLQ ymm11, ymm10, 52
	VORPS ymm12, ymm10, ymm3
	VSUBPD ymm12, ymm12, ymm3
	VPXOR xmm13, xmm13, xmm13
	VPCMPEQQ ymm13, ymm13, ymm11
	VPSRLQ ymm14, ymm12, 52
	VPSUBQ ymm14, ymm14,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm10, ymm10, ymm12, ymm13
	VPAND ymm10, ymm10,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm10, ymm10, ymm2
	VPAND ymm14, ymm14, ymm13
	VPOR ymm14, ymm14, ymm11
	VCMPLTPD ymm11, ymm5, ymm10
	VPSUBQ ymm14, ymm14, ymm11
	VPAND ymm11, ymm11,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm10, ymm10, ymm11
	VMOVAPD   [rsp + 704], ymm14
	VMOVAPS ymm11, [dword rcx + 256]
	VPSRLQ ymm12, ymm11, 52
	VORPS ymm13, ymm11, ymm3
	VSUBPD ymm13, ymm13, ymm3
	VPXOR xmm14, xmm14, xmm14
	VPCMPEQQ ymm14, ymm14, ymm12
	VPSRLQ ymm15, ymm13, 52
	VPSUBQ ymm15, ymm15,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm11, ymm11, ymm13, ymm14
	VPAND ymm11, ymm11,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm11, ymm11, ymm2
	VPAND ymm15, ymm15, ymm14
	VPOR ymm15, ymm15, ymm12
	VCMPLTPD ymm12, ymm5, ymm11
	VPSUBQ ymm15, ymm15, ymm12
	VPAND ymm12, ymm12,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm11, ymm11, ymm12
	VMOVAPD   [rsp + 736], ymm15
	VMOVAPS ymm12, [dword rcx + 288]
	VPSRLQ ymm13, ymm12, 52
	VORPS ymm14, ymm12, ymm3
	VSUBPD ymm14, ymm14, ymm3
	VPXOR xmm3, xmm3, xmm3
	VPCMPEQQ ymm3, ymm3, ymm13
	VPSRLQ ymm15, ymm14, 52
	VPSUBQ ymm15, ymm15,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c63]
	VPBLENDVB ymm12, ymm12, ymm14, ymm3
	VPAND ymm12, ymm12,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c37]
	VPOR ymm12, ymm12, ymm2
	VPAND ymm15, ymm15, ymm3
	VPOR ymm15, ymm15, ymm13
	VCMPLTPD ymm5, ymm5, ymm12
	VPSUBQ ymm15, ymm15, ymm5
	VPAND ymm5, ymm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c34]
	VPSUBD ymm12, ymm12, ymm5
	VMOVAPD   [rsp + 768], ymm15
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c41]
	VSUBPD ymm4, ymm4, ymm2
	VFMSUB132PD ymm1, ymm2, ymm2
	VMOVAPD   [rsp + 800], ymm1
	VSUBPD ymm0, ymm0, ymm2
	VFMSUB132PD ymm6, ymm2, ymm2
	VMOVAPD   [rsp + 832], ymm6
	VSUBPD ymm7, ymm7, ymm2
	VFMSUB132PD ymm8, ymm2, ymm2
	VMOVAPD   [rsp + 864], ymm8
	VSUBPD ymm9, ymm9, ymm2
	VFMSUB132PD ymm10, ymm2, ymm2
	VMOVAPD   [rsp + 896], ymm10
	VSUBPD ymm11, ymm11, ymm2
	VFMSUB132PD ymm12, ymm2, ymm2
	VMOVAPD   [rsp + 928], ymm12
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c42]
	VMOVAPD ymm2, ymm5
	VFMADD132PD ymm2, ymm3, ymm4
	VMOVAPD ymm12, ymm5
	VFMADD132PD ymm12, ymm3, ymm1
	VMOVAPD ymm1, ymm5
	VFMADD132PD ymm1, ymm3, ymm0
	VMOVAPD ymm13, ymm5
	VFMADD132PD ymm13, ymm3, ymm6
	VMOVAPD ymm6, ymm5
	VFMADD132PD ymm6, ymm3, ymm7
	VMOVAPD ymm14, ymm5
	VFMADD132PD ymm14, ymm3, ymm8
	VMOVAPD ymm8, ymm5
	VFMADD132PD ymm8, ymm3, ymm9
	VMOVAPD ymm15, ymm5
	VFMADD132PD ymm15, ymm3, ymm10
	VMOVAPD ymm10, ymm5
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c43]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c44]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c45]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c46]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c47]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c48]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c49]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c50]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c51]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c52]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c53]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c54]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c55]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c56]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c57]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c58]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMOVAPS ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c59]
	VFMADD132PD ymm2, ymm3, ymm4
	VFMADD132PD ymm12, ymm3,   [rsp + 800]
	VFMADD132PD ymm1, ymm3, ymm0
	VFMADD132PD ymm13, ymm3,   [rsp + 832]
	VFMADD132PD ymm6, ymm3, ymm7
	VFMADD132PD ymm14, ymm3,   [rsp + 864]
	VFMADD132PD ymm8, ymm3, ymm9
	VFMADD132PD ymm15, ymm3,   [rsp + 896]
	VFMADD132PD ymm10, ymm3, ymm11
	VFMADD132PD ymm5, ymm3,   [rsp + 928]
	VMULPD ymm2, ymm2, ymm4
	VFMADD213PD ymm2, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 800]
	VMULPD ymm12, ymm12, ymm4
	VFMADD213PD ymm12, ymm4, ymm4
	VMULPD ymm1, ymm1, ymm0
	VFMADD213PD ymm1, ymm0, ymm0
	VMOVAPD ymm4,   [rsp + 832]
	VMULPD ymm13, ymm13, ymm4
	VFMADD213PD ymm13, ymm4, ymm4
	VMULPD ymm6, ymm6, ymm7
	VFMADD213PD ymm6, ymm7, ymm7
	VMOVAPD ymm4,   [rsp + 864]
	VMULPD ymm14, ymm14, ymm4
	VFMADD213PD ymm14, ymm4, ymm4
	VMULPD ymm8, ymm8, ymm9
	VFMADD213PD ymm8, ymm9, ymm9
	VMOVAPD ymm4,   [rsp + 896]
	VMULPD ymm15, ymm15, ymm4
	VFMADD213PD ymm15, ymm4, ymm4
	VMULPD ymm10, ymm10, ymm11
	VFMADD213PD ymm10, ymm11, ymm11
	VMOVAPD ymm4,   [rsp + 928]
	VMULPD ymm5, ymm5, ymm4
	VFMADD213PD ymm5, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 480]
	VMOVDQA ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c38]
	VPADDQ ymm4, ymm4, ymm3
	VMOVAPS ymm0,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c40]
	VSUBPD ymm4, ymm4, ymm0
	VMOVAPS ymm7, ymm4
	VMOVAPS ymm9,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c60]
	VFMADD213PD ymm7, ymm9, ymm2
	VMOVAPS ymm2,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c61]
	VFMADD231PD ymm7, ymm4, ymm2
	VMOVAPD ymm4,   [rsp + 512]
	VPADDQ ymm4, ymm4, ymm3
	VSUBPD ymm4, ymm4, ymm0
	VMOVAPS ymm11, ymm4
	VFMADD213PD ymm11, ymm9, ymm12
	VFMADD231PD ymm11, ymm4, ymm2
	VMOVAPD ymm4,   [rsp + 544]
	VPADDQ ymm4, ymm4, ymm3
	VSUBPD ymm4, ymm4, ymm0
	VMOVAPS ymm12, ymm4
	VFMADD213PD ymm12, ymm9, ymm1
	VFMADD231PD ymm12, ymm4, ymm2
	VMOVAPD ymm4,   [rsp + 576]
	VPADDQ ymm4, ymm4, ymm3
	VSUBPD ymm4, ymm4, ymm0
	VMOVAPS ymm1, ymm4
	VFMADD213PD ymm1, ymm9, ymm13
	VFMADD231PD ymm1, ymm4, ymm2
	VMOVAPD ymm4,   [rsp + 608]
	VPADDQ ymm4, ymm4, ymm3
	VSUBPD ymm4, ymm4, ymm0
	VMOVAPS ymm13, ymm4
	VFMADD213PD ymm13, ymm9, ymm6
	VFMADD231PD ymm13, ymm4, ymm2
	VMOVAPD ymm4,   [rsp + 640]
	VPADDQ ymm4, ymm4, ymm3
	VSUBPD ymm4, ymm4, ymm0
	VMOVAPS ymm6, ymm4
	VFMADD213PD ymm6, ymm9, ymm14
	VFMADD231PD ymm6, ymm4, ymm2
	VMOVAPD ymm4,   [rsp + 672]
	VPADDQ ymm4, ymm4, ymm3
	VSUBPD ymm4, ymm4, ymm0
	VMOVAPS ymm14, ymm4
	VFMADD213PD ymm14, ymm9, ymm8
	VFMADD231PD ymm14, ymm4, ymm2
	VMOVAPD ymm4,   [rsp + 704]
	VPADDQ ymm4, ymm4, ymm3
	VSUBPD ymm4, ymm4, ymm0
	VMOVAPS ymm8, ymm4
	VFMADD213PD ymm8, ymm9, ymm15
	VFMADD231PD ymm8, ymm4, ymm2
	VMOVAPD ymm4,   [rsp + 736]
	VPADDQ ymm4, ymm4, ymm3
	VSUBPD ymm4, ymm4, ymm0
	VMOVAPS ymm15, ymm4
	VFMADD213PD ymm15, ymm9, ymm10
	VFMADD231PD ymm15, ymm4, ymm2
	VMOVAPD ymm4,   [rsp + 768]
	VPADDQ ymm4, ymm4, ymm3
	VSUBPD ymm4, ymm4, ymm0
	VMOVAPS ymm3, ymm4
	VFMADD213PD ymm3, ymm9, ymm5
	VFMADD231PD ymm3, ymm4, ymm2
	VMOVAPD ymm4, [rcx]
	VMOVAPS ymm5,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c64]
	VBLENDVPD ymm7, ymm7, ymm5, ymm4
	VMOVAPS ymm2,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c65]
	VCMPNLTPD ymm0, ymm4, ymm2
	VBLENDVPD ymm7, ymm7, ymm4, ymm0
	VPXOR xmm0, xmm0, xmm0
	VPCMPEQQ ymm0, ymm4, ymm0
	VBLENDVPD ymm7, ymm7,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm0
	VMOVUPD [rdx], ymm7
	VMOVAPD ymm4, [byte rcx + 32]
	VBLENDVPD ymm11, ymm11, ymm5, ymm4
	VCMPNLTPD ymm0, ymm4, ymm2
	VBLENDVPD ymm11, ymm11, ymm4, ymm0
	VPXOR xmm0, xmm0, xmm0
	VPCMPEQQ ymm0, ymm4, ymm0
	VBLENDVPD ymm11, ymm11,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm0
	VMOVUPD [byte rdx + 32], ymm11
	VMOVAPD ymm4, [byte rcx + 64]
	VBLENDVPD ymm12, ymm12, ymm5, ymm4
	VCMPNLTPD ymm0, ymm4, ymm2
	VBLENDVPD ymm12, ymm12, ymm4, ymm0
	VPXOR xmm0, xmm0, xmm0
	VPCMPEQQ ymm0, ymm4, ymm0
	VBLENDVPD ymm12, ymm12,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm0
	VMOVUPD [byte rdx + 64], ymm12
	VMOVAPD ymm4, [byte rcx + 96]
	VBLENDVPD ymm1, ymm1, ymm5, ymm4
	VCMPNLTPD ymm0, ymm4, ymm2
	VBLENDVPD ymm1, ymm1, ymm4, ymm0
	VPXOR xmm0, xmm0, xmm0
	VPCMPEQQ ymm0, ymm4, ymm0
	VBLENDVPD ymm1, ymm1,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm0
	VMOVUPD [byte rdx + 96], ymm1
	VMOVAPD ymm4, [dword rcx + 128]
	VBLENDVPD ymm13, ymm13, ymm5, ymm4
	VCMPNLTPD ymm1, ymm4, ymm2
	VBLENDVPD ymm13, ymm13, ymm4, ymm1
	VPXOR xmm1, xmm1, xmm1
	VPCMPEQQ ymm1, ymm4, ymm1
	VBLENDVPD ymm13, ymm13,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm1
	VMOVUPD [dword rdx + 128], ymm13
	VMOVAPD ymm4, [dword rcx + 160]
	VBLENDVPD ymm6, ymm6, ymm5, ymm4
	VCMPNLTPD ymm1, ymm4, ymm2
	VBLENDVPD ymm6, ymm6, ymm4, ymm1
	VPXOR xmm1, xmm1, xmm1
	VPCMPEQQ ymm1, ymm4, ymm1
	VBLENDVPD ymm6, ymm6,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm1
	VMOVUPD [dword rdx + 160], ymm6
	VMOVAPD ymm4, [dword rcx + 192]
	VBLENDVPD ymm14, ymm14, ymm5, ymm4
	VCMPNLTPD ymm1, ymm4, ymm2
	VBLENDVPD ymm14, ymm14, ymm4, ymm1
	VPXOR xmm1, xmm1, xmm1
	VPCMPEQQ ymm1, ymm4, ymm1
	VBLENDVPD ymm14, ymm14,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm1
	VMOVUPD [dword rdx + 192], ymm14
	VMOVAPD ymm4, [dword rcx + 224]
	VBLENDVPD ymm8, ymm8, ymm5, ymm4
	VCMPNLTPD ymm1, ymm4, ymm2
	VBLENDVPD ymm8, ymm8, ymm4, ymm1
	VPXOR xmm1, xmm1, xmm1
	VPCMPEQQ ymm1, ymm4, ymm1
	VBLENDVPD ymm8, ymm8,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm1
	VMOVUPD [dword rdx + 224], ymm8
	VMOVAPD ymm4, [dword rcx + 256]
	VBLENDVPD ymm15, ymm15, ymm5, ymm4
	VCMPNLTPD ymm1, ymm4, ymm2
	VBLENDVPD ymm15, ymm15, ymm4, ymm1
	VPXOR xmm1, xmm1, xmm1
	VPCMPEQQ ymm1, ymm4, ymm1
	VBLENDVPD ymm15, ymm15,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm1
	VMOVUPD [dword rdx + 256], ymm15
	VMOVAPD ymm4, [dword rcx + 288]
	VBLENDVPD ymm3, ymm3, ymm5, ymm4
	VCMPNLTPD ymm5, ymm4, ymm2
	VBLENDVPD ymm3, ymm3, ymm4, ymm5
	VPXOR xmm5, xmm5, xmm5
	VPCMPEQQ ymm5, ymm4, ymm5
	VBLENDVPD ymm3, ymm3,  [rel _yepMath_Log_V64f_V64f_Haswell_constants.c66], ymm5
	VMOVUPD [dword rdx + 288], ymm3
	JMP .process_batch_increment
