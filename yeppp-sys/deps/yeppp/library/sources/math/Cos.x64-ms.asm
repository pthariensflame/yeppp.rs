;                       Yeppp! library implementation
;                   This file is auto-generated by Peach-Py,
;        Portable Efficient Assembly Code-generator in Higher-level Python,
;                  part of the Yeppp! library infrastructure
; This file is part of Yeppp! library and licensed under the New BSD license.
; See LICENSE.txt for the full text of the license.

section .rdata$e rdata align=32
_yepMath_Cos_V64f_V64f_Nehalem_constants:
	.c0: DQ 0x3FE45F306DC9C883
	.c1: DQ 0x4338000000000002
	.c2: DQ 0xBFF921FB54440000
	.c3: DQ 0xBD868C234C4C8000
	.c4: DQ 0x3B09D747F23E32ED
	.c5: DQ 0x3DA8FA87EF79AE3F
	.c6: DQ 0x3DE5D8711D281543
	.c7: DQ 0xBE21EE9DF6693F7E
	.c8: DQ 0xBE5AE5E38936D046
	.c9: DQ 0x3E927E4F7F65104F
	.c10: DQ 0x3EC71DE3535C8A8A
	.c11: DQ 0xBEFA01A019C94874
	.c12: DQ 0xBF2A01A019BB92C0
	.c13: DQ 0x3F56C16C16C15038
	.c14: DQ 0x3F8111111110F51E
	.c15: DQ 0xBFA555555555554B
	.c16: DQ 0xBFC5555555555546
	.c17: DQ 0x3FE0000000000000
	.c18: DQ 0xBFF0000000000000
	.c19: DQ 0x8000000000000000
	.c20: DQ 0x3FE45F306DC9C883, 0x3FE45F306DC9C883
	.c21: DQ 0x4338000000000002, 0x4338000000000002
	.c22: DQ 0xBFF921FB54440000, 0xBFF921FB54440000
	.c23: DQ 0xBD868C234C4C8000, 0xBD868C234C4C8000
	.c24: DQ 0x3B09D747F23E32ED, 0x3B09D747F23E32ED
	.c25: DQ 0x3DA8FA87EF79AE3F, 0x3DA8FA87EF79AE3F
	.c26: DQ 0x3DE5D8711D281543, 0x3DE5D8711D281543
	.c27: DQ 0xBE21EE9DF6693F7E, 0xBE21EE9DF6693F7E
	.c28: DQ 0xBE5AE5E38936D046, 0xBE5AE5E38936D046
	.c29: DQ 0x3E927E4F7F65104F, 0x3E927E4F7F65104F
	.c30: DQ 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A
	.c31: DQ 0xBEFA01A019C94874, 0xBEFA01A019C94874
	.c32: DQ 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0
	.c33: DQ 0x3F56C16C16C15038, 0x3F56C16C16C15038
	.c34: DQ 0x3F8111111110F51E, 0x3F8111111110F51E
	.c35: DQ 0xBFA555555555554B, 0xBFA555555555554B
	.c36: DQ 0xBFC5555555555546, 0xBFC5555555555546
	.c37: DQ 0x3FE0000000000000, 0x3FE0000000000000
	.c38: DQ 0xBFF0000000000000, 0xBFF0000000000000
	.c39: DQ 0x8000000000000000, 0x8000000000000000


section .text$e code align=16
global _yepMath_Cos_V64f_V64f_Nehalem
_yepMath_Cos_V64f_V64f_Nehalem:
	.ENTRY:
	SUB rsp, 328
	MOVAPS [dword rsp + 160], xmm6
	MOVAPS [dword rsp + 176], xmm7
	MOVAPS [dword rsp + 192], xmm8
	MOVAPS [dword rsp + 208], xmm9
	MOVAPS [dword rsp + 224], xmm10
	MOVAPS [dword rsp + 240], xmm11
	MOVAPS [dword rsp + 256], xmm12
	MOVAPS [dword rsp + 272], xmm13
	MOVAPS [dword rsp + 288], xmm14
	MOVAPS [dword rsp + 304], xmm15
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	MOVSD xmm4, [rcx]
	MOVAPS xmm5, xmm4
	MULSD xmm5, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c0]
	ADDSD xmm5, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c1]
	MOVAPS xmm0, xmm5
	PSLLQ xmm0, 62
	SUBSD xmm5, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c1]
	MOVSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c2]
	MULSD xmm3, xmm5
	ADDSD xmm4, xmm3
	MOVAPS xmm3, xmm4
	MOVSD xmm2, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c3]
	MULSD xmm2, xmm5
	ADDSD xmm4, xmm2
	MOVAPS xmm1, xmm4
	SUBSD xmm1, xmm3
	SUBSD xmm2, xmm1
	MULSD xmm5, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c4]
	ADDSD xmm5, xmm2
	ADDSD xmm4, xmm5
	MOVAPS xmm5, xmm4
	MULSD xmm5, xmm5
	MOVSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c5]
	MOVSD xmm2, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c6]
	MULSD xmm3, xmm5
	ADDSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c7]
	MULSD xmm2, xmm5
	ADDSD xmm2, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c8]
	MULSD xmm3, xmm5
	ADDSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c9]
	MULSD xmm2, xmm5
	ADDSD xmm2, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c10]
	MULSD xmm3, xmm5
	ADDSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c11]
	MULSD xmm2, xmm5
	ADDSD xmm2, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c12]
	MULSD xmm3, xmm5
	ADDSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c13]
	MULSD xmm2, xmm5
	ADDSD xmm2, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c14]
	MULSD xmm3, xmm5
	ADDSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c15]
	MULSD xmm2, xmm5
	ADDSD xmm2, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c16]
	MULSD xmm3, xmm5
	ADDSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c17]
	MULSD xmm2, xmm5
	MULSD xmm3, xmm5
	MULSD xmm2, xmm4
	ADDSD xmm2, xmm4
	ADDSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c18]
	MOVSD xmm4, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c19]
	PAND xmm4, xmm0
	PADDQ xmm0, xmm0
	BLENDVPD xmm3, xmm2, xmm0
	XORPD xmm3, xmm4
	MOVSD [rdx], xmm3
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB r8, 10
	JB .process_restore
	align 32
	.process_batch_full:
	MOVAPD xmm4, [rcx]
	MOVAPS xmm5, xmm4
	MULPD xmm5,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c20]
	ADDPD xmm5,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPD xmm3, [byte rcx + 16]
	MOVAPS xmm2, xmm3
	MULPD xmm2,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c20]
	ADDPD xmm2,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPD xmm1, [byte rcx + 32]
	MOVAPS xmm0, xmm1
	MULPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c20]
	ADDPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPD xmm6, [byte rcx + 48]
	MOVAPS xmm7, xmm6
	MULPD xmm7,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c20]
	ADDPD xmm7,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPD xmm8, [byte rcx + 64]
	MOVAPS xmm9, xmm8
	MULPD xmm9,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c20]
	ADDPD xmm9,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPS xmm10, xmm5
	PSLLQ xmm10, 62
	MOVDQA   [rsp], xmm10
	SUBPD xmm5,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPS xmm10, xmm2
	PSLLQ xmm10, 62
	MOVDQA   [rsp + 16], xmm10
	SUBPD xmm2,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPS xmm10, xmm0
	PSLLQ xmm10, 62
	MOVDQA   [rsp + 32], xmm10
	SUBPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPS xmm10, xmm7
	PSLLQ xmm10, 62
	MOVDQA   [rsp + 48], xmm10
	SUBPD xmm7,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPS xmm10, xmm9
	PSLLQ xmm10, 62
	MOVDQA   [rsp + 64], xmm10
	SUBPD xmm9,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPS xmm10,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c22]
	MULPD xmm10, xmm5
	ADDPD xmm4, xmm10
	MOVAPS xmm10,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c22]
	MULPD xmm10, xmm2
	ADDPD xmm3, xmm10
	MOVAPS xmm10,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c22]
	MULPD xmm10, xmm0
	ADDPD xmm1, xmm10
	MOVAPS xmm10,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c22]
	MULPD xmm10, xmm7
	ADDPD xmm6, xmm10
	MOVAPS xmm10,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c22]
	MULPD xmm10, xmm9
	ADDPD xmm8, xmm10
	MOVAPS xmm10, xmm4
	MOVAPS xmm11,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c23]
	MULPD xmm11, xmm5
	ADDPD xmm4, xmm11
	MOVAPS xmm12, xmm4
	SUBPD xmm12, xmm10
	SUBPD xmm11, xmm12
	MULPD xmm5,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c24]
	ADDPD xmm5, xmm11
	ADDPD xmm4, xmm5
	MOVAPS xmm5, xmm3
	MOVAPS xmm10,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c23]
	MULPD xmm10, xmm2
	ADDPD xmm3, xmm10
	MOVAPS xmm11, xmm3
	SUBPD xmm11, xmm5
	SUBPD xmm10, xmm11
	MULPD xmm2,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c24]
	ADDPD xmm2, xmm10
	ADDPD xmm3, xmm2
	MOVAPS xmm5, xmm1
	MOVAPS xmm2,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c23]
	MULPD xmm2, xmm0
	ADDPD xmm1, xmm2
	MOVAPS xmm10, xmm1
	SUBPD xmm10, xmm5
	SUBPD xmm2, xmm10
	MULPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c24]
	ADDPD xmm0, xmm2
	ADDPD xmm1, xmm0
	MOVAPS xmm5, xmm6
	MOVAPS xmm2,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c23]
	MULPD xmm2, xmm7
	ADDPD xmm6, xmm2
	MOVAPS xmm0, xmm6
	SUBPD xmm0, xmm5
	SUBPD xmm2, xmm0
	MULPD xmm7,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c24]
	ADDPD xmm7, xmm2
	ADDPD xmm6, xmm7
	MOVAPS xmm5, xmm8
	MOVAPS xmm2,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c23]
	MULPD xmm2, xmm9
	ADDPD xmm8, xmm2
	MOVAPS xmm0, xmm8
	SUBPD xmm0, xmm5
	SUBPD xmm2, xmm0
	MULPD xmm9,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c24]
	ADDPD xmm9, xmm2
	ADDPD xmm8, xmm9
	MOVAPD   [rsp + 80], xmm4
	MULPD xmm4, xmm4
	MOVAPD   [rsp + 96], xmm3
	MULPD xmm3, xmm3
	MOVAPD   [rsp + 112], xmm1
	MULPD xmm1, xmm1
	MOVAPD   [rsp + 128], xmm6
	MULPD xmm6, xmm6
	MOVAPD   [rsp + 144], xmm8
	MULPD xmm8, xmm8
	MOVAPD xmm5,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c25]
	MOVAPD xmm2,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c26]
	MOVAPD xmm7,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c25]
	MOVAPD xmm9,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c26]
	MOVAPD xmm10,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c25]
	MOVAPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c26]
	MOVAPD xmm12,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c25]
	MOVAPD xmm13,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c26]
	MOVAPD xmm14,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c25]
	MOVAPD xmm15,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c26]
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c27]
	MULPD xmm5, xmm4
	ADDPD xmm5, xmm0
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm0
	MULPD xmm10, xmm1
	ADDPD xmm10, xmm0
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm0
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c28]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm0
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm0
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm0
	MULPD xmm13, xmm6
	ADDPD xmm13, xmm0
	MULPD xmm15, xmm8
	ADDPD xmm15, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c29]
	MULPD xmm5, xmm4
	ADDPD xmm5, xmm0
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm0
	MULPD xmm10, xmm1
	ADDPD xmm10, xmm0
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm0
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c30]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm0
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm0
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm0
	MULPD xmm13, xmm6
	ADDPD xmm13, xmm0
	MULPD xmm15, xmm8
	ADDPD xmm15, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c31]
	MULPD xmm5, xmm4
	ADDPD xmm5, xmm0
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm0
	MULPD xmm10, xmm1
	ADDPD xmm10, xmm0
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm0
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c32]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm0
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm0
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm0
	MULPD xmm13, xmm6
	ADDPD xmm13, xmm0
	MULPD xmm15, xmm8
	ADDPD xmm15, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c33]
	MULPD xmm5, xmm4
	ADDPD xmm5, xmm0
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm0
	MULPD xmm10, xmm1
	ADDPD xmm10, xmm0
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm0
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c34]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm0
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm0
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm0
	MULPD xmm13, xmm6
	ADDPD xmm13, xmm0
	MULPD xmm15, xmm8
	ADDPD xmm15, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c35]
	MULPD xmm5, xmm4
	ADDPD xmm5, xmm0
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm0
	MULPD xmm10, xmm1
	ADDPD xmm10, xmm0
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm0
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c36]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm0
	MULPD xmm9, xmm3
	ADDPD xmm9, xmm0
	MULPD xmm11, xmm1
	ADDPD xmm11, xmm0
	MULPD xmm13, xmm6
	ADDPD xmm13, xmm0
	MULPD xmm15, xmm8
	ADDPD xmm15, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c37]
	MULPD xmm5, xmm4
	ADDPD xmm5, xmm0
	MULPD xmm7, xmm3
	ADDPD xmm7, xmm0
	MULPD xmm10, xmm1
	ADDPD xmm10, xmm0
	MULPD xmm12, xmm6
	ADDPD xmm12, xmm0
	MULPD xmm14, xmm8
	ADDPD xmm14, xmm0
	MULPD xmm2, xmm4
	MULPD xmm5, xmm4
	MOVAPD xmm4,   [rsp + 80]
	MULPD xmm2, xmm4
	ADDPD xmm2, xmm4
	ADDPD xmm5,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c38]
	MULPD xmm9, xmm3
	MULPD xmm7, xmm3
	MOVAPD xmm4,   [rsp + 96]
	MULPD xmm9, xmm4
	ADDPD xmm9, xmm4
	ADDPD xmm7,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c38]
	MULPD xmm11, xmm1
	MULPD xmm10, xmm1
	MOVAPD xmm4,   [rsp + 112]
	MULPD xmm11, xmm4
	ADDPD xmm11, xmm4
	ADDPD xmm10,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c38]
	MULPD xmm13, xmm6
	MULPD xmm12, xmm6
	MOVAPD xmm4,   [rsp + 128]
	MULPD xmm13, xmm4
	ADDPD xmm13, xmm4
	ADDPD xmm12,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c38]
	MULPD xmm15, xmm8
	MULPD xmm14, xmm8
	MOVAPD xmm4,   [rsp + 144]
	MULPD xmm15, xmm4
	ADDPD xmm15, xmm4
	ADDPD xmm14,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c38]
	MOVAPD xmm0,   [rsp]
	MOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c39]
	PAND xmm4, xmm0
	PADDQ xmm0, xmm0
	BLENDVPD xmm5, xmm2, xmm0
	XORPD xmm5, xmm4
	MOVUPD [rdx], xmm5
	MOVAPD xmm0,   [rsp + 16]
	MOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c39]
	PAND xmm4, xmm0
	PADDQ xmm0, xmm0
	BLENDVPD xmm7, xmm9, xmm0
	XORPD xmm7, xmm4
	MOVUPD [byte rdx + 16], xmm7
	MOVAPD xmm0,   [rsp + 32]
	MOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c39]
	PAND xmm4, xmm0
	PADDQ xmm0, xmm0
	BLENDVPD xmm10, xmm11, xmm0
	XORPD xmm10, xmm4
	MOVUPD [byte rdx + 32], xmm10
	MOVAPD xmm0,   [rsp + 48]
	MOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c39]
	PAND xmm4, xmm0
	PADDQ xmm0, xmm0
	BLENDVPD xmm12, xmm13, xmm0
	XORPD xmm12, xmm4
	MOVUPD [byte rdx + 48], xmm12
	MOVAPD xmm0,   [rsp + 64]
	MOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c39]
	PAND xmm4, xmm0
	PADDQ xmm0, xmm0
	BLENDVPD xmm14, xmm15, xmm0
	XORPD xmm14, xmm4
	MOVUPD [byte rdx + 64], xmm14
	ADD rcx, 80
	ADD rdx, 80
	SUB r8, 10
	JAE .process_batch_full
	.process_restore:
	ADD r8, 10
	JZ .return_ok
	.process_single:
	MOVSD xmm4, [rcx]
	MOVAPS xmm5, xmm4
	MULSD xmm5, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c0]
	ADDSD xmm5, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c1]
	MOVAPS xmm0, xmm5
	PSLLQ xmm0, 62
	SUBSD xmm5, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c1]
	MOVSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c2]
	MULSD xmm3, xmm5
	ADDSD xmm4, xmm3
	MOVAPS xmm3, xmm4
	MOVSD xmm2, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c3]
	MULSD xmm2, xmm5
	ADDSD xmm4, xmm2
	MOVAPS xmm1, xmm4
	SUBSD xmm1, xmm3
	SUBSD xmm2, xmm1
	MULSD xmm5, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c4]
	ADDSD xmm5, xmm2
	ADDSD xmm4, xmm5
	MOVAPS xmm5, xmm4
	MULSD xmm5, xmm5
	MOVSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c5]
	MOVSD xmm2, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c6]
	MULSD xmm3, xmm5
	ADDSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c7]
	MULSD xmm2, xmm5
	ADDSD xmm2, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c8]
	MULSD xmm3, xmm5
	ADDSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c9]
	MULSD xmm2, xmm5
	ADDSD xmm2, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c10]
	MULSD xmm3, xmm5
	ADDSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c11]
	MULSD xmm2, xmm5
	ADDSD xmm2, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c12]
	MULSD xmm3, xmm5
	ADDSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c13]
	MULSD xmm2, xmm5
	ADDSD xmm2, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c14]
	MULSD xmm3, xmm5
	ADDSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c15]
	MULSD xmm2, xmm5
	ADDSD xmm2, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c16]
	MULSD xmm3, xmm5
	ADDSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c17]
	MULSD xmm2, xmm5
	MULSD xmm3, xmm5
	MULSD xmm2, xmm4
	ADDSD xmm2, xmm4
	ADDSD xmm3, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c18]
	MOVSD xmm4, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c19]
	PAND xmm4, xmm0
	PADDQ xmm0, xmm0
	BLENDVPD xmm3, xmm2, xmm0
	XORPD xmm3, xmm4
	MOVSD [rdx], xmm3
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	MOVAPS xmm6, [dword rsp + 160]
	MOVAPS xmm7, [dword rsp + 176]
	MOVAPS xmm8, [dword rsp + 192]
	MOVAPS xmm9, [dword rsp + 208]
	MOVAPS xmm10, [dword rsp + 224]
	MOVAPS xmm11, [dword rsp + 240]
	MOVAPS xmm12, [dword rsp + 256]
	MOVAPS xmm13, [dword rsp + 272]
	MOVAPS xmm14, [dword rsp + 288]
	MOVAPS xmm15, [dword rsp + 304]
	ADD rsp, 328
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return

section .rdata$f rdata align=32
_yepMath_Cos_V64f_V64f_SandyBridge_constants:
	.c0: DQ 0x3FE45F306DC9C883
	.c1: DQ 0x4338000000000002
	.c2: DQ 0xBFF921FB54440000
	.c3: DQ 0xBD868C234C4C8000
	.c4: DQ 0x3B09D747F23E32ED
	.c5: DQ 0x3DA8FA87EF79AE3F
	.c6: DQ 0x3DE5D8711D281543
	.c7: DQ 0xBE21EE9DF6693F7E
	.c8: DQ 0xBE5AE5E38936D046
	.c9: DQ 0x3E927E4F7F65104F
	.c10: DQ 0x3EC71DE3535C8A8A
	.c11: DQ 0xBEFA01A019C94874
	.c12: DQ 0xBF2A01A019BB92C0
	.c13: DQ 0x3F56C16C16C15038
	.c14: DQ 0x3F8111111110F51E
	.c15: DQ 0xBFA555555555554B
	.c16: DQ 0xBFC5555555555546
	.c17: DQ 0x3FE0000000000000
	.c18: DQ 0xBFF0000000000000
	.c19: DQ 0x8000000000000000
	.c20: DQ 0x3FE45F306DC9C883, 0x3FE45F306DC9C883, 0x3FE45F306DC9C883, 0x3FE45F306DC9C883
	.c21: DQ 0x4338000000000002, 0x4338000000000002, 0x4338000000000002, 0x4338000000000002
	.c22: DQ 0xBFF921FB54440000, 0xBFF921FB54440000, 0xBFF921FB54440000, 0xBFF921FB54440000
	.c23: DQ 0xBD868C234C4C8000, 0xBD868C234C4C8000, 0xBD868C234C4C8000, 0xBD868C234C4C8000
	.c24: DQ 0x3B09D747F23E32ED, 0x3B09D747F23E32ED, 0x3B09D747F23E32ED, 0x3B09D747F23E32ED
	.c25: DQ 0x3DA8FA87EF79AE3F, 0x3DA8FA87EF79AE3F, 0x3DA8FA87EF79AE3F, 0x3DA8FA87EF79AE3F
	.c26: DQ 0xBE21EE9DF6693F7E, 0xBE21EE9DF6693F7E, 0xBE21EE9DF6693F7E, 0xBE21EE9DF6693F7E
	.c27: DQ 0x3DE5D8711D281543, 0x3DE5D8711D281543, 0x3DE5D8711D281543, 0x3DE5D8711D281543
	.c28: DQ 0xBE5AE5E38936D046, 0xBE5AE5E38936D046, 0xBE5AE5E38936D046, 0xBE5AE5E38936D046
	.c29: DQ 0x3E927E4F7F65104F, 0x3E927E4F7F65104F, 0x3E927E4F7F65104F, 0x3E927E4F7F65104F
	.c30: DQ 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A
	.c31: DQ 0xBEFA01A019C94874, 0xBEFA01A019C94874, 0xBEFA01A019C94874, 0xBEFA01A019C94874
	.c32: DQ 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0
	.c33: DQ 0x3F56C16C16C15038, 0x3F56C16C16C15038, 0x3F56C16C16C15038, 0x3F56C16C16C15038
	.c34: DQ 0x3F8111111110F51E, 0x3F8111111110F51E, 0x3F8111111110F51E, 0x3F8111111110F51E
	.c35: DQ 0xBFA555555555554B, 0xBFA555555555554B, 0xBFA555555555554B, 0xBFA555555555554B
	.c36: DQ 0xBFC5555555555546, 0xBFC5555555555546, 0xBFC5555555555546, 0xBFC5555555555546
	.c37: DQ 0x3FE0000000000000, 0x3FE0000000000000, 0x3FE0000000000000, 0x3FE0000000000000
	.c38: DQ 0xBFF0000000000000, 0xBFF0000000000000, 0xBFF0000000000000, 0xBFF0000000000000
	.c39: DQ 0x8000000000000000, 0x8000000000000000, 0x8000000000000000, 0x8000000000000000


section .text$f code align=16
global _yepMath_Cos_V64f_V64f_SandyBridge
_yepMath_Cos_V64f_V64f_SandyBridge:
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 480
	VMOVAPS [dword rsp + 320], xmm6
	VMOVAPS [dword rsp + 336], xmm7
	VMOVAPS [dword rsp + 352], xmm8
	VMOVAPS [dword rsp + 368], xmm9
	VMOVAPS [dword rsp + 384], xmm10
	VMOVAPS [dword rsp + 400], xmm11
	VMOVAPS [dword rsp + 416], xmm12
	VMOVAPS [dword rsp + 432], xmm13
	VMOVAPS [dword rsp + 448], xmm14
	VMOVAPS [dword rsp + 464], xmm15
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm4, [rcx]
	VMULSD xmm5, xmm4, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c0]
	VADDSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c1]
	VPSLLQ xmm3, xmm5, 62
	VSUBSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c1]
	VMULSD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c2]
	VADDSD xmm4, xmm4, xmm2
	VMOVAPS xmm2, xmm4
	VMULSD xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c3]
	VADDSD xmm4, xmm4, xmm1
	VSUBSD xmm0, xmm4, xmm2
	VSUBSD xmm1, xmm1, xmm0
	VMULSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c4]
	VADDSD xmm5, xmm5, xmm1
	VADDSD xmm4, xmm4, xmm5
	VMULSD xmm5, xmm4, xmm4
	VMOVSD xmm2, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c5]
	VMOVSD xmm1, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c6]
	VMULSD xmm2, xmm2, xmm5
	VADDSD xmm2, xmm2, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c7]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c8]
	VMULSD xmm2, xmm2, xmm5
	VADDSD xmm2, xmm2, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c9]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c10]
	VMULSD xmm2, xmm2, xmm5
	VADDSD xmm2, xmm2, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c11]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c12]
	VMULSD xmm2, xmm2, xmm5
	VADDSD xmm2, xmm2, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c13]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c14]
	VMULSD xmm2, xmm2, xmm5
	VADDSD xmm2, xmm2, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c15]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c16]
	VMULSD xmm2, xmm2, xmm5
	VADDSD xmm2, xmm2, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c17]
	VMULSD xmm1, xmm1, xmm5
	VMULSD xmm2, xmm2, xmm5
	VMULSD xmm1, xmm1, xmm4
	VADDSD xmm2, xmm2, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c18]
	VADDSD xmm1, xmm1, xmm4
	VMOVSD xmm4, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c19]
	VPAND xmm4, xmm4, xmm3
	VPADDQ xmm3, xmm3, xmm3
	VBLENDVPD xmm5, xmm2, xmm1, xmm3
	VXORPD xmm5, xmm5, xmm4
	VMOVSD [rdx], xmm5
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB r8, 20
	JB .process_restore
	align 32
	.process_batch_full:
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c20]
	VMOVAPS ymm5,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c21]
	VMOVAPD ymm3, [rcx]
	VMULPD ymm2, ymm3, ymm4
	VADDPD ymm2, ymm2, ymm5
	VMOVAPD ymm1, [byte rcx + 32]
	VMULPD ymm0, ymm1, ymm4
	VADDPD ymm0, ymm0, ymm5
	VMOVAPD ymm6, [byte rcx + 64]
	VMULPD ymm7, ymm6, ymm4
	VADDPD ymm7, ymm7, ymm5
	VMOVAPD ymm8, [byte rcx + 96]
	VMULPD ymm9, ymm8, ymm4
	VADDPD ymm9, ymm9, ymm5
	VMOVAPD ymm10, [dword rcx + 128]
	VMULPD ymm4, ymm10, ymm4
	VADDPD ymm4, ymm4, ymm5
	VEXTRACTF128 xmm11, ymm2, 1
	VPSLLQ xmm12, xmm2, 62
	VMOVDQA   [rsp], xmm12
	VPSLLQ xmm11, xmm11, 62
	VMOVDQA   [rsp + 16], xmm11
	VSUBPD ymm2, ymm2, ymm5
	VEXTRACTF128 xmm11, ymm0, 1
	VPSLLQ xmm12, xmm0, 62
	VMOVDQA   [rsp + 32], xmm12
	VPSLLQ xmm11, xmm11, 62
	VMOVDQA   [rsp + 48], xmm11
	VSUBPD ymm0, ymm0, ymm5
	VEXTRACTF128 xmm11, ymm7, 1
	VPSLLQ xmm12, xmm7, 62
	VMOVDQA   [rsp + 64], xmm12
	VPSLLQ xmm11, xmm11, 62
	VMOVDQA   [rsp + 80], xmm11
	VSUBPD ymm7, ymm7, ymm5
	VEXTRACTF128 xmm11, ymm9, 1
	VPSLLQ xmm12, xmm9, 62
	VMOVDQA   [rsp + 96], xmm12
	VPSLLQ xmm11, xmm11, 62
	VMOVDQA   [rsp + 112], xmm11
	VSUBPD ymm9, ymm9, ymm5
	VEXTRACTF128 xmm11, ymm4, 1
	VPSLLQ xmm12, xmm4, 62
	VMOVDQA   [rsp + 128], xmm12
	VPSLLQ xmm11, xmm11, 62
	VMOVDQA   [rsp + 144], xmm11
	VSUBPD ymm4, ymm4, ymm5
	VMULPD ymm5, ymm2,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c22]
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm5, ymm0,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c22]
	VADDPD ymm1, ymm1, ymm5
	VMULPD ymm5, ymm7,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c22]
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm5, ymm9,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c22]
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm5, ymm4,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c22]
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm5, ymm2,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c23]
	VADDPD ymm11, ymm3, ymm5
	VSUBPD ymm3, ymm11, ymm3
	VSUBPD ymm5, ymm5, ymm3
	VMULPD ymm2, ymm2,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm2, ymm2, ymm5
	VADDPD ymm11, ymm11, ymm2
	VMULPD ymm5, ymm0,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c23]
	VADDPD ymm3, ymm1, ymm5
	VSUBPD ymm2, ymm3, ymm1
	VSUBPD ymm5, ymm5, ymm2
	VMULPD ymm0, ymm0,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm0, ymm0, ymm5
	VADDPD ymm3, ymm3, ymm0
	VMULPD ymm5, ymm7,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c23]
	VADDPD ymm2, ymm6, ymm5
	VSUBPD ymm1, ymm2, ymm6
	VSUBPD ymm5, ymm5, ymm1
	VMULPD ymm7, ymm7,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm7, ymm7, ymm5
	VADDPD ymm2, ymm2, ymm7
	VMULPD ymm5, ymm9,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c23]
	VADDPD ymm1, ymm8, ymm5
	VSUBPD ymm0, ymm1, ymm8
	VSUBPD ymm5, ymm5, ymm0
	VMULPD ymm9, ymm9,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm9, ymm9, ymm5
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm5, ymm4,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c23]
	VADDPD ymm0, ymm10, ymm5
	VSUBPD ymm6, ymm0, ymm10
	VSUBPD ymm5, ymm5, ymm6
	VMULPD ymm4, ymm4,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm4, ymm4, ymm5
	VADDPD ymm0, ymm0, ymm4
	VMOVAPD   [rsp + 160], ymm11
	VMULPD ymm4, ymm11, ymm11
	VMOVAPD   [rsp + 192], ymm3
	VMULPD ymm5, ymm3, ymm3
	VMOVAPD   [rsp + 224], ymm2
	VMULPD ymm3, ymm2, ymm2
	VMOVAPD   [rsp + 256], ymm1
	VMULPD ymm2, ymm1, ymm1
	VMOVAPD   [rsp + 288], ymm0
	VMULPD ymm1, ymm0, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c25]
	VMOVAPS ymm6,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c26]
	VMULPD ymm7, ymm0, ymm4
	VADDPD ymm7, ymm7, ymm6
	VMULPD ymm8, ymm0, ymm5
	VADDPD ymm8, ymm8, ymm6
	VMULPD ymm9, ymm0, ymm3
	VADDPD ymm9, ymm9, ymm6
	VMULPD ymm10, ymm0, ymm2
	VADDPD ymm10, ymm10, ymm6
	VMULPD ymm0, ymm0, ymm1
	VADDPD ymm0, ymm0, ymm6
	VMOVAPS ymm6,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c27]
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c28]
	VMULPD ymm12, ymm6, ymm4
	VADDPD ymm12, ymm12, ymm11
	VMULPD ymm13, ymm6, ymm5
	VADDPD ymm13, ymm13, ymm11
	VMULPD ymm14, ymm6, ymm3
	VADDPD ymm14, ymm14, ymm11
	VMULPD ymm15, ymm6, ymm2
	VADDPD ymm15, ymm15, ymm11
	VMULPD ymm6, ymm6, ymm1
	VADDPD ymm6, ymm6, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c29]
	VMULPD ymm7, ymm7, ymm4
	VADDPD ymm7, ymm7, ymm11
	VMULPD ymm8, ymm8, ymm5
	VADDPD ymm8, ymm8, ymm11
	VMULPD ymm9, ymm9, ymm3
	VADDPD ymm9, ymm9, ymm11
	VMULPD ymm10, ymm10, ymm2
	VADDPD ymm10, ymm10, ymm11
	VMULPD ymm0, ymm0, ymm1
	VADDPD ymm0, ymm0, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c30]
	VMULPD ymm12, ymm12, ymm4
	VADDPD ymm12, ymm12, ymm11
	VMULPD ymm13, ymm13, ymm5
	VADDPD ymm13, ymm13, ymm11
	VMULPD ymm14, ymm14, ymm3
	VADDPD ymm14, ymm14, ymm11
	VMULPD ymm15, ymm15, ymm2
	VADDPD ymm15, ymm15, ymm11
	VMULPD ymm6, ymm6, ymm1
	VADDPD ymm6, ymm6, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c31]
	VMULPD ymm7, ymm7, ymm4
	VADDPD ymm7, ymm7, ymm11
	VMULPD ymm8, ymm8, ymm5
	VADDPD ymm8, ymm8, ymm11
	VMULPD ymm9, ymm9, ymm3
	VADDPD ymm9, ymm9, ymm11
	VMULPD ymm10, ymm10, ymm2
	VADDPD ymm10, ymm10, ymm11
	VMULPD ymm0, ymm0, ymm1
	VADDPD ymm0, ymm0, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c32]
	VMULPD ymm12, ymm12, ymm4
	VADDPD ymm12, ymm12, ymm11
	VMULPD ymm13, ymm13, ymm5
	VADDPD ymm13, ymm13, ymm11
	VMULPD ymm14, ymm14, ymm3
	VADDPD ymm14, ymm14, ymm11
	VMULPD ymm15, ymm15, ymm2
	VADDPD ymm15, ymm15, ymm11
	VMULPD ymm6, ymm6, ymm1
	VADDPD ymm6, ymm6, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c33]
	VMULPD ymm7, ymm7, ymm4
	VADDPD ymm7, ymm7, ymm11
	VMULPD ymm8, ymm8, ymm5
	VADDPD ymm8, ymm8, ymm11
	VMULPD ymm9, ymm9, ymm3
	VADDPD ymm9, ymm9, ymm11
	VMULPD ymm10, ymm10, ymm2
	VADDPD ymm10, ymm10, ymm11
	VMULPD ymm0, ymm0, ymm1
	VADDPD ymm0, ymm0, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c34]
	VMULPD ymm12, ymm12, ymm4
	VADDPD ymm12, ymm12, ymm11
	VMULPD ymm13, ymm13, ymm5
	VADDPD ymm13, ymm13, ymm11
	VMULPD ymm14, ymm14, ymm3
	VADDPD ymm14, ymm14, ymm11
	VMULPD ymm15, ymm15, ymm2
	VADDPD ymm15, ymm15, ymm11
	VMULPD ymm6, ymm6, ymm1
	VADDPD ymm6, ymm6, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c35]
	VMULPD ymm7, ymm7, ymm4
	VADDPD ymm7, ymm7, ymm11
	VMULPD ymm8, ymm8, ymm5
	VADDPD ymm8, ymm8, ymm11
	VMULPD ymm9, ymm9, ymm3
	VADDPD ymm9, ymm9, ymm11
	VMULPD ymm10, ymm10, ymm2
	VADDPD ymm10, ymm10, ymm11
	VMULPD ymm0, ymm0, ymm1
	VADDPD ymm0, ymm0, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c36]
	VMULPD ymm12, ymm12, ymm4
	VADDPD ymm12, ymm12, ymm11
	VMULPD ymm13, ymm13, ymm5
	VADDPD ymm13, ymm13, ymm11
	VMULPD ymm14, ymm14, ymm3
	VADDPD ymm14, ymm14, ymm11
	VMULPD ymm15, ymm15, ymm2
	VADDPD ymm15, ymm15, ymm11
	VMULPD ymm6, ymm6, ymm1
	VADDPD ymm6, ymm6, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c37]
	VMULPD ymm7, ymm7, ymm4
	VADDPD ymm7, ymm7, ymm11
	VMULPD ymm8, ymm8, ymm5
	VADDPD ymm8, ymm8, ymm11
	VMULPD ymm9, ymm9, ymm3
	VADDPD ymm9, ymm9, ymm11
	VMULPD ymm10, ymm10, ymm2
	VADDPD ymm10, ymm10, ymm11
	VMULPD ymm0, ymm0, ymm1
	VADDPD ymm0, ymm0, ymm11
	VMULPD ymm12, ymm12, ymm4
	VMULPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14, ymm3
	VMULPD ymm15, ymm15, ymm2
	VMULPD ymm6, ymm6, ymm1
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c38]
	VMULPD ymm7, ymm7, ymm4
	VADDPD ymm7, ymm7, ymm11
	VMULPD ymm8, ymm8, ymm5
	VADDPD ymm8, ymm8, ymm11
	VMULPD ymm9, ymm9, ymm3
	VADDPD ymm9, ymm9, ymm11
	VMULPD ymm10, ymm10, ymm2
	VADDPD ymm10, ymm10, ymm11
	VMULPD ymm0, ymm0, ymm1
	VADDPD ymm0, ymm0, ymm11
	VMOVAPD ymm4,   [rsp + 160]
	VMULPD ymm12, ymm12, ymm4
	VADDPD ymm12, ymm12, ymm4
	VMOVAPD ymm4,   [rsp + 192]
	VMULPD ymm13, ymm13, ymm4
	VADDPD ymm13, ymm13, ymm4
	VMOVAPD ymm4,   [rsp + 224]
	VMULPD ymm14, ymm14, ymm4
	VADDPD ymm14, ymm14, ymm4
	VMOVAPD ymm4,   [rsp + 256]
	VMULPD ymm15, ymm15, ymm4
	VADDPD ymm15, ymm15, ymm4
	VMOVAPD ymm4,   [rsp + 288]
	VMULPD ymm6, ymm6, ymm4
	VADDPD ymm6, ymm6, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c39]
	VMOVAPD ymm5,   [rsp]
	VANDPD ymm3, ymm5, ymm4
	VANDNPD ymm5, ymm4, ymm5
	VCMPEQPD ymm5, ymm5, ymm3
	VBLENDVPD ymm5, ymm12, ymm7, ymm5
	VXORPD ymm5, ymm5, ymm3
	VMOVUPD [rdx], xmm5
	VEXTRACTF128 [byte rdx + 16], ymm5, 1
	VMOVAPD ymm5,   [rsp + 32]
	VANDPD ymm3, ymm5, ymm4
	VANDNPD ymm5, ymm4, ymm5
	VCMPEQPD ymm5, ymm5, ymm3
	VBLENDVPD ymm5, ymm13, ymm8, ymm5
	VXORPD ymm5, ymm5, ymm3
	VMOVUPD [byte rdx + 32], xmm5
	VEXTRACTF128 [byte rdx + 48], ymm5, 1
	VMOVAPD ymm5,   [rsp + 64]
	VANDPD ymm3, ymm5, ymm4
	VANDNPD ymm5, ymm4, ymm5
	VCMPEQPD ymm5, ymm5, ymm3
	VBLENDVPD ymm5, ymm14, ymm9, ymm5
	VXORPD ymm5, ymm5, ymm3
	VMOVUPD [byte rdx + 64], xmm5
	VEXTRACTF128 [byte rdx + 80], ymm5, 1
	VMOVAPD ymm5,   [rsp + 96]
	VANDPD ymm3, ymm5, ymm4
	VANDNPD ymm5, ymm4, ymm5
	VCMPEQPD ymm5, ymm5, ymm3
	VBLENDVPD ymm5, ymm15, ymm10, ymm5
	VXORPD ymm5, ymm5, ymm3
	VMOVUPD [byte rdx + 96], xmm5
	VEXTRACTF128 [byte rdx + 112], ymm5, 1
	VMOVAPD ymm5,   [rsp + 128]
	VANDPD ymm3, ymm5, ymm4
	VANDNPD ymm5, ymm4, ymm5
	VCMPEQPD ymm5, ymm5, ymm3
	VBLENDVPD ymm4, ymm6, ymm0, ymm5
	VXORPD ymm4, ymm4, ymm3
	VMOVUPD [dword rdx + 128], xmm4
	VEXTRACTF128 [dword rdx + 144], ymm4, 1
	ADD rcx, 160
	ADD rdx, 160
	SUB r8, 20
	JAE .process_batch_full
	.process_restore:
	ADD r8, 20
	JZ .return_ok
	.process_single:
	VMOVSD xmm4, [rcx]
	VMULSD xmm5, xmm4, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c0]
	VADDSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c1]
	VPSLLQ xmm3, xmm5, 62
	VSUBSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c1]
	VMULSD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c2]
	VADDSD xmm4, xmm4, xmm2
	VMOVAPS xmm2, xmm4
	VMULSD xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c3]
	VADDSD xmm4, xmm4, xmm1
	VSUBSD xmm0, xmm4, xmm2
	VSUBSD xmm1, xmm1, xmm0
	VMULSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c4]
	VADDSD xmm5, xmm5, xmm1
	VADDSD xmm4, xmm4, xmm5
	VMULSD xmm5, xmm4, xmm4
	VMOVSD xmm2, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c5]
	VMOVSD xmm1, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c6]
	VMULSD xmm2, xmm2, xmm5
	VADDSD xmm2, xmm2, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c7]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c8]
	VMULSD xmm2, xmm2, xmm5
	VADDSD xmm2, xmm2, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c9]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c10]
	VMULSD xmm2, xmm2, xmm5
	VADDSD xmm2, xmm2, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c11]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c12]
	VMULSD xmm2, xmm2, xmm5
	VADDSD xmm2, xmm2, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c13]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c14]
	VMULSD xmm2, xmm2, xmm5
	VADDSD xmm2, xmm2, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c15]
	VMULSD xmm1, xmm1, xmm5
	VADDSD xmm1, xmm1, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c16]
	VMULSD xmm2, xmm2, xmm5
	VADDSD xmm2, xmm2, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c17]
	VMULSD xmm1, xmm1, xmm5
	VMULSD xmm2, xmm2, xmm5
	VMULSD xmm1, xmm1, xmm4
	VADDSD xmm2, xmm2, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c18]
	VADDSD xmm1, xmm1, xmm4
	VMOVSD xmm4, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c19]
	VPAND xmm4, xmm4, xmm3
	VPADDQ xmm3, xmm3, xmm3
	VBLENDVPD xmm5, xmm2, xmm1, xmm3
	VXORPD xmm5, xmm5, xmm4
	VMOVSD [rdx], xmm5
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	VMOVAPS xmm6, [dword rsp + 320]
	VMOVAPS xmm7, [dword rsp + 336]
	VMOVAPS xmm8, [dword rsp + 352]
	VMOVAPS xmm9, [dword rsp + 368]
	VMOVAPS xmm10, [dword rsp + 384]
	VMOVAPS xmm11, [dword rsp + 400]
	VMOVAPS xmm12, [dword rsp + 416]
	VMOVAPS xmm13, [dword rsp + 432]
	VMOVAPS xmm14, [dword rsp + 448]
	VMOVAPS xmm15, [dword rsp + 464]
	MOV rsp, [dword rsp + 480]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return

section .rdata$n rdata align=32
_yepMath_Cos_V64f_V64f_Bulldozer_constants:
	.c0: DQ 0x3FE45F306DC9C883
	.c1: DQ 0x4338000000000002
	.c2: DQ 0xBFF921FB54440000
	.c3: DQ 0xBD868C234C4C8000
	.c4: DQ 0x3B09D747F23E32ED
	.c5: DQ 0x3DA8FA87EF79AE3F
	.c6: DQ 0x3DE5D8711D281543
	.c7: DQ 0xBE21EE9DF6693F7E
	.c8: DQ 0xBE5AE5E38936D046
	.c9: DQ 0x3E927E4F7F65104F
	.c10: DQ 0x3EC71DE3535C8A8A
	.c11: DQ 0xBEFA01A019C94874
	.c12: DQ 0xBF2A01A019BB92C0
	.c13: DQ 0x3F56C16C16C15038
	.c14: DQ 0x3F8111111110F51E
	.c15: DQ 0xBFA555555555554B
	.c16: DQ 0xBFC5555555555546
	.c17: DQ 0x3FE0000000000000
	.c18: DQ 0xBFF0000000000000
	.c19: DQ 0x8000000000000000
	.c20: DQ 0x3FE45F306DC9C883, 0x3FE45F306DC9C883
	.c21: DQ 0x4338000000000002, 0x4338000000000002
	.c22: DQ 0xBFF921FB54440000, 0xBFF921FB54440000
	.c23: DQ 0xBD868C234C4C8000, 0xBD868C234C4C8000
	.c24: DQ 0x3B09D747F23E32ED, 0x3B09D747F23E32ED
	.c25: DQ 0x3DA8FA87EF79AE3F, 0x3DA8FA87EF79AE3F
	.c26: DQ 0xBE21EE9DF6693F7E, 0xBE21EE9DF6693F7E
	.c27: DQ 0x3DE5D8711D281543, 0x3DE5D8711D281543
	.c28: DQ 0xBE5AE5E38936D046, 0xBE5AE5E38936D046
	.c29: DQ 0x3E927E4F7F65104F, 0x3E927E4F7F65104F
	.c30: DQ 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A
	.c31: DQ 0xBEFA01A019C94874, 0xBEFA01A019C94874
	.c32: DQ 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0
	.c33: DQ 0x3F56C16C16C15038, 0x3F56C16C16C15038
	.c34: DQ 0x3F8111111110F51E, 0x3F8111111110F51E
	.c35: DQ 0xBFA555555555554B, 0xBFA555555555554B
	.c36: DQ 0xBFC5555555555546, 0xBFC5555555555546
	.c37: DQ 0x3FE0000000000000, 0x3FE0000000000000
	.c38: DQ 0xBFF0000000000000, 0xBFF0000000000000
	.c39: DQ 0x8000000000000000, 0x8000000000000000


section .text$n code align=16
global _yepMath_Cos_V64f_V64f_Bulldozer
_yepMath_Cos_V64f_V64f_Bulldozer:
	.ENTRY:
	SUB rsp, 328
	VMOVAPS [dword rsp + 160], xmm6
	VMOVAPS [dword rsp + 176], xmm7
	VMOVAPS [dword rsp + 192], xmm8
	VMOVAPS [dword rsp + 208], xmm9
	VMOVAPS [dword rsp + 224], xmm10
	VMOVAPS [dword rsp + 240], xmm11
	VMOVAPS [dword rsp + 256], xmm12
	VMOVAPS [dword rsp + 272], xmm13
	VMOVAPS [dword rsp + 288], xmm14
	VMOVAPS [dword rsp + 304], xmm15
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 15
	JZ .source_16b_aligned
	.source_16b_misaligned:
	VMOVSD xmm4, [rcx]
	VMULSD xmm5, xmm4, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c0]
	VADDSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c1]
	VPSLLQ xmm3, xmm5, 62
	VSUBSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c1]
	VMULSD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c2]
	VADDSD xmm4, xmm4, xmm2
	VMOVAPS xmm2, xmm4
	VMULSD xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c3]
	VADDSD xmm4, xmm4, xmm1
	VSUBSD xmm0, xmm4, xmm2
	VSUBSD xmm1, xmm1, xmm0
	VMULSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c4]
	VADDSD xmm5, xmm5, xmm1
	VADDSD xmm4, xmm4, xmm5
	VMULSD xmm5, xmm4, xmm4
	VMOVSD xmm2, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c5]
	VMOVSD xmm1, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c6]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c7]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c8]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c9]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c10]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c11]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c12]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c13]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c14]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c15]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c16]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c17]
	VMULSD xmm1, xmm1, xmm5
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm1, xmm1, xmm4, xmm4
	VMOVSD xmm4, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c19]
	VPAND xmm4, xmm4, xmm3
	VPADDQ xmm3, xmm3, xmm3
	VBLENDVPD xmm5, xmm2, xmm1, xmm3
	VXORPD xmm5, xmm5, xmm4
	VMOVSD [rdx], xmm5
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 15
	JNZ .source_16b_misaligned
	.source_16b_aligned:
	SUB r8, 10
	JB .process_restore
	align 32
	.process_batch_full:
	VMOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c20]
	VMOVAPD xmm5,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c21]
	VMOVAPD xmm3, [rcx]
	VMULPD xmm2, xmm3, xmm4
	VADDPD xmm2, xmm2, xmm5
	VMOVAPD xmm1, [byte rcx + 16]
	VMULPD xmm0, xmm1, xmm4
	VADDPD xmm0, xmm0, xmm5
	VMOVAPD xmm6, [byte rcx + 32]
	VMULPD xmm7, xmm6, xmm4
	VADDPD xmm7, xmm7, xmm5
	VMOVAPD xmm8, [byte rcx + 48]
	VMULPD xmm9, xmm8, xmm4
	VADDPD xmm9, xmm9, xmm5
	VMOVAPD xmm10, [byte rcx + 64]
	VMULPD xmm4, xmm10, xmm4
	VADDPD xmm4, xmm4, xmm5
	VPSLLQ xmm11, xmm2, 62
	VMOVDQA   [rsp], xmm11
	VSUBPD xmm2, xmm2, xmm5
	VPSLLQ xmm11, xmm0, 62
	VMOVDQA   [rsp + 16], xmm11
	VSUBPD xmm0, xmm0, xmm5
	VPSLLQ xmm11, xmm7, 62
	VMOVDQA   [rsp + 32], xmm11
	VSUBPD xmm7, xmm7, xmm5
	VPSLLQ xmm11, xmm9, 62
	VMOVDQA   [rsp + 48], xmm11
	VSUBPD xmm9, xmm9, xmm5
	VPSLLQ xmm11, xmm4, 62
	VMOVDQA   [rsp + 64], xmm11
	VSUBPD xmm4, xmm4, xmm5
	VMULPD xmm5, xmm2,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c22]
	VADDPD xmm3, xmm3, xmm5
	VMULPD xmm5, xmm0,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c22]
	VADDPD xmm1, xmm1, xmm5
	VMULPD xmm5, xmm7,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c22]
	VADDPD xmm6, xmm6, xmm5
	VMULPD xmm5, xmm9,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c22]
	VADDPD xmm8, xmm8, xmm5
	VMULPD xmm5, xmm4,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c22]
	VADDPD xmm10, xmm10, xmm5
	VMULPD xmm5, xmm2,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c23]
	VADDPD xmm11, xmm3, xmm5
	VSUBPD xmm3, xmm11, xmm3
	VSUBPD xmm5, xmm5, xmm3
	VMULPD xmm2, xmm2,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c24]
	VADDPD xmm2, xmm2, xmm5
	VADDPD xmm11, xmm11, xmm2
	VMULPD xmm5, xmm0,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c23]
	VADDPD xmm3, xmm1, xmm5
	VSUBPD xmm2, xmm3, xmm1
	VSUBPD xmm5, xmm5, xmm2
	VMULPD xmm0, xmm0,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c24]
	VADDPD xmm0, xmm0, xmm5
	VADDPD xmm3, xmm3, xmm0
	VMULPD xmm5, xmm7,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c23]
	VADDPD xmm2, xmm6, xmm5
	VSUBPD xmm1, xmm2, xmm6
	VSUBPD xmm5, xmm5, xmm1
	VMULPD xmm7, xmm7,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c24]
	VADDPD xmm7, xmm7, xmm5
	VADDPD xmm2, xmm2, xmm7
	VMULPD xmm5, xmm9,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c23]
	VADDPD xmm1, xmm8, xmm5
	VSUBPD xmm0, xmm1, xmm8
	VSUBPD xmm5, xmm5, xmm0
	VMULPD xmm9, xmm9,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c24]
	VADDPD xmm9, xmm9, xmm5
	VADDPD xmm1, xmm1, xmm9
	VMULPD xmm5, xmm4,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c23]
	VADDPD xmm0, xmm10, xmm5
	VSUBPD xmm6, xmm0, xmm10
	VSUBPD xmm5, xmm5, xmm6
	VMULPD xmm4, xmm4,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c24]
	VADDPD xmm4, xmm4, xmm5
	VADDPD xmm0, xmm0, xmm4
	VMOVAPD   [rsp + 80], xmm11
	VMULPD xmm4, xmm11, xmm11
	VMOVAPD   [rsp + 96], xmm3
	VMULPD xmm5, xmm3, xmm3
	VMOVAPD   [rsp + 112], xmm2
	VMULPD xmm3, xmm2, xmm2
	VMOVAPD   [rsp + 128], xmm1
	VMULPD xmm2, xmm1, xmm1
	VMOVAPD   [rsp + 144], xmm0
	VMULPD xmm1, xmm0, xmm0
	VMOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c25]
	VMOVAPD xmm6,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c26]
	VFMADDPD xmm7, xmm0, xmm4, xmm6
	VFMADDPD xmm8, xmm0, xmm5, xmm6
	VFMADDPD xmm9, xmm0, xmm3, xmm6
	VFMADDPD xmm10, xmm0, xmm2, xmm6
	VFMADDPD xmm0, xmm0, xmm1, xmm6
	VMOVAPD xmm6,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c27]
	VMOVAPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c28]
	VFMADDPD xmm12, xmm6, xmm4, xmm11
	VFMADDPD xmm13, xmm6, xmm5, xmm11
	VFMADDPD xmm14, xmm6, xmm3, xmm11
	VFMADDPD xmm15, xmm6, xmm2, xmm11
	VFMADDPD xmm6, xmm6, xmm1, xmm11
	VMOVAPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c29]
	VFMADDPD xmm7, xmm7, xmm4, xmm11
	VFMADDPD xmm8, xmm8, xmm5, xmm11
	VFMADDPD xmm9, xmm9, xmm3, xmm11
	VFMADDPD xmm10, xmm10, xmm2, xmm11
	VFMADDPD xmm0, xmm0, xmm1, xmm11
	VMOVAPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c30]
	VFMADDPD xmm12, xmm12, xmm4, xmm11
	VFMADDPD xmm13, xmm13, xmm5, xmm11
	VFMADDPD xmm14, xmm14, xmm3, xmm11
	VFMADDPD xmm15, xmm15, xmm2, xmm11
	VFMADDPD xmm6, xmm6, xmm1, xmm11
	VMOVAPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c31]
	VFMADDPD xmm7, xmm7, xmm4, xmm11
	VFMADDPD xmm8, xmm8, xmm5, xmm11
	VFMADDPD xmm9, xmm9, xmm3, xmm11
	VFMADDPD xmm10, xmm10, xmm2, xmm11
	VFMADDPD xmm0, xmm0, xmm1, xmm11
	VMOVAPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c32]
	VFMADDPD xmm12, xmm12, xmm4, xmm11
	VFMADDPD xmm13, xmm13, xmm5, xmm11
	VFMADDPD xmm14, xmm14, xmm3, xmm11
	VFMADDPD xmm15, xmm15, xmm2, xmm11
	VFMADDPD xmm6, xmm6, xmm1, xmm11
	VMOVAPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c33]
	VFMADDPD xmm7, xmm7, xmm4, xmm11
	VFMADDPD xmm8, xmm8, xmm5, xmm11
	VFMADDPD xmm9, xmm9, xmm3, xmm11
	VFMADDPD xmm10, xmm10, xmm2, xmm11
	VFMADDPD xmm0, xmm0, xmm1, xmm11
	VMOVAPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c34]
	VFMADDPD xmm12, xmm12, xmm4, xmm11
	VFMADDPD xmm13, xmm13, xmm5, xmm11
	VFMADDPD xmm14, xmm14, xmm3, xmm11
	VFMADDPD xmm15, xmm15, xmm2, xmm11
	VFMADDPD xmm6, xmm6, xmm1, xmm11
	VMOVAPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c35]
	VFMADDPD xmm7, xmm7, xmm4, xmm11
	VFMADDPD xmm8, xmm8, xmm5, xmm11
	VFMADDPD xmm9, xmm9, xmm3, xmm11
	VFMADDPD xmm10, xmm10, xmm2, xmm11
	VFMADDPD xmm0, xmm0, xmm1, xmm11
	VMOVAPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c36]
	VFMADDPD xmm12, xmm12, xmm4, xmm11
	VFMADDPD xmm13, xmm13, xmm5, xmm11
	VFMADDPD xmm14, xmm14, xmm3, xmm11
	VFMADDPD xmm15, xmm15, xmm2, xmm11
	VFMADDPD xmm6, xmm6, xmm1, xmm11
	VMOVAPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c37]
	VFMADDPD xmm7, xmm7, xmm4, xmm11
	VFMADDPD xmm8, xmm8, xmm5, xmm11
	VFMADDPD xmm9, xmm9, xmm3, xmm11
	VFMADDPD xmm10, xmm10, xmm2, xmm11
	VFMADDPD xmm0, xmm0, xmm1, xmm11
	VMULPD xmm12, xmm12, xmm4
	VMULPD xmm13, xmm13, xmm5
	VMULPD xmm14, xmm14, xmm3
	VMULPD xmm15, xmm15, xmm2
	VMULPD xmm6, xmm6, xmm1
	VMOVAPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c38]
	VFMADDPD xmm7, xmm7, xmm4, xmm11
	VFMADDPD xmm8, xmm8, xmm5, xmm11
	VFMADDPD xmm9, xmm9, xmm3, xmm11
	VFMADDPD xmm10, xmm10, xmm2, xmm11
	VFMADDPD xmm0, xmm0, xmm1, xmm11
	VMOVAPD xmm4,   [rsp + 80]
	VFMADDPD xmm12, xmm12, xmm4, xmm4
	VMOVAPD xmm4,   [rsp + 96]
	VFMADDPD xmm13, xmm13, xmm4, xmm4
	VMOVAPD xmm4,   [rsp + 112]
	VFMADDPD xmm14, xmm14, xmm4, xmm4
	VMOVAPD xmm4,   [rsp + 128]
	VFMADDPD xmm15, xmm15, xmm4, xmm4
	VMOVAPD xmm4,   [rsp + 144]
	VFMADDPD xmm6, xmm6, xmm4, xmm4
	VMOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c39]
	VMOVAPD xmm5,   [rsp]
	VANDPD xmm3, xmm5, xmm4
	VPADDQ xmm5, xmm5, xmm5
	VBLENDVPD xmm5, xmm7, xmm12, xmm5
	VXORPD xmm5, xmm5, xmm3
	VMOVUPD [rdx], xmm5
	VMOVAPD xmm5,   [rsp + 16]
	VANDPD xmm3, xmm5, xmm4
	VPADDQ xmm5, xmm5, xmm5
	VBLENDVPD xmm5, xmm8, xmm13, xmm5
	VXORPD xmm5, xmm5, xmm3
	VMOVUPD [byte rdx + 16], xmm5
	VMOVAPD xmm5,   [rsp + 32]
	VANDPD xmm3, xmm5, xmm4
	VPADDQ xmm5, xmm5, xmm5
	VBLENDVPD xmm5, xmm9, xmm14, xmm5
	VXORPD xmm5, xmm5, xmm3
	VMOVUPD [byte rdx + 32], xmm5
	VMOVAPD xmm5,   [rsp + 48]
	VANDPD xmm3, xmm5, xmm4
	VPADDQ xmm5, xmm5, xmm5
	VBLENDVPD xmm5, xmm10, xmm15, xmm5
	VXORPD xmm5, xmm5, xmm3
	VMOVUPD [byte rdx + 48], xmm5
	VMOVAPD xmm5,   [rsp + 64]
	VANDPD xmm4, xmm5, xmm4
	VPADDQ xmm5, xmm5, xmm5
	VBLENDVPD xmm5, xmm0, xmm6, xmm5
	VXORPD xmm5, xmm5, xmm4
	VMOVUPD [byte rdx + 64], xmm5
	ADD rcx, 80
	ADD rdx, 80
	SUB r8, 10
	JAE .process_batch_full
	.process_restore:
	ADD r8, 10
	JZ .return_ok
	.process_single:
	VMOVSD xmm4, [rcx]
	VMULSD xmm5, xmm4, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c0]
	VADDSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c1]
	VPSLLQ xmm3, xmm5, 62
	VSUBSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c1]
	VMULSD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c2]
	VADDSD xmm4, xmm4, xmm2
	VMOVAPS xmm2, xmm4
	VMULSD xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c3]
	VADDSD xmm4, xmm4, xmm1
	VSUBSD xmm0, xmm4, xmm2
	VSUBSD xmm1, xmm1, xmm0
	VMULSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c4]
	VADDSD xmm5, xmm5, xmm1
	VADDSD xmm4, xmm4, xmm5
	VMULSD xmm5, xmm4, xmm4
	VMOVSD xmm2, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c5]
	VMOVSD xmm1, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c6]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c7]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c8]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c9]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c10]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c11]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c12]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c13]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c14]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c15]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c16]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c17]
	VMULSD xmm1, xmm1, xmm5
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm1, xmm1, xmm4, xmm4
	VMOVSD xmm4, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c19]
	VPAND xmm4, xmm4, xmm3
	VPADDQ xmm3, xmm3, xmm3
	VBLENDVPD xmm5, xmm2, xmm1, xmm3
	VXORPD xmm5, xmm5, xmm4
	VMOVSD [rdx], xmm5
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	VMOVAPS xmm6, [dword rsp + 160]
	VMOVAPS xmm7, [dword rsp + 176]
	VMOVAPS xmm8, [dword rsp + 192]
	VMOVAPS xmm9, [dword rsp + 208]
	VMOVAPS xmm10, [dword rsp + 224]
	VMOVAPS xmm11, [dword rsp + 240]
	VMOVAPS xmm12, [dword rsp + 256]
	VMOVAPS xmm13, [dword rsp + 272]
	VMOVAPS xmm14, [dword rsp + 288]
	VMOVAPS xmm15, [dword rsp + 304]
	ADD rsp, 328
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return

section .rdata$h rdata align=32
_yepMath_Cos_V64f_V64f_Haswell_constants:
	.c0: DQ 0x3FE45F306DC9C883
	.c1: DQ 0x4338000000000002
	.c2: DQ 0xBFF921FB54440000
	.c3: DQ 0xBD868C234C4C8000
	.c4: DQ 0x3B09D747F23E32ED
	.c5: DQ 0x3DA8FA87EF79AE3F
	.c6: DQ 0x3DE5D8711D281543
	.c7: DQ 0xBE21EE9DF6693F7E
	.c8: DQ 0xBE5AE5E38936D046
	.c9: DQ 0x3E927E4F7F65104F
	.c10: DQ 0x3EC71DE3535C8A8A
	.c11: DQ 0xBEFA01A019C94874
	.c12: DQ 0xBF2A01A019BB92C0
	.c13: DQ 0x3F56C16C16C15038
	.c14: DQ 0x3F8111111110F51E
	.c15: DQ 0xBFA555555555554B
	.c16: DQ 0xBFC5555555555546
	.c17: DQ 0x3FE0000000000000
	.c18: DQ 0xBFF0000000000000
	.c19: DQ 0x8000000000000000
	.c20: DQ 0x3FE45F306DC9C883, 0x3FE45F306DC9C883, 0x3FE45F306DC9C883, 0x3FE45F306DC9C883
	.c21: DQ 0x4338000000000002, 0x4338000000000002, 0x4338000000000002, 0x4338000000000002
	.c22: DQ 0xBFF921FB54440000, 0xBFF921FB54440000, 0xBFF921FB54440000, 0xBFF921FB54440000
	.c23: DQ 0xBD868C234C4C8000, 0xBD868C234C4C8000, 0xBD868C234C4C8000, 0xBD868C234C4C8000
	.c24: DQ 0x3B09D747F23E32ED, 0x3B09D747F23E32ED, 0x3B09D747F23E32ED, 0x3B09D747F23E32ED
	.c25: DQ 0x3DA8FA87EF79AE3F, 0x3DA8FA87EF79AE3F, 0x3DA8FA87EF79AE3F, 0x3DA8FA87EF79AE3F
	.c26: DQ 0xBE21EE9DF6693F7E, 0xBE21EE9DF6693F7E, 0xBE21EE9DF6693F7E, 0xBE21EE9DF6693F7E
	.c27: DQ 0x3DE5D8711D281543, 0x3DE5D8711D281543, 0x3DE5D8711D281543, 0x3DE5D8711D281543
	.c28: DQ 0xBE5AE5E38936D046, 0xBE5AE5E38936D046, 0xBE5AE5E38936D046, 0xBE5AE5E38936D046
	.c29: DQ 0x3E927E4F7F65104F, 0x3E927E4F7F65104F, 0x3E927E4F7F65104F, 0x3E927E4F7F65104F
	.c30: DQ 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A
	.c31: DQ 0xBEFA01A019C94874, 0xBEFA01A019C94874, 0xBEFA01A019C94874, 0xBEFA01A019C94874
	.c32: DQ 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0
	.c33: DQ 0x3F56C16C16C15038, 0x3F56C16C16C15038, 0x3F56C16C16C15038, 0x3F56C16C16C15038
	.c34: DQ 0x3F8111111110F51E, 0x3F8111111110F51E, 0x3F8111111110F51E, 0x3F8111111110F51E
	.c35: DQ 0xBFA555555555554B, 0xBFA555555555554B, 0xBFA555555555554B, 0xBFA555555555554B
	.c36: DQ 0xBFC5555555555546, 0xBFC5555555555546, 0xBFC5555555555546, 0xBFC5555555555546
	.c37: DQ 0x3FE0000000000000, 0x3FE0000000000000, 0x3FE0000000000000, 0x3FE0000000000000
	.c38: DQ 0xBFF0000000000000, 0xBFF0000000000000, 0xBFF0000000000000, 0xBFF0000000000000
	.c39: DQ 0x8000000000000000, 0x8000000000000000, 0x8000000000000000, 0x8000000000000000


section .text$h code align=16
global _yepMath_Cos_V64f_V64f_Haswell
_yepMath_Cos_V64f_V64f_Haswell:
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 480
	VMOVAPS [dword rsp + 320], xmm6
	VMOVAPS [dword rsp + 336], xmm7
	VMOVAPS [dword rsp + 352], xmm8
	VMOVAPS [dword rsp + 368], xmm9
	VMOVAPS [dword rsp + 384], xmm10
	VMOVAPS [dword rsp + 400], xmm11
	VMOVAPS [dword rsp + 416], xmm12
	VMOVAPS [dword rsp + 432], xmm13
	VMOVAPS [dword rsp + 448], xmm14
	VMOVAPS [dword rsp + 464], xmm15
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm4, [rcx]
	VMULSD xmm5, xmm4, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c0]
	VADDSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c1]
	VPSLLQ xmm3, xmm5, 62
	VSUBSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c1]
	VMULSD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c2]
	VADDSD xmm4, xmm4, xmm2
	VMOVAPS xmm2, xmm4
	VMULSD xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c3]
	VADDSD xmm4, xmm4, xmm1
	VSUBSD xmm0, xmm4, xmm2
	VSUBSD xmm1, xmm1, xmm0
	VMULSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c4]
	VADDSD xmm5, xmm5, xmm1
	VADDSD xmm4, xmm4, xmm5
	VMULSD xmm5, xmm4, xmm4
	VMOVSD xmm2, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c5]
	VMOVSD xmm1, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c6]
	VFMADD213SD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c7]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c8]
	VFMADD213SD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c9]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c10]
	VFMADD213SD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c11]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c12]
	VFMADD213SD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c13]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c14]
	VFMADD213SD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c15]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c16]
	VFMADD213SD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c17]
	VMULSD xmm1, xmm1, xmm5
	VFMADD213SD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c18]
	VFMADD213SD xmm1, xmm4, xmm4
	VMOVSD xmm4, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c19]
	VPAND xmm4, xmm4, xmm3
	VPADDQ xmm3, xmm3, xmm3
	VBLENDVPD xmm5, xmm2, xmm1, xmm3
	VXORPD xmm5, xmm5, xmm4
	VMOVSD [rdx], xmm5
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB r8, 20
	JB .process_restore
	align 32
	.process_batch_full:
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c20]
	VMOVAPS ymm5,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c21]
	VMOVAPD ymm3, [rcx]
	VMULPD ymm2, ymm3, ymm4
	VADDPD ymm2, ymm2, ymm5
	VMOVAPD ymm1, [byte rcx + 32]
	VMULPD ymm0, ymm1, ymm4
	VADDPD ymm0, ymm0, ymm5
	VMOVAPD ymm6, [byte rcx + 64]
	VMULPD ymm7, ymm6, ymm4
	VADDPD ymm7, ymm7, ymm5
	VMOVAPD ymm8, [byte rcx + 96]
	VMULPD ymm9, ymm8, ymm4
	VADDPD ymm9, ymm9, ymm5
	VMOVAPD ymm10, [dword rcx + 128]
	VMULPD ymm4, ymm10, ymm4
	VADDPD ymm4, ymm4, ymm5
	VEXTRACTF128 xmm11, ymm2, 1
	VPSLLQ xmm12, xmm2, 62
	VMOVDQA   [rsp], xmm12
	VPSLLQ xmm11, xmm11, 62
	VMOVDQA   [rsp + 16], xmm11
	VSUBPD ymm2, ymm2, ymm5
	VEXTRACTF128 xmm11, ymm0, 1
	VPSLLQ xmm12, xmm0, 62
	VMOVDQA   [rsp + 32], xmm12
	VPSLLQ xmm11, xmm11, 62
	VMOVDQA   [rsp + 48], xmm11
	VSUBPD ymm0, ymm0, ymm5
	VEXTRACTF128 xmm11, ymm7, 1
	VPSLLQ xmm12, xmm7, 62
	VMOVDQA   [rsp + 64], xmm12
	VPSLLQ xmm11, xmm11, 62
	VMOVDQA   [rsp + 80], xmm11
	VSUBPD ymm7, ymm7, ymm5
	VEXTRACTF128 xmm11, ymm9, 1
	VPSLLQ xmm12, xmm9, 62
	VMOVDQA   [rsp + 96], xmm12
	VPSLLQ xmm11, xmm11, 62
	VMOVDQA   [rsp + 112], xmm11
	VSUBPD ymm9, ymm9, ymm5
	VEXTRACTF128 xmm11, ymm4, 1
	VPSLLQ xmm12, xmm4, 62
	VMOVDQA   [rsp + 128], xmm12
	VPSLLQ xmm11, xmm11, 62
	VMOVDQA   [rsp + 144], xmm11
	VSUBPD ymm4, ymm4, ymm5
	VMULPD ymm5, ymm2,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c22]
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm5, ymm0,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c22]
	VADDPD ymm1, ymm1, ymm5
	VMULPD ymm5, ymm7,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c22]
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm5, ymm9,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c22]
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm5, ymm4,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c22]
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm5, ymm2,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c23]
	VADDPD ymm11, ymm3, ymm5
	VSUBPD ymm3, ymm11, ymm3
	VSUBPD ymm5, ymm5, ymm3
	VMULPD ymm2, ymm2,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c24]
	VADDPD ymm2, ymm2, ymm5
	VADDPD ymm11, ymm11, ymm2
	VMULPD ymm5, ymm0,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c23]
	VADDPD ymm3, ymm1, ymm5
	VSUBPD ymm2, ymm3, ymm1
	VSUBPD ymm5, ymm5, ymm2
	VMULPD ymm0, ymm0,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c24]
	VADDPD ymm0, ymm0, ymm5
	VADDPD ymm3, ymm3, ymm0
	VMULPD ymm5, ymm7,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c23]
	VADDPD ymm2, ymm6, ymm5
	VSUBPD ymm1, ymm2, ymm6
	VSUBPD ymm5, ymm5, ymm1
	VMULPD ymm7, ymm7,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c24]
	VADDPD ymm7, ymm7, ymm5
	VADDPD ymm2, ymm2, ymm7
	VMULPD ymm5, ymm9,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c23]
	VADDPD ymm1, ymm8, ymm5
	VSUBPD ymm0, ymm1, ymm8
	VSUBPD ymm5, ymm5, ymm0
	VMULPD ymm9, ymm9,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c24]
	VADDPD ymm9, ymm9, ymm5
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm5, ymm4,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c23]
	VADDPD ymm0, ymm10, ymm5
	VSUBPD ymm6, ymm0, ymm10
	VSUBPD ymm5, ymm5, ymm6
	VMULPD ymm4, ymm4,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c24]
	VADDPD ymm4, ymm4, ymm5
	VADDPD ymm0, ymm0, ymm4
	VMOVAPD   [rsp + 160], ymm11
	VMULPD ymm4, ymm11, ymm11
	VMOVAPD   [rsp + 192], ymm3
	VMULPD ymm5, ymm3, ymm3
	VMOVAPD   [rsp + 224], ymm2
	VMULPD ymm3, ymm2, ymm2
	VMOVAPD   [rsp + 256], ymm1
	VMULPD ymm2, ymm1, ymm1
	VMOVAPD   [rsp + 288], ymm0
	VMULPD ymm1, ymm0, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c25]
	VMOVAPS ymm6,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c26]
	VMOVAPD ymm7, ymm0
	VFMADD132PD ymm7, ymm6, ymm4
	VMOVAPD ymm8, ymm0
	VFMADD132PD ymm8, ymm6, ymm5
	VMOVAPD ymm9, ymm0
	VFMADD132PD ymm9, ymm6, ymm3
	VMOVAPD ymm10, ymm0
	VFMADD132PD ymm10, ymm6, ymm2
	VFMADD132PD ymm0, ymm6, ymm1
	VMOVAPS ymm6,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c27]
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c28]
	VMOVAPD ymm12, ymm6
	VFMADD132PD ymm12, ymm11, ymm4
	VMOVAPD ymm13, ymm6
	VFMADD132PD ymm13, ymm11, ymm5
	VMOVAPD ymm14, ymm6
	VFMADD132PD ymm14, ymm11, ymm3
	VMOVAPD ymm15, ymm6
	VFMADD132PD ymm15, ymm11, ymm2
	VFMADD132PD ymm6, ymm11, ymm1
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c29]
	VFMADD132PD ymm7, ymm11, ymm4
	VFMADD132PD ymm8, ymm11, ymm5
	VFMADD132PD ymm9, ymm11, ymm3
	VFMADD132PD ymm10, ymm11, ymm2
	VFMADD132PD ymm0, ymm11, ymm1
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c30]
	VFMADD132PD ymm12, ymm11, ymm4
	VFMADD132PD ymm13, ymm11, ymm5
	VFMADD132PD ymm14, ymm11, ymm3
	VFMADD132PD ymm15, ymm11, ymm2
	VFMADD132PD ymm6, ymm11, ymm1
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c31]
	VFMADD132PD ymm7, ymm11, ymm4
	VFMADD132PD ymm8, ymm11, ymm5
	VFMADD132PD ymm9, ymm11, ymm3
	VFMADD132PD ymm10, ymm11, ymm2
	VFMADD132PD ymm0, ymm11, ymm1
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c32]
	VFMADD132PD ymm12, ymm11, ymm4
	VFMADD132PD ymm13, ymm11, ymm5
	VFMADD132PD ymm14, ymm11, ymm3
	VFMADD132PD ymm15, ymm11, ymm2
	VFMADD132PD ymm6, ymm11, ymm1
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c33]
	VFMADD132PD ymm7, ymm11, ymm4
	VFMADD132PD ymm8, ymm11, ymm5
	VFMADD132PD ymm9, ymm11, ymm3
	VFMADD132PD ymm10, ymm11, ymm2
	VFMADD132PD ymm0, ymm11, ymm1
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c34]
	VFMADD132PD ymm12, ymm11, ymm4
	VFMADD132PD ymm13, ymm11, ymm5
	VFMADD132PD ymm14, ymm11, ymm3
	VFMADD132PD ymm15, ymm11, ymm2
	VFMADD132PD ymm6, ymm11, ymm1
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c35]
	VFMADD132PD ymm7, ymm11, ymm4
	VFMADD132PD ymm8, ymm11, ymm5
	VFMADD132PD ymm9, ymm11, ymm3
	VFMADD132PD ymm10, ymm11, ymm2
	VFMADD132PD ymm0, ymm11, ymm1
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c36]
	VFMADD132PD ymm12, ymm11, ymm4
	VFMADD132PD ymm13, ymm11, ymm5
	VFMADD132PD ymm14, ymm11, ymm3
	VFMADD132PD ymm15, ymm11, ymm2
	VFMADD132PD ymm6, ymm11, ymm1
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c37]
	VFMADD132PD ymm7, ymm11, ymm4
	VFMADD132PD ymm8, ymm11, ymm5
	VFMADD132PD ymm9, ymm11, ymm3
	VFMADD132PD ymm10, ymm11, ymm2
	VFMADD132PD ymm0, ymm11, ymm1
	VMULPD ymm12, ymm12, ymm4
	VMULPD ymm13, ymm13, ymm5
	VMULPD ymm14, ymm14, ymm3
	VMULPD ymm15, ymm15, ymm2
	VMULPD ymm6, ymm6, ymm1
	VMOVAPS ymm11,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c38]
	VFMADD132PD ymm7, ymm11, ymm4
	VFMADD132PD ymm8, ymm11, ymm5
	VFMADD132PD ymm9, ymm11, ymm3
	VFMADD132PD ymm10, ymm11, ymm2
	VFMADD132PD ymm0, ymm11, ymm1
	VMOVAPD ymm4,   [rsp + 160]
	VFMADD132PD ymm12, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 192]
	VFMADD132PD ymm13, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 224]
	VFMADD132PD ymm14, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 256]
	VFMADD132PD ymm15, ymm4, ymm4
	VMOVAPD ymm4,   [rsp + 288]
	VFMADD132PD ymm6, ymm4, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c39]
	VMOVAPD ymm5,   [rsp]
	VANDPD ymm3, ymm5, ymm4
	VPADDQ ymm5, ymm5, ymm5
	VBLENDVPD ymm5, ymm7, ymm12, ymm5
	VXORPD ymm5, ymm5, ymm3
	VMOVUPD [rdx], ymm5
	VMOVAPD ymm5,   [rsp + 32]
	VANDPD ymm3, ymm5, ymm4
	VPADDQ ymm5, ymm5, ymm5
	VBLENDVPD ymm5, ymm8, ymm13, ymm5
	VXORPD ymm5, ymm5, ymm3
	VMOVUPD [byte rdx + 32], ymm5
	VMOVAPD ymm5,   [rsp + 64]
	VANDPD ymm3, ymm5, ymm4
	VPADDQ ymm5, ymm5, ymm5
	VBLENDVPD ymm5, ymm9, ymm14, ymm5
	VXORPD ymm5, ymm5, ymm3
	VMOVUPD [byte rdx + 64], ymm5
	VMOVAPD ymm5,   [rsp + 96]
	VANDPD ymm3, ymm5, ymm4
	VPADDQ ymm5, ymm5, ymm5
	VBLENDVPD ymm5, ymm10, ymm15, ymm5
	VXORPD ymm5, ymm5, ymm3
	VMOVUPD [byte rdx + 96], ymm5
	VMOVAPD ymm5,   [rsp + 128]
	VANDPD ymm4, ymm5, ymm4
	VPADDQ ymm5, ymm5, ymm5
	VBLENDVPD ymm5, ymm0, ymm6, ymm5
	VXORPD ymm5, ymm5, ymm4
	VMOVUPD [dword rdx + 128], ymm5
	ADD rcx, 160
	ADD rdx, 160
	SUB r8, 20
	JAE .process_batch_full
	.process_restore:
	ADD r8, 20
	JZ .return_ok
	.process_single:
	VMOVSD xmm4, [rcx]
	VMULSD xmm5, xmm4, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c0]
	VADDSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c1]
	VPSLLQ xmm3, xmm5, 62
	VSUBSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c1]
	VMULSD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c2]
	VADDSD xmm4, xmm4, xmm2
	VMOVAPS xmm2, xmm4
	VMULSD xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c3]
	VADDSD xmm4, xmm4, xmm1
	VSUBSD xmm0, xmm4, xmm2
	VSUBSD xmm1, xmm1, xmm0
	VMULSD xmm5, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c4]
	VADDSD xmm5, xmm5, xmm1
	VADDSD xmm4, xmm4, xmm5
	VMULSD xmm5, xmm4, xmm4
	VMOVSD xmm2, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c5]
	VMOVSD xmm1, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c6]
	VFMADD213SD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c7]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c8]
	VFMADD213SD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c9]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c10]
	VFMADD213SD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c11]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c12]
	VFMADD213SD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c13]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c14]
	VFMADD213SD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c15]
	VFMADD213SD xmm1, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c16]
	VFMADD213SD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c17]
	VMULSD xmm1, xmm1, xmm5
	VFMADD213SD xmm2, xmm5, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c18]
	VFMADD213SD xmm1, xmm4, xmm4
	VMOVSD xmm4, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c19]
	VPAND xmm4, xmm4, xmm3
	VPADDQ xmm3, xmm3, xmm3
	VBLENDVPD xmm5, xmm2, xmm1, xmm3
	VXORPD xmm5, xmm5, xmm4
	VMOVSD [rdx], xmm5
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	VMOVAPS xmm6, [dword rsp + 320]
	VMOVAPS xmm7, [dword rsp + 336]
	VMOVAPS xmm8, [dword rsp + 352]
	VMOVAPS xmm9, [dword rsp + 368]
	VMOVAPS xmm10, [dword rsp + 384]
	VMOVAPS xmm11, [dword rsp + 400]
	VMOVAPS xmm12, [dword rsp + 416]
	VMOVAPS xmm13, [dword rsp + 432]
	VMOVAPS xmm14, [dword rsp + 448]
	VMOVAPS xmm15, [dword rsp + 464]
	MOV rsp, [dword rsp + 480]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
