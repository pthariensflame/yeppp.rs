;                       Yeppp! library implementation
;                   This file is auto-generated by Peach-Py,
;        Portable Efficient Assembly Code-generator in Higher-level Python,
;                  part of the Yeppp! library infrastructure
; This file is part of Yeppp! library and licensed under the New BSD license.
; See LICENSE.txt for the full text of the license.

section .rdata$n rdata align=32
_yepMath_Tan_V64f_V64f_Bulldozer_constants:
	.c0: DQ 0x3FE45F306DC9C883
	.c1: DQ 0x4338000000000000
	.c2: DQ 0xBFF921FB54440000
	.c3: DQ 0xBD868C234C4C8000
	.c4: DQ 0x3B09D747F23E32ED
	.c5: DQ 0xBDA8FA87EF79AE3F
	.c6: DQ 0x3DE5D8711D281543
	.c7: DQ 0x3E21EE9DF6693F7E
	.c8: DQ 0xBE5AE5E38936D046
	.c9: DQ 0xBE927E4F7F65104F
	.c10: DQ 0x3EC71DE3535C8A8A
	.c11: DQ 0x3EFA01A019C94874
	.c12: DQ 0xBF2A01A019BB92C0
	.c13: DQ 0xBF56C16C16C15038
	.c14: DQ 0x3F8111111110F51E
	.c15: DQ 0x3FA555555555554B
	.c16: DQ 0xBFC5555555555546
	.c17: DQ 0xBFE0000000000000
	.c18: DQ 0x3FF0000000000000
	.c19: DQ 0x7FF0000000000000
	.c20: DQ 0x3FE0000000000000
	ALIGN 32
	.c21: DQ 0x3FF0000000000000, 0x3FF0000000000000
	ALIGN 32
	.c22: DQ 0x3FE45F306DC9C883, 0x3FE45F306DC9C883, 0x3FE45F306DC9C883, 0x3FE45F306DC9C883
	.c23: DQ 0x4338000000000000, 0x4338000000000000, 0x4338000000000000, 0x4338000000000000
	.c24: DQ 0xBFF921FB54440000, 0xBFF921FB54440000, 0xBFF921FB54440000, 0xBFF921FB54440000
	.c25: DQ 0xBD868C234C4C8000, 0xBD868C234C4C8000, 0xBD868C234C4C8000, 0xBD868C234C4C8000
	.c26: DQ 0x3B09D747F23E32ED, 0x3B09D747F23E32ED, 0x3B09D747F23E32ED, 0x3B09D747F23E32ED
	.c27: DQ 0xBDA8FA87EF79AE3F, 0xBDA8FA87EF79AE3F, 0xBDA8FA87EF79AE3F, 0xBDA8FA87EF79AE3F
	.c28: DQ 0x3E21EE9DF6693F7E, 0x3E21EE9DF6693F7E, 0x3E21EE9DF6693F7E, 0x3E21EE9DF6693F7E
	.c29: DQ 0x3DE5D8711D281543, 0x3DE5D8711D281543, 0x3DE5D8711D281543, 0x3DE5D8711D281543
	.c30: DQ 0xBE5AE5E38936D046, 0xBE5AE5E38936D046, 0xBE5AE5E38936D046, 0xBE5AE5E38936D046
	.c31: DQ 0xBE927E4F7F65104F, 0xBE927E4F7F65104F, 0xBE927E4F7F65104F, 0xBE927E4F7F65104F
	.c32: DQ 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A
	.c33: DQ 0x3EFA01A019C94874, 0x3EFA01A019C94874, 0x3EFA01A019C94874, 0x3EFA01A019C94874
	.c34: DQ 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0
	.c35: DQ 0xBF56C16C16C15038, 0xBF56C16C16C15038, 0xBF56C16C16C15038, 0xBF56C16C16C15038
	.c36: DQ 0x3F8111111110F51E, 0x3F8111111110F51E, 0x3F8111111110F51E, 0x3F8111111110F51E
	.c37: DQ 0x3FA555555555554B, 0x3FA555555555554B, 0x3FA555555555554B, 0x3FA555555555554B
	.c38: DQ 0xBFC5555555555546, 0xBFC5555555555546, 0xBFC5555555555546, 0xBFC5555555555546
	.c39: DQ 0xBFE0000000000000, 0xBFE0000000000000, 0xBFE0000000000000, 0xBFE0000000000000
	.c40: DQ 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000, 0x3FF0000000000000
	.c41: DQ 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000
	.c42: DQ 0x3FE0000000000000, 0x3FE0000000000000, 0x3FE0000000000000, 0x3FE0000000000000


section .text$n code align=16
global _yepMath_Tan_V64f_V64f_Bulldozer
_yepMath_Tan_V64f_V64f_Bulldozer:
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 480
	VMOVAPS [dword rsp + 320], xmm6
	VMOVAPS [dword rsp + 336], xmm7
	VMOVAPS [dword rsp + 352], xmm8
	VMOVAPS [dword rsp + 368], xmm9
	VMOVAPS [dword rsp + 384], xmm10
	VMOVAPS [dword rsp + 400], xmm11
	VMOVAPS [dword rsp + 416], xmm12
	VMOVAPS [dword rsp + 432], xmm13
	VMOVAPS [dword rsp + 448], xmm14
	VMOVAPS [dword rsp + 464], xmm15
	TEST rcx, rcx
	JZ .return_null_pointer
	TEST rcx, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_null_pointer
	TEST rdx, 7
	JNZ .return_misaligned_pointer
	TEST r8, r8
	JZ .return_ok
	TEST rcx, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm4, [rcx]
	VMULSD xmm5, xmm4, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c0]
	VADDSD xmm5, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c1]
	VPSLLQ xmm3, xmm5, 63
	VSUBSD xmm5, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c1]
	VMULSD xmm2, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c2]
	VADDSD xmm4, xmm4, xmm2
	VMOVAPS xmm2, xmm4
	VMULSD xmm1, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c3]
	VADDSD xmm4, xmm4, xmm1
	VSUBSD xmm0, xmm4, xmm2
	VSUBSD xmm1, xmm1, xmm0
	VMULSD xmm5, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c4]
	VADDSD xmm5, xmm5, xmm1
	VADDSD xmm4, xmm4, xmm5
	VMULSD xmm5, xmm4, xmm4
	VMOVSD xmm2, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c5]
	VMOVSD xmm1, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c6]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c7]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c8]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c9]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c10]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c11]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c12]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c13]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c14]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c15]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c16]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c17]
	VMULSD xmm1, xmm1, xmm5
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm1, xmm1, xmm4, xmm4
	VXORPD xmm1, xmm1, xmm3
	VBLENDVPD xmm4, xmm1, xmm2, xmm3
	VBLENDVPD xmm5, xmm2, xmm1, xmm3
	VMOVSD xmm3, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c19]
	VANDPD xmm2, xmm5, xmm3
	VXORPD xmm2, xmm2, xmm3
	VMULSD xmm2, xmm2, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c20]
	VANDNPD xmm3, xmm3, xmm5
	VORPS xmm3, xmm3,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c21]
	VCVTPD2PS xmm1, xmm3
	VRCPPS xmm1, xmm1
	VCVTPS2PD xmm1, xmm1
	VFNMADDSD xmm0, xmm1, xmm3, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm1, xmm1, xmm0, xmm1
	VFNMADDSD xmm0, xmm1, xmm3, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm1, xmm1, xmm0, xmm1
	VFNMADDSD xmm0, xmm1, xmm3, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm1, xmm1, xmm0, xmm1
	VMULSD xmm3, xmm1, xmm2
	VMULSD xmm2, xmm4, xmm3
	VFNMADDSD xmm0, xmm5, xmm2, xmm4
	VFMADDSD xmm2, xmm0, xmm3, xmm2
	VMOVSD [rdx], xmm2
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JZ .return_ok
	TEST rcx, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB r8, 20
	JB .process_restore
	align 32
	.process_batch_full:
	VMOVAPS ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c22]
	VMOVAPS ymm5,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c23]
	VMOVAPD ymm3, [rcx]
	VMULPD ymm2, ymm3, ymm4
	VADDPD ymm2, ymm2, ymm5
	VMOVAPD ymm1, [byte rcx + 32]
	VMULPD ymm0, ymm1, ymm4
	VADDPD ymm0, ymm0, ymm5
	VMOVAPD ymm6, [byte rcx + 64]
	VMULPD ymm7, ymm6, ymm4
	VADDPD ymm7, ymm7, ymm5
	VMOVAPD ymm8, [byte rcx + 96]
	VMULPD ymm9, ymm8, ymm4
	VADDPD ymm9, ymm9, ymm5
	VMOVAPD ymm10, [dword rcx + 128]
	VMULPD ymm4, ymm10, ymm4
	VADDPD ymm4, ymm4, ymm5
	VEXTRACTF128 xmm11, ymm2, 1
	VPSLLQ xmm12, xmm2, 63
	VMOVDQA   [rsp], xmm12
	VPSLLQ xmm11, xmm11, 63
	VMOVDQA   [rsp + 16], xmm11
	VSUBPD ymm2, ymm2, ymm5
	VEXTRACTF128 xmm11, ymm0, 1
	VPSLLQ xmm12, xmm0, 63
	VMOVDQA   [rsp + 32], xmm12
	VPSLLQ xmm11, xmm11, 63
	VMOVDQA   [rsp + 48], xmm11
	VSUBPD ymm0, ymm0, ymm5
	VEXTRACTF128 xmm11, ymm7, 1
	VPSLLQ xmm12, xmm7, 63
	VMOVDQA   [rsp + 64], xmm12
	VPSLLQ xmm11, xmm11, 63
	VMOVDQA   [rsp + 80], xmm11
	VSUBPD ymm7, ymm7, ymm5
	VEXTRACTF128 xmm11, ymm9, 1
	VPSLLQ xmm12, xmm9, 63
	VMOVDQA   [rsp + 96], xmm12
	VPSLLQ xmm11, xmm11, 63
	VMOVDQA   [rsp + 112], xmm11
	VSUBPD ymm9, ymm9, ymm5
	VEXTRACTF128 xmm11, ymm4, 1
	VPSLLQ xmm12, xmm4, 63
	VMOVDQA   [rsp + 128], xmm12
	VPSLLQ xmm11, xmm11, 63
	VMOVDQA   [rsp + 144], xmm11
	VSUBPD ymm4, ymm4, ymm5
	VMULPD ymm5, ymm2,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c24]
	VADDPD ymm3, ymm3, ymm5
	VMULPD ymm5, ymm0,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c24]
	VADDPD ymm1, ymm1, ymm5
	VMULPD ymm5, ymm7,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c24]
	VADDPD ymm6, ymm6, ymm5
	VMULPD ymm5, ymm9,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c24]
	VADDPD ymm8, ymm8, ymm5
	VMULPD ymm5, ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c24]
	VADDPD ymm10, ymm10, ymm5
	VMULPD ymm5, ymm2,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c25]
	VADDPD ymm11, ymm3, ymm5
	VSUBPD ymm3, ymm11, ymm3
	VSUBPD ymm5, ymm5, ymm3
	VMULPD ymm2, ymm2,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c26]
	VADDPD ymm2, ymm2, ymm5
	VADDPD ymm11, ymm11, ymm2
	VMULPD ymm5, ymm0,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c25]
	VADDPD ymm3, ymm1, ymm5
	VSUBPD ymm2, ymm3, ymm1
	VSUBPD ymm5, ymm5, ymm2
	VMULPD ymm0, ymm0,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c26]
	VADDPD ymm0, ymm0, ymm5
	VADDPD ymm3, ymm3, ymm0
	VMULPD ymm5, ymm7,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c25]
	VADDPD ymm2, ymm6, ymm5
	VSUBPD ymm1, ymm2, ymm6
	VSUBPD ymm5, ymm5, ymm1
	VMULPD ymm7, ymm7,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c26]
	VADDPD ymm7, ymm7, ymm5
	VADDPD ymm2, ymm2, ymm7
	VMULPD ymm5, ymm9,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c25]
	VADDPD ymm1, ymm8, ymm5
	VSUBPD ymm0, ymm1, ymm8
	VSUBPD ymm5, ymm5, ymm0
	VMULPD ymm9, ymm9,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c26]
	VADDPD ymm9, ymm9, ymm5
	VADDPD ymm1, ymm1, ymm9
	VMULPD ymm5, ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c25]
	VADDPD ymm0, ymm10, ymm5
	VSUBPD ymm6, ymm0, ymm10
	VSUBPD ymm5, ymm5, ymm6
	VMULPD ymm4, ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c26]
	VADDPD ymm4, ymm4, ymm5
	VADDPD ymm0, ymm0, ymm4
	VMOVAPD   [rsp + 160], ymm11
	VMULPD ymm4, ymm11, ymm11
	VMOVAPD   [rsp + 192], ymm3
	VMULPD ymm5, ymm3, ymm3
	VMOVAPD   [rsp + 224], ymm2
	VMULPD ymm3, ymm2, ymm2
	VMOVAPD   [rsp + 256], ymm1
	VMULPD ymm2, ymm1, ymm1
	VMOVAPD   [rsp + 288], ymm0
	VMULPD ymm1, ymm0, ymm0
	VMOVAPS ymm0,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c27]
	VMOVAPS ymm6,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c28]
	VFMADDPD ymm7, ymm0, ymm4, ymm6
	VFMADDPD ymm8, ymm0, ymm5, ymm6
	VFMADDPD ymm9, ymm0, ymm3, ymm6
	VFMADDPD ymm10, ymm0, ymm2, ymm6
	VFMADDPD ymm0, ymm0, ymm1, ymm6
	VMOVAPS ymm6,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c29]
	VMOVAPS ymm11,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c30]
	VFMADDPD ymm12, ymm6, ymm4, ymm11
	VFMADDPD ymm13, ymm6, ymm5, ymm11
	VFMADDPD ymm14, ymm6, ymm3, ymm11
	VFMADDPD ymm15, ymm6, ymm2, ymm11
	VFMADDPD ymm6, ymm6, ymm1, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c31]
	VFMADDPD ymm7, ymm7, ymm4, ymm11
	VFMADDPD ymm8, ymm8, ymm5, ymm11
	VFMADDPD ymm9, ymm9, ymm3, ymm11
	VFMADDPD ymm10, ymm10, ymm2, ymm11
	VFMADDPD ymm0, ymm0, ymm1, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c32]
	VFMADDPD ymm12, ymm12, ymm4, ymm11
	VFMADDPD ymm13, ymm13, ymm5, ymm11
	VFMADDPD ymm14, ymm14, ymm3, ymm11
	VFMADDPD ymm15, ymm15, ymm2, ymm11
	VFMADDPD ymm6, ymm6, ymm1, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c33]
	VFMADDPD ymm7, ymm7, ymm4, ymm11
	VFMADDPD ymm8, ymm8, ymm5, ymm11
	VFMADDPD ymm9, ymm9, ymm3, ymm11
	VFMADDPD ymm10, ymm10, ymm2, ymm11
	VFMADDPD ymm0, ymm0, ymm1, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c34]
	VFMADDPD ymm12, ymm12, ymm4, ymm11
	VFMADDPD ymm13, ymm13, ymm5, ymm11
	VFMADDPD ymm14, ymm14, ymm3, ymm11
	VFMADDPD ymm15, ymm15, ymm2, ymm11
	VFMADDPD ymm6, ymm6, ymm1, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c35]
	VFMADDPD ymm7, ymm7, ymm4, ymm11
	VFMADDPD ymm8, ymm8, ymm5, ymm11
	VFMADDPD ymm9, ymm9, ymm3, ymm11
	VFMADDPD ymm10, ymm10, ymm2, ymm11
	VFMADDPD ymm0, ymm0, ymm1, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c36]
	VFMADDPD ymm12, ymm12, ymm4, ymm11
	VFMADDPD ymm13, ymm13, ymm5, ymm11
	VFMADDPD ymm14, ymm14, ymm3, ymm11
	VFMADDPD ymm15, ymm15, ymm2, ymm11
	VFMADDPD ymm6, ymm6, ymm1, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c37]
	VFMADDPD ymm7, ymm7, ymm4, ymm11
	VFMADDPD ymm8, ymm8, ymm5, ymm11
	VFMADDPD ymm9, ymm9, ymm3, ymm11
	VFMADDPD ymm10, ymm10, ymm2, ymm11
	VFMADDPD ymm0, ymm0, ymm1, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c38]
	VFMADDPD ymm12, ymm12, ymm4, ymm11
	VFMADDPD ymm13, ymm13, ymm5, ymm11
	VFMADDPD ymm14, ymm14, ymm3, ymm11
	VFMADDPD ymm15, ymm15, ymm2, ymm11
	VFMADDPD ymm6, ymm6, ymm1, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c39]
	VFMADDPD ymm7, ymm7, ymm4, ymm11
	VFMADDPD ymm8, ymm8, ymm5, ymm11
	VFMADDPD ymm9, ymm9, ymm3, ymm11
	VFMADDPD ymm10, ymm10, ymm2, ymm11
	VFMADDPD ymm0, ymm0, ymm1, ymm11
	VMOVAPS ymm11,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c40]
	VMULPD ymm12, ymm12, ymm4
	VFMADDPD ymm7, ymm7, ymm4, ymm11
	VMOVAPD ymm4,   [rsp + 160]
	VFMADDPD ymm12, ymm12, ymm4, ymm4
	VMULPD ymm13, ymm13, ymm5
	VFMADDPD ymm8, ymm8, ymm5, ymm11
	VMOVAPD ymm4,   [rsp + 192]
	VFMADDPD ymm13, ymm13, ymm4, ymm4
	VMULPD ymm14, ymm14, ymm3
	VFMADDPD ymm9, ymm9, ymm3, ymm11
	VMOVAPD ymm4,   [rsp + 224]
	VFMADDPD ymm14, ymm14, ymm4, ymm4
	VMULPD ymm15, ymm15, ymm2
	VFMADDPD ymm10, ymm10, ymm2, ymm11
	VMOVAPD ymm4,   [rsp + 256]
	VFMADDPD ymm15, ymm15, ymm4, ymm4
	VMULPD ymm6, ymm6, ymm1
	VFMADDPD ymm0, ymm0, ymm1, ymm11
	VMOVAPD ymm4,   [rsp + 288]
	VFMADDPD ymm6, ymm6, ymm4, ymm4
	VMOVAPD ymm4,   [rsp]
	VXORPD ymm12, ymm12, ymm4
	VBLENDVPD ymm5, ymm12, ymm7, ymm4
	VBLENDVPD ymm4, ymm7, ymm12, ymm4
	VMOVAPD ymm3,   [rsp + 32]
	VXORPD ymm13, ymm13, ymm3
	VBLENDVPD ymm2, ymm13, ymm8, ymm3
	VBLENDVPD ymm3, ymm8, ymm13, ymm3
	VMOVAPD ymm1,   [rsp + 64]
	VXORPD ymm14, ymm14, ymm1
	VBLENDVPD ymm7, ymm14, ymm9, ymm1
	VBLENDVPD ymm1, ymm9, ymm14, ymm1
	VMOVAPD ymm8,   [rsp + 96]
	VXORPD ymm15, ymm15, ymm8
	VBLENDVPD ymm9, ymm15, ymm10, ymm8
	VBLENDVPD ymm8, ymm10, ymm15, ymm8
	VMOVAPD ymm10,   [rsp + 128]
	VXORPD ymm6, ymm6, ymm10
	VBLENDVPD ymm11, ymm6, ymm0, ymm10
	VBLENDVPD ymm0, ymm0, ymm6, ymm10
	VMOVAPD ymm6,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c41]
	VMOVAPD ymm10,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c40]
	VANDPD ymm12, ymm4, ymm6
	VXORPD ymm12, ymm12, ymm6
	VMULPD ymm12, ymm12,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c42]
	VANDNPD ymm13, ymm6, ymm4
	VORPS ymm13, ymm13, ymm10
	VCVTPD2PS xmm14, ymm13
	VRCPPS xmm14, xmm14
	VCVTPS2PD ymm14, xmm14
	VFNMADDPD ymm15, ymm14, ymm13, ymm10
	VFMADDPD ymm14, ymm14, ymm15, ymm14
	VFNMADDPD ymm15, ymm14, ymm13, ymm10
	VFMADDPD ymm14, ymm14, ymm15, ymm14
	VFNMADDPD ymm15, ymm14, ymm13, ymm10
	VFMADDPD ymm14, ymm14, ymm15, ymm14
	VMULPD ymm12, ymm14, ymm12
	VMULPD ymm13, ymm5, ymm12
	VFNMADDPD ymm15, ymm4, ymm13, ymm5
	VFMADDPD ymm13, ymm15, ymm12, ymm13
	VMOVUPD [rdx], xmm13
	VEXTRACTF128 [byte rdx + 16], ymm13, 1
	VANDPD ymm4, ymm3, ymm6
	VXORPD ymm4, ymm4, ymm6
	VMULPD ymm4, ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c42]
	VANDNPD ymm5, ymm6, ymm3
	VORPS ymm5, ymm5, ymm10
	VCVTPD2PS xmm12, ymm5
	VRCPPS xmm12, xmm12
	VCVTPS2PD ymm12, xmm12
	VFNMADDPD ymm13, ymm12, ymm5, ymm10
	VFMADDPD ymm12, ymm12, ymm13, ymm12
	VFNMADDPD ymm13, ymm12, ymm5, ymm10
	VFMADDPD ymm12, ymm12, ymm13, ymm12
	VFNMADDPD ymm13, ymm12, ymm5, ymm10
	VFMADDPD ymm12, ymm12, ymm13, ymm12
	VMULPD ymm4, ymm12, ymm4
	VMULPD ymm5, ymm2, ymm4
	VFNMADDPD ymm13, ymm3, ymm5, ymm2
	VFMADDPD ymm5, ymm13, ymm4, ymm5
	VMOVUPD [byte rdx + 32], xmm5
	VEXTRACTF128 [byte rdx + 48], ymm5, 1
	VANDPD ymm4, ymm1, ymm6
	VXORPD ymm4, ymm4, ymm6
	VMULPD ymm4, ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c42]
	VANDNPD ymm5, ymm6, ymm1
	VORPS ymm5, ymm5, ymm10
	VCVTPD2PS xmm3, ymm5
	VRCPPS xmm3, xmm3
	VCVTPS2PD ymm3, xmm3
	VFNMADDPD ymm2, ymm3, ymm5, ymm10
	VFMADDPD ymm3, ymm3, ymm2, ymm3
	VFNMADDPD ymm2, ymm3, ymm5, ymm10
	VFMADDPD ymm3, ymm3, ymm2, ymm3
	VFNMADDPD ymm2, ymm3, ymm5, ymm10
	VFMADDPD ymm3, ymm3, ymm2, ymm3
	VMULPD ymm4, ymm3, ymm4
	VMULPD ymm5, ymm7, ymm4
	VFNMADDPD ymm2, ymm1, ymm5, ymm7
	VFMADDPD ymm5, ymm2, ymm4, ymm5
	VMOVUPD [byte rdx + 64], xmm5
	VEXTRACTF128 [byte rdx + 80], ymm5, 1
	VANDPD ymm4, ymm8, ymm6
	VXORPD ymm4, ymm4, ymm6
	VMULPD ymm4, ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c42]
	VANDNPD ymm5, ymm6, ymm8
	VORPS ymm5, ymm5, ymm10
	VCVTPD2PS xmm3, ymm5
	VRCPPS xmm3, xmm3
	VCVTPS2PD ymm3, xmm3
	VFNMADDPD ymm2, ymm3, ymm5, ymm10
	VFMADDPD ymm3, ymm3, ymm2, ymm3
	VFNMADDPD ymm2, ymm3, ymm5, ymm10
	VFMADDPD ymm3, ymm3, ymm2, ymm3
	VFNMADDPD ymm2, ymm3, ymm5, ymm10
	VFMADDPD ymm3, ymm3, ymm2, ymm3
	VMULPD ymm4, ymm3, ymm4
	VMULPD ymm5, ymm9, ymm4
	VFNMADDPD ymm2, ymm8, ymm5, ymm9
	VFMADDPD ymm5, ymm2, ymm4, ymm5
	VMOVUPD [byte rdx + 96], xmm5
	VEXTRACTF128 [byte rdx + 112], ymm5, 1
	VANDPD ymm4, ymm0, ymm6
	VXORPD ymm4, ymm4, ymm6
	VMULPD ymm4, ymm4,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c42]
	VANDNPD ymm5, ymm6, ymm0
	VORPS ymm5, ymm5, ymm10
	VCVTPD2PS xmm3, ymm5
	VRCPPS xmm3, xmm3
	VCVTPS2PD ymm3, xmm3
	VFNMADDPD ymm2, ymm3, ymm5, ymm10
	VFMADDPD ymm3, ymm3, ymm2, ymm3
	VFNMADDPD ymm2, ymm3, ymm5, ymm10
	VFMADDPD ymm3, ymm3, ymm2, ymm3
	VFNMADDPD ymm2, ymm3, ymm5, ymm10
	VFMADDPD ymm3, ymm3, ymm2, ymm3
	VMULPD ymm4, ymm3, ymm4
	VMULPD ymm5, ymm11, ymm4
	VFNMADDPD ymm2, ymm0, ymm5, ymm11
	VFMADDPD ymm5, ymm2, ymm4, ymm5
	VMOVUPD [dword rdx + 128], xmm5
	VEXTRACTF128 [dword rdx + 144], ymm5, 1
	ADD rcx, 160
	ADD rdx, 160
	SUB r8, 20
	JAE .process_batch_full
	.process_restore:
	ADD r8, 20
	JZ .return_ok
	.process_single:
	VMOVSD xmm4, [rcx]
	VMULSD xmm5, xmm4, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c0]
	VADDSD xmm5, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c1]
	VPSLLQ xmm3, xmm5, 63
	VSUBSD xmm5, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c1]
	VMULSD xmm2, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c2]
	VADDSD xmm4, xmm4, xmm2
	VMOVAPS xmm2, xmm4
	VMULSD xmm1, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c3]
	VADDSD xmm4, xmm4, xmm1
	VSUBSD xmm0, xmm4, xmm2
	VSUBSD xmm1, xmm1, xmm0
	VMULSD xmm5, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c4]
	VADDSD xmm5, xmm5, xmm1
	VADDSD xmm4, xmm4, xmm5
	VMULSD xmm5, xmm4, xmm4
	VMOVSD xmm2, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c5]
	VMOVSD xmm1, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c6]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c7]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c8]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c9]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c10]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c11]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c12]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c13]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c14]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c15]
	VFMADDSD xmm1, xmm1, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c16]
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c17]
	VMULSD xmm1, xmm1, xmm5
	VFMADDSD xmm2, xmm2, xmm5, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm1, xmm1, xmm4, xmm4
	VXORPD xmm1, xmm1, xmm3
	VBLENDVPD xmm4, xmm1, xmm2, xmm3
	VBLENDVPD xmm5, xmm2, xmm1, xmm3
	VMOVSD xmm3, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c19]
	VANDPD xmm2, xmm5, xmm3
	VXORPD xmm2, xmm2, xmm3
	VMULSD xmm2, xmm2, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c20]
	VANDNPD xmm3, xmm3, xmm5
	VORPS xmm3, xmm3,  [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c21]
	VCVTPD2PS xmm1, xmm3
	VRCPPS xmm1, xmm1
	VCVTPS2PD xmm1, xmm1
	VFNMADDSD xmm0, xmm1, xmm3, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm1, xmm1, xmm0, xmm1
	VFNMADDSD xmm0, xmm1, xmm3, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm1, xmm1, xmm0, xmm1
	VFNMADDSD xmm0, xmm1, xmm3, [rel _yepMath_Tan_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm1, xmm1, xmm0, xmm1
	VMULSD xmm3, xmm1, xmm2
	VMULSD xmm2, xmm4, xmm3
	VFNMADDSD xmm0, xmm5, xmm2, xmm4
	VFMADDSD xmm2, xmm0, xmm3, xmm2
	VMOVSD [rdx], xmm2
	ADD rcx, 8
	ADD rdx, 8
	SUB r8, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	VMOVAPS xmm6, [dword rsp + 320]
	VMOVAPS xmm7, [dword rsp + 336]
	VMOVAPS xmm8, [dword rsp + 352]
	VMOVAPS xmm9, [dword rsp + 368]
	VMOVAPS xmm10, [dword rsp + 384]
	VMOVAPS xmm11, [dword rsp + 400]
	VMOVAPS xmm12, [dword rsp + 416]
	VMOVAPS xmm13, [dword rsp + 432]
	VMOVAPS xmm14, [dword rsp + 448]
	VMOVAPS xmm15, [dword rsp + 464]
	MOV rsp, [dword rsp + 480]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
