;                       Yeppp! library implementation
;                   This file is auto-generated by Peach-Py,
;        Portable Efficient Assembly Code-generator in Higher-level Python,
;                  part of the Yeppp! library infrastructure
; This file is part of Yeppp! library and licensed under the New BSD license.
; See LICENSE.txt for the full text of the license.

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.Nehalem progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Cos_V64f_V64f_Nehalem_constants:
	.c0: DQ 0x3FE45F306DC9C883
	.c1: DQ 0x4338000000000002
	.c2: DQ 0xBFF921FB54440000
	.c3: DQ 0xBD868C234C4C8000
	.c4: DQ 0x3B09D747F23E32ED
	.c5: DQ 0x3DA8FA87EF79AE3F
	.c6: DQ 0x3DE5D8711D281543
	.c7: DQ 0xBE21EE9DF6693F7E
	.c8: DQ 0xBE5AE5E38936D046
	.c9: DQ 0x3E927E4F7F65104F
	.c10: DQ 0x3EC71DE3535C8A8A
	.c11: DQ 0xBEFA01A019C94874
	.c12: DQ 0xBF2A01A019BB92C0
	.c13: DQ 0x3F56C16C16C15038
	.c14: DQ 0x3F8111111110F51E
	.c15: DQ 0xBFA555555555554B
	.c16: DQ 0xBFC5555555555546
	.c17: DQ 0x3FE0000000000000
	.c18: DQ 0xBFF0000000000000
	.c19: DQ 0x8000000000000000
	.c20: DQ 0x3FE45F306DC9C883, 0x3FE45F306DC9C883
	.c21: DQ 0x4338000000000002, 0x4338000000000002
	.c22: DQ 0xBFF921FB54440000, 0xBFF921FB54440000
	.c23: DQ 0xBD868C234C4C8000, 0xBD868C234C4C8000
	.c24: DQ 0x3B09D747F23E32ED, 0x3B09D747F23E32ED
	.c25: DQ 0x3DA8FA87EF79AE3F, 0x3DA8FA87EF79AE3F
	.c26: DQ 0x3DE5D8711D281543, 0x3DE5D8711D281543
	.c27: DQ 0xBE21EE9DF6693F7E, 0xBE21EE9DF6693F7E
	.c28: DQ 0xBE5AE5E38936D046, 0xBE5AE5E38936D046
	.c29: DQ 0x3E927E4F7F65104F, 0x3E927E4F7F65104F
	.c30: DQ 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A
	.c31: DQ 0xBEFA01A019C94874, 0xBEFA01A019C94874
	.c32: DQ 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0
	.c33: DQ 0x3F56C16C16C15038, 0x3F56C16C16C15038
	.c34: DQ 0x3F8111111110F51E, 0x3F8111111110F51E
	.c35: DQ 0xBFA555555555554B, 0xBFA555555555554B
	.c36: DQ 0xBFC5555555555546, 0xBFC5555555555546
	.c37: DQ 0x3FE0000000000000, 0x3FE0000000000000
	.c38: DQ 0xBFF0000000000000, 0xBFF0000000000000
	.c39: DQ 0x8000000000000000, 0x8000000000000000


%ifidn __OUTPUT_FORMAT__, elf64
section .text.Nehalem progbits alloc exec nowrite align=16
global _yepMath_Cos_V64f_V64f_Nehalem
_yepMath_Cos_V64f_V64f_Nehalem:
%else
section .text
global __yepMath_Cos_V64f_V64f_Nehalem
__yepMath_Cos_V64f_V64f_Nehalem:
%endif
	.ENTRY:
	SUB rsp, 168
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	MOVSD xmm8, [rdi]
	MOVAPS xmm9, xmm8
	MULSD xmm9, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c0]
	ADDSD xmm9, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c1]
	MOVAPS xmm0, xmm9
	PSLLQ xmm0, 62
	SUBSD xmm9, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c1]
	MOVSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c2]
	MULSD xmm10, xmm9
	ADDSD xmm8, xmm10
	MOVAPS xmm10, xmm8
	MOVSD xmm11, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c3]
	MULSD xmm11, xmm9
	ADDSD xmm8, xmm11
	MOVAPS xmm12, xmm8
	SUBSD xmm12, xmm10
	SUBSD xmm11, xmm12
	MULSD xmm9, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c4]
	ADDSD xmm9, xmm11
	ADDSD xmm8, xmm9
	MOVAPS xmm9, xmm8
	MULSD xmm9, xmm9
	MOVSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c5]
	MOVSD xmm11, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c6]
	MULSD xmm10, xmm9
	ADDSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c7]
	MULSD xmm11, xmm9
	ADDSD xmm11, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c8]
	MULSD xmm10, xmm9
	ADDSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c9]
	MULSD xmm11, xmm9
	ADDSD xmm11, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c10]
	MULSD xmm10, xmm9
	ADDSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c11]
	MULSD xmm11, xmm9
	ADDSD xmm11, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c12]
	MULSD xmm10, xmm9
	ADDSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c13]
	MULSD xmm11, xmm9
	ADDSD xmm11, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c14]
	MULSD xmm10, xmm9
	ADDSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c15]
	MULSD xmm11, xmm9
	ADDSD xmm11, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c16]
	MULSD xmm10, xmm9
	ADDSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c17]
	MULSD xmm11, xmm9
	MULSD xmm10, xmm9
	MULSD xmm11, xmm8
	ADDSD xmm11, xmm8
	ADDSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c18]
	MOVSD xmm8, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c19]
	PAND xmm8, xmm0
	PADDQ xmm0, xmm0
	BLENDVPD xmm10, xmm11, xmm0
	XORPD xmm10, xmm8
	MOVSD [rsi], xmm10
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB rdx, 10
	JB .process_restore
	align 32
	.process_batch_full:
	MOVAPD xmm8, [rdi]
	MOVAPS xmm9, xmm8
	MULPD xmm9,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c20]
	ADDPD xmm9,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPD xmm10, [byte rdi + 16]
	MOVAPS xmm11, xmm10
	MULPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c20]
	ADDPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPD xmm12, [byte rdi + 32]
	MOVAPS xmm13, xmm12
	MULPD xmm13,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c20]
	ADDPD xmm13,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPD xmm14, [byte rdi + 48]
	MOVAPS xmm15, xmm14
	MULPD xmm15,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c20]
	ADDPD xmm15,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPD xmm7, [byte rdi + 64]
	MOVAPS xmm6, xmm7
	MULPD xmm6,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c20]
	ADDPD xmm6,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPS xmm5, xmm9
	PSLLQ xmm5, 62
	MOVDQA   [rsp], xmm5
	SUBPD xmm9,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPS xmm5, xmm11
	PSLLQ xmm5, 62
	MOVDQA   [rsp + 16], xmm5
	SUBPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPS xmm5, xmm13
	PSLLQ xmm5, 62
	MOVDQA   [rsp + 32], xmm5
	SUBPD xmm13,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPS xmm5, xmm15
	PSLLQ xmm5, 62
	MOVDQA   [rsp + 48], xmm5
	SUBPD xmm15,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPS xmm5, xmm6
	PSLLQ xmm5, 62
	MOVDQA   [rsp + 64], xmm5
	SUBPD xmm6,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c21]
	MOVAPS xmm5,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c22]
	MULPD xmm5, xmm9
	ADDPD xmm8, xmm5
	MOVAPS xmm5,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c22]
	MULPD xmm5, xmm11
	ADDPD xmm10, xmm5
	MOVAPS xmm5,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c22]
	MULPD xmm5, xmm13
	ADDPD xmm12, xmm5
	MOVAPS xmm5,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c22]
	MULPD xmm5, xmm15
	ADDPD xmm14, xmm5
	MOVAPS xmm5,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c22]
	MULPD xmm5, xmm6
	ADDPD xmm7, xmm5
	MOVAPS xmm5, xmm8
	MOVAPS xmm4,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c23]
	MULPD xmm4, xmm9
	ADDPD xmm8, xmm4
	MOVAPS xmm3, xmm8
	SUBPD xmm3, xmm5
	SUBPD xmm4, xmm3
	MULPD xmm9,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c24]
	ADDPD xmm9, xmm4
	ADDPD xmm8, xmm9
	MOVAPS xmm9, xmm10
	MOVAPS xmm5,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c23]
	MULPD xmm5, xmm11
	ADDPD xmm10, xmm5
	MOVAPS xmm4, xmm10
	SUBPD xmm4, xmm9
	SUBPD xmm5, xmm4
	MULPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c24]
	ADDPD xmm11, xmm5
	ADDPD xmm10, xmm11
	MOVAPS xmm9, xmm12
	MOVAPS xmm11,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c23]
	MULPD xmm11, xmm13
	ADDPD xmm12, xmm11
	MOVAPS xmm5, xmm12
	SUBPD xmm5, xmm9
	SUBPD xmm11, xmm5
	MULPD xmm13,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c24]
	ADDPD xmm13, xmm11
	ADDPD xmm12, xmm13
	MOVAPS xmm9, xmm14
	MOVAPS xmm11,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c23]
	MULPD xmm11, xmm15
	ADDPD xmm14, xmm11
	MOVAPS xmm13, xmm14
	SUBPD xmm13, xmm9
	SUBPD xmm11, xmm13
	MULPD xmm15,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c24]
	ADDPD xmm15, xmm11
	ADDPD xmm14, xmm15
	MOVAPS xmm9, xmm7
	MOVAPS xmm11,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c23]
	MULPD xmm11, xmm6
	ADDPD xmm7, xmm11
	MOVAPS xmm13, xmm7
	SUBPD xmm13, xmm9
	SUBPD xmm11, xmm13
	MULPD xmm6,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c24]
	ADDPD xmm6, xmm11
	ADDPD xmm7, xmm6
	MOVAPD   [rsp + 80], xmm8
	MULPD xmm8, xmm8
	MOVAPD   [rsp + 96], xmm10
	MULPD xmm10, xmm10
	MOVAPD   [rsp + 112], xmm12
	MULPD xmm12, xmm12
	MOVAPD   [rsp + 128], xmm14
	MULPD xmm14, xmm14
	MOVAPD   [rsp + 144], xmm7
	MULPD xmm7, xmm7
	MOVAPD xmm9,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c25]
	MOVAPD xmm11,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c26]
	MOVAPD xmm13,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c25]
	MOVAPD xmm15,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c26]
	MOVAPD xmm6,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c25]
	MOVAPD xmm5,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c26]
	MOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c25]
	MOVAPD xmm3,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c26]
	MOVAPD xmm2,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c25]
	MOVAPD xmm1,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c26]
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c27]
	MULPD xmm9, xmm8
	ADDPD xmm9, xmm0
	MULPD xmm13, xmm10
	ADDPD xmm13, xmm0
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm0
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm0
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c28]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm0
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm0
	MULPD xmm5, xmm12
	ADDPD xmm5, xmm0
	MULPD xmm3, xmm14
	ADDPD xmm3, xmm0
	MULPD xmm1, xmm7
	ADDPD xmm1, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c29]
	MULPD xmm9, xmm8
	ADDPD xmm9, xmm0
	MULPD xmm13, xmm10
	ADDPD xmm13, xmm0
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm0
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm0
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c30]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm0
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm0
	MULPD xmm5, xmm12
	ADDPD xmm5, xmm0
	MULPD xmm3, xmm14
	ADDPD xmm3, xmm0
	MULPD xmm1, xmm7
	ADDPD xmm1, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c31]
	MULPD xmm9, xmm8
	ADDPD xmm9, xmm0
	MULPD xmm13, xmm10
	ADDPD xmm13, xmm0
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm0
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm0
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c32]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm0
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm0
	MULPD xmm5, xmm12
	ADDPD xmm5, xmm0
	MULPD xmm3, xmm14
	ADDPD xmm3, xmm0
	MULPD xmm1, xmm7
	ADDPD xmm1, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c33]
	MULPD xmm9, xmm8
	ADDPD xmm9, xmm0
	MULPD xmm13, xmm10
	ADDPD xmm13, xmm0
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm0
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm0
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c34]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm0
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm0
	MULPD xmm5, xmm12
	ADDPD xmm5, xmm0
	MULPD xmm3, xmm14
	ADDPD xmm3, xmm0
	MULPD xmm1, xmm7
	ADDPD xmm1, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c35]
	MULPD xmm9, xmm8
	ADDPD xmm9, xmm0
	MULPD xmm13, xmm10
	ADDPD xmm13, xmm0
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm0
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm0
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c36]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm0
	MULPD xmm15, xmm10
	ADDPD xmm15, xmm0
	MULPD xmm5, xmm12
	ADDPD xmm5, xmm0
	MULPD xmm3, xmm14
	ADDPD xmm3, xmm0
	MULPD xmm1, xmm7
	ADDPD xmm1, xmm0
	MOVAPD xmm0,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c37]
	MULPD xmm9, xmm8
	ADDPD xmm9, xmm0
	MULPD xmm13, xmm10
	ADDPD xmm13, xmm0
	MULPD xmm6, xmm12
	ADDPD xmm6, xmm0
	MULPD xmm4, xmm14
	ADDPD xmm4, xmm0
	MULPD xmm2, xmm7
	ADDPD xmm2, xmm0
	MULPD xmm11, xmm8
	MULPD xmm9, xmm8
	MOVAPD xmm8,   [rsp + 80]
	MULPD xmm11, xmm8
	ADDPD xmm11, xmm8
	ADDPD xmm9,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c38]
	MULPD xmm15, xmm10
	MULPD xmm13, xmm10
	MOVAPD xmm8,   [rsp + 96]
	MULPD xmm15, xmm8
	ADDPD xmm15, xmm8
	ADDPD xmm13,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c38]
	MULPD xmm5, xmm12
	MULPD xmm6, xmm12
	MOVAPD xmm8,   [rsp + 112]
	MULPD xmm5, xmm8
	ADDPD xmm5, xmm8
	ADDPD xmm6,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c38]
	MULPD xmm3, xmm14
	MULPD xmm4, xmm14
	MOVAPD xmm8,   [rsp + 128]
	MULPD xmm3, xmm8
	ADDPD xmm3, xmm8
	ADDPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c38]
	MULPD xmm1, xmm7
	MULPD xmm2, xmm7
	MOVAPD xmm8,   [rsp + 144]
	MULPD xmm1, xmm8
	ADDPD xmm1, xmm8
	ADDPD xmm2,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c38]
	MOVAPD xmm0,   [rsp]
	MOVAPD xmm8,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c39]
	PAND xmm8, xmm0
	PADDQ xmm0, xmm0
	BLENDVPD xmm9, xmm11, xmm0
	XORPD xmm9, xmm8
	MOVUPD [rsi], xmm9
	MOVAPD xmm0,   [rsp + 16]
	MOVAPD xmm8,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c39]
	PAND xmm8, xmm0
	PADDQ xmm0, xmm0
	BLENDVPD xmm13, xmm15, xmm0
	XORPD xmm13, xmm8
	MOVUPD [byte rsi + 16], xmm13
	MOVAPD xmm0,   [rsp + 32]
	MOVAPD xmm8,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c39]
	PAND xmm8, xmm0
	PADDQ xmm0, xmm0
	BLENDVPD xmm6, xmm5, xmm0
	XORPD xmm6, xmm8
	MOVUPD [byte rsi + 32], xmm6
	MOVAPD xmm0,   [rsp + 48]
	MOVAPD xmm8,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c39]
	PAND xmm8, xmm0
	PADDQ xmm0, xmm0
	BLENDVPD xmm4, xmm3, xmm0
	XORPD xmm4, xmm8
	MOVUPD [byte rsi + 48], xmm4
	MOVAPD xmm0,   [rsp + 64]
	MOVAPD xmm8,  [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c39]
	PAND xmm8, xmm0
	PADDQ xmm0, xmm0
	BLENDVPD xmm2, xmm1, xmm0
	XORPD xmm2, xmm8
	MOVUPD [byte rsi + 64], xmm2
	ADD rdi, 80
	ADD rsi, 80
	SUB rdx, 10
	JAE .process_batch_full
	.process_restore:
	ADD rdx, 10
	JZ .return_ok
	.process_single:
	MOVSD xmm8, [rdi]
	MOVAPS xmm9, xmm8
	MULSD xmm9, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c0]
	ADDSD xmm9, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c1]
	MOVAPS xmm0, xmm9
	PSLLQ xmm0, 62
	SUBSD xmm9, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c1]
	MOVSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c2]
	MULSD xmm10, xmm9
	ADDSD xmm8, xmm10
	MOVAPS xmm10, xmm8
	MOVSD xmm11, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c3]
	MULSD xmm11, xmm9
	ADDSD xmm8, xmm11
	MOVAPS xmm12, xmm8
	SUBSD xmm12, xmm10
	SUBSD xmm11, xmm12
	MULSD xmm9, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c4]
	ADDSD xmm9, xmm11
	ADDSD xmm8, xmm9
	MOVAPS xmm9, xmm8
	MULSD xmm9, xmm9
	MOVSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c5]
	MOVSD xmm11, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c6]
	MULSD xmm10, xmm9
	ADDSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c7]
	MULSD xmm11, xmm9
	ADDSD xmm11, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c8]
	MULSD xmm10, xmm9
	ADDSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c9]
	MULSD xmm11, xmm9
	ADDSD xmm11, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c10]
	MULSD xmm10, xmm9
	ADDSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c11]
	MULSD xmm11, xmm9
	ADDSD xmm11, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c12]
	MULSD xmm10, xmm9
	ADDSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c13]
	MULSD xmm11, xmm9
	ADDSD xmm11, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c14]
	MULSD xmm10, xmm9
	ADDSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c15]
	MULSD xmm11, xmm9
	ADDSD xmm11, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c16]
	MULSD xmm10, xmm9
	ADDSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c17]
	MULSD xmm11, xmm9
	MULSD xmm10, xmm9
	MULSD xmm11, xmm8
	ADDSD xmm11, xmm8
	ADDSD xmm10, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c18]
	MOVSD xmm8, [rel _yepMath_Cos_V64f_V64f_Nehalem_constants.c19]
	PAND xmm8, xmm0
	PADDQ xmm0, xmm0
	BLENDVPD xmm10, xmm11, xmm0
	XORPD xmm10, xmm8
	MOVSD [rsi], xmm10
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	ADD rsp, 168
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.SandyBridge progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Cos_V64f_V64f_SandyBridge_constants:
	.c0: DQ 0x3FE45F306DC9C883
	.c1: DQ 0x4338000000000002
	.c2: DQ 0xBFF921FB54440000
	.c3: DQ 0xBD868C234C4C8000
	.c4: DQ 0x3B09D747F23E32ED
	.c5: DQ 0x3DA8FA87EF79AE3F
	.c6: DQ 0x3DE5D8711D281543
	.c7: DQ 0xBE21EE9DF6693F7E
	.c8: DQ 0xBE5AE5E38936D046
	.c9: DQ 0x3E927E4F7F65104F
	.c10: DQ 0x3EC71DE3535C8A8A
	.c11: DQ 0xBEFA01A019C94874
	.c12: DQ 0xBF2A01A019BB92C0
	.c13: DQ 0x3F56C16C16C15038
	.c14: DQ 0x3F8111111110F51E
	.c15: DQ 0xBFA555555555554B
	.c16: DQ 0xBFC5555555555546
	.c17: DQ 0x3FE0000000000000
	.c18: DQ 0xBFF0000000000000
	.c19: DQ 0x8000000000000000
	.c20: DQ 0x3FE45F306DC9C883, 0x3FE45F306DC9C883, 0x3FE45F306DC9C883, 0x3FE45F306DC9C883
	.c21: DQ 0x4338000000000002, 0x4338000000000002, 0x4338000000000002, 0x4338000000000002
	.c22: DQ 0xBFF921FB54440000, 0xBFF921FB54440000, 0xBFF921FB54440000, 0xBFF921FB54440000
	.c23: DQ 0xBD868C234C4C8000, 0xBD868C234C4C8000, 0xBD868C234C4C8000, 0xBD868C234C4C8000
	.c24: DQ 0x3B09D747F23E32ED, 0x3B09D747F23E32ED, 0x3B09D747F23E32ED, 0x3B09D747F23E32ED
	.c25: DQ 0x3DA8FA87EF79AE3F, 0x3DA8FA87EF79AE3F, 0x3DA8FA87EF79AE3F, 0x3DA8FA87EF79AE3F
	.c26: DQ 0xBE21EE9DF6693F7E, 0xBE21EE9DF6693F7E, 0xBE21EE9DF6693F7E, 0xBE21EE9DF6693F7E
	.c27: DQ 0x3DE5D8711D281543, 0x3DE5D8711D281543, 0x3DE5D8711D281543, 0x3DE5D8711D281543
	.c28: DQ 0xBE5AE5E38936D046, 0xBE5AE5E38936D046, 0xBE5AE5E38936D046, 0xBE5AE5E38936D046
	.c29: DQ 0x3E927E4F7F65104F, 0x3E927E4F7F65104F, 0x3E927E4F7F65104F, 0x3E927E4F7F65104F
	.c30: DQ 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A
	.c31: DQ 0xBEFA01A019C94874, 0xBEFA01A019C94874, 0xBEFA01A019C94874, 0xBEFA01A019C94874
	.c32: DQ 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0
	.c33: DQ 0x3F56C16C16C15038, 0x3F56C16C16C15038, 0x3F56C16C16C15038, 0x3F56C16C16C15038
	.c34: DQ 0x3F8111111110F51E, 0x3F8111111110F51E, 0x3F8111111110F51E, 0x3F8111111110F51E
	.c35: DQ 0xBFA555555555554B, 0xBFA555555555554B, 0xBFA555555555554B, 0xBFA555555555554B
	.c36: DQ 0xBFC5555555555546, 0xBFC5555555555546, 0xBFC5555555555546, 0xBFC5555555555546
	.c37: DQ 0x3FE0000000000000, 0x3FE0000000000000, 0x3FE0000000000000, 0x3FE0000000000000
	.c38: DQ 0xBFF0000000000000, 0xBFF0000000000000, 0xBFF0000000000000, 0xBFF0000000000000
	.c39: DQ 0x8000000000000000, 0x8000000000000000, 0x8000000000000000, 0x8000000000000000


%ifidn __OUTPUT_FORMAT__, elf64
section .text.SandyBridge progbits alloc exec nowrite align=16
global _yepMath_Cos_V64f_V64f_SandyBridge
_yepMath_Cos_V64f_V64f_SandyBridge:
%else
section .text
global __yepMath_Cos_V64f_V64f_SandyBridge
__yepMath_Cos_V64f_V64f_SandyBridge:
%endif
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 320
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm8, [rdi]
	VMULSD xmm9, xmm8, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c0]
	VADDSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c1]
	VPSLLQ xmm10, xmm9, 62
	VSUBSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c1]
	VMULSD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c2]
	VADDSD xmm8, xmm8, xmm11
	VMOVAPS xmm11, xmm8
	VMULSD xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c3]
	VADDSD xmm8, xmm8, xmm12
	VSUBSD xmm13, xmm8, xmm11
	VSUBSD xmm12, xmm12, xmm13
	VMULSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c4]
	VADDSD xmm9, xmm9, xmm12
	VADDSD xmm8, xmm8, xmm9
	VMULSD xmm9, xmm8, xmm8
	VMOVSD xmm11, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c5]
	VMOVSD xmm12, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c6]
	VMULSD xmm11, xmm11, xmm9
	VADDSD xmm11, xmm11, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c7]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c8]
	VMULSD xmm11, xmm11, xmm9
	VADDSD xmm11, xmm11, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c9]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c10]
	VMULSD xmm11, xmm11, xmm9
	VADDSD xmm11, xmm11, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c11]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c12]
	VMULSD xmm11, xmm11, xmm9
	VADDSD xmm11, xmm11, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c13]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c14]
	VMULSD xmm11, xmm11, xmm9
	VADDSD xmm11, xmm11, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c15]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c16]
	VMULSD xmm11, xmm11, xmm9
	VADDSD xmm11, xmm11, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c17]
	VMULSD xmm12, xmm12, xmm9
	VMULSD xmm11, xmm11, xmm9
	VMULSD xmm12, xmm12, xmm8
	VADDSD xmm11, xmm11, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c18]
	VADDSD xmm12, xmm12, xmm8
	VMOVSD xmm8, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c19]
	VPAND xmm8, xmm8, xmm10
	VPADDQ xmm10, xmm10, xmm10
	VBLENDVPD xmm9, xmm11, xmm12, xmm10
	VXORPD xmm9, xmm9, xmm8
	VMOVSD [rsi], xmm9
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB rdx, 20
	JB .process_restore
	align 32
	.process_batch_full:
	VMOVAPS ymm8,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c20]
	VMOVAPS ymm9,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c21]
	VMOVAPD ymm10, [rdi]
	VMULPD ymm11, ymm10, ymm8
	VADDPD ymm11, ymm11, ymm9
	VMOVAPD ymm12, [byte rdi + 32]
	VMULPD ymm13, ymm12, ymm8
	VADDPD ymm13, ymm13, ymm9
	VMOVAPD ymm14, [byte rdi + 64]
	VMULPD ymm15, ymm14, ymm8
	VADDPD ymm15, ymm15, ymm9
	VMOVAPD ymm7, [byte rdi + 96]
	VMULPD ymm6, ymm7, ymm8
	VADDPD ymm6, ymm6, ymm9
	VMOVAPD ymm5, [dword rdi + 128]
	VMULPD ymm8, ymm5, ymm8
	VADDPD ymm8, ymm8, ymm9
	VEXTRACTF128 xmm4, ymm11, 1
	VPSLLQ xmm3, xmm11, 62
	VMOVDQA   [rsp], xmm3
	VPSLLQ xmm4, xmm4, 62
	VMOVDQA   [rsp + 16], xmm4
	VSUBPD ymm11, ymm11, ymm9
	VEXTRACTF128 xmm4, ymm13, 1
	VPSLLQ xmm3, xmm13, 62
	VMOVDQA   [rsp + 32], xmm3
	VPSLLQ xmm4, xmm4, 62
	VMOVDQA   [rsp + 48], xmm4
	VSUBPD ymm13, ymm13, ymm9
	VEXTRACTF128 xmm4, ymm15, 1
	VPSLLQ xmm3, xmm15, 62
	VMOVDQA   [rsp + 64], xmm3
	VPSLLQ xmm4, xmm4, 62
	VMOVDQA   [rsp + 80], xmm4
	VSUBPD ymm15, ymm15, ymm9
	VEXTRACTF128 xmm4, ymm6, 1
	VPSLLQ xmm3, xmm6, 62
	VMOVDQA   [rsp + 96], xmm3
	VPSLLQ xmm4, xmm4, 62
	VMOVDQA   [rsp + 112], xmm4
	VSUBPD ymm6, ymm6, ymm9
	VEXTRACTF128 xmm4, ymm8, 1
	VPSLLQ xmm3, xmm8, 62
	VMOVDQA   [rsp + 128], xmm3
	VPSLLQ xmm4, xmm4, 62
	VMOVDQA   [rsp + 144], xmm4
	VSUBPD ymm8, ymm8, ymm9
	VMULPD ymm9, ymm11,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c22]
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm9, ymm13,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c22]
	VADDPD ymm12, ymm12, ymm9
	VMULPD ymm9, ymm15,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c22]
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm9, ymm6,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c22]
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm9, ymm8,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c22]
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm9, ymm11,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c23]
	VADDPD ymm4, ymm10, ymm9
	VSUBPD ymm10, ymm4, ymm10
	VSUBPD ymm9, ymm9, ymm10
	VMULPD ymm11, ymm11,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm11, ymm11, ymm9
	VADDPD ymm4, ymm4, ymm11
	VMULPD ymm9, ymm13,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c23]
	VADDPD ymm10, ymm12, ymm9
	VSUBPD ymm11, ymm10, ymm12
	VSUBPD ymm9, ymm9, ymm11
	VMULPD ymm13, ymm13,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm13, ymm13, ymm9
	VADDPD ymm10, ymm10, ymm13
	VMULPD ymm9, ymm15,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c23]
	VADDPD ymm11, ymm14, ymm9
	VSUBPD ymm12, ymm11, ymm14
	VSUBPD ymm9, ymm9, ymm12
	VMULPD ymm15, ymm15,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm15, ymm15, ymm9
	VADDPD ymm11, ymm11, ymm15
	VMULPD ymm9, ymm6,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c23]
	VADDPD ymm12, ymm7, ymm9
	VSUBPD ymm13, ymm12, ymm7
	VSUBPD ymm9, ymm9, ymm13
	VMULPD ymm6, ymm6,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm6, ymm6, ymm9
	VADDPD ymm12, ymm12, ymm6
	VMULPD ymm9, ymm8,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c23]
	VADDPD ymm13, ymm5, ymm9
	VSUBPD ymm14, ymm13, ymm5
	VSUBPD ymm9, ymm9, ymm14
	VMULPD ymm8, ymm8,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c24]
	VADDPD ymm8, ymm8, ymm9
	VADDPD ymm13, ymm13, ymm8
	VMOVAPD   [rsp + 160], ymm4
	VMULPD ymm8, ymm4, ymm4
	VMOVAPD   [rsp + 192], ymm10
	VMULPD ymm9, ymm10, ymm10
	VMOVAPD   [rsp + 224], ymm11
	VMULPD ymm10, ymm11, ymm11
	VMOVAPD   [rsp + 256], ymm12
	VMULPD ymm11, ymm12, ymm12
	VMOVAPD   [rsp + 288], ymm13
	VMULPD ymm12, ymm13, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c25]
	VMOVAPS ymm14,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c26]
	VMULPD ymm15, ymm13, ymm8
	VADDPD ymm15, ymm15, ymm14
	VMULPD ymm7, ymm13, ymm9
	VADDPD ymm7, ymm7, ymm14
	VMULPD ymm6, ymm13, ymm10
	VADDPD ymm6, ymm6, ymm14
	VMULPD ymm5, ymm13, ymm11
	VADDPD ymm5, ymm5, ymm14
	VMULPD ymm13, ymm13, ymm12
	VADDPD ymm13, ymm13, ymm14
	VMOVAPS ymm14,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c27]
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c28]
	VMULPD ymm3, ymm14, ymm8
	VADDPD ymm3, ymm3, ymm4
	VMULPD ymm2, ymm14, ymm9
	VADDPD ymm2, ymm2, ymm4
	VMULPD ymm1, ymm14, ymm10
	VADDPD ymm1, ymm1, ymm4
	VMULPD ymm0, ymm14, ymm11
	VADDPD ymm0, ymm0, ymm4
	VMULPD ymm14, ymm14, ymm12
	VADDPD ymm14, ymm14, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c29]
	VMULPD ymm15, ymm15, ymm8
	VADDPD ymm15, ymm15, ymm4
	VMULPD ymm7, ymm7, ymm9
	VADDPD ymm7, ymm7, ymm4
	VMULPD ymm6, ymm6, ymm10
	VADDPD ymm6, ymm6, ymm4
	VMULPD ymm5, ymm5, ymm11
	VADDPD ymm5, ymm5, ymm4
	VMULPD ymm13, ymm13, ymm12
	VADDPD ymm13, ymm13, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c30]
	VMULPD ymm3, ymm3, ymm8
	VADDPD ymm3, ymm3, ymm4
	VMULPD ymm2, ymm2, ymm9
	VADDPD ymm2, ymm2, ymm4
	VMULPD ymm1, ymm1, ymm10
	VADDPD ymm1, ymm1, ymm4
	VMULPD ymm0, ymm0, ymm11
	VADDPD ymm0, ymm0, ymm4
	VMULPD ymm14, ymm14, ymm12
	VADDPD ymm14, ymm14, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c31]
	VMULPD ymm15, ymm15, ymm8
	VADDPD ymm15, ymm15, ymm4
	VMULPD ymm7, ymm7, ymm9
	VADDPD ymm7, ymm7, ymm4
	VMULPD ymm6, ymm6, ymm10
	VADDPD ymm6, ymm6, ymm4
	VMULPD ymm5, ymm5, ymm11
	VADDPD ymm5, ymm5, ymm4
	VMULPD ymm13, ymm13, ymm12
	VADDPD ymm13, ymm13, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c32]
	VMULPD ymm3, ymm3, ymm8
	VADDPD ymm3, ymm3, ymm4
	VMULPD ymm2, ymm2, ymm9
	VADDPD ymm2, ymm2, ymm4
	VMULPD ymm1, ymm1, ymm10
	VADDPD ymm1, ymm1, ymm4
	VMULPD ymm0, ymm0, ymm11
	VADDPD ymm0, ymm0, ymm4
	VMULPD ymm14, ymm14, ymm12
	VADDPD ymm14, ymm14, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c33]
	VMULPD ymm15, ymm15, ymm8
	VADDPD ymm15, ymm15, ymm4
	VMULPD ymm7, ymm7, ymm9
	VADDPD ymm7, ymm7, ymm4
	VMULPD ymm6, ymm6, ymm10
	VADDPD ymm6, ymm6, ymm4
	VMULPD ymm5, ymm5, ymm11
	VADDPD ymm5, ymm5, ymm4
	VMULPD ymm13, ymm13, ymm12
	VADDPD ymm13, ymm13, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c34]
	VMULPD ymm3, ymm3, ymm8
	VADDPD ymm3, ymm3, ymm4
	VMULPD ymm2, ymm2, ymm9
	VADDPD ymm2, ymm2, ymm4
	VMULPD ymm1, ymm1, ymm10
	VADDPD ymm1, ymm1, ymm4
	VMULPD ymm0, ymm0, ymm11
	VADDPD ymm0, ymm0, ymm4
	VMULPD ymm14, ymm14, ymm12
	VADDPD ymm14, ymm14, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c35]
	VMULPD ymm15, ymm15, ymm8
	VADDPD ymm15, ymm15, ymm4
	VMULPD ymm7, ymm7, ymm9
	VADDPD ymm7, ymm7, ymm4
	VMULPD ymm6, ymm6, ymm10
	VADDPD ymm6, ymm6, ymm4
	VMULPD ymm5, ymm5, ymm11
	VADDPD ymm5, ymm5, ymm4
	VMULPD ymm13, ymm13, ymm12
	VADDPD ymm13, ymm13, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c36]
	VMULPD ymm3, ymm3, ymm8
	VADDPD ymm3, ymm3, ymm4
	VMULPD ymm2, ymm2, ymm9
	VADDPD ymm2, ymm2, ymm4
	VMULPD ymm1, ymm1, ymm10
	VADDPD ymm1, ymm1, ymm4
	VMULPD ymm0, ymm0, ymm11
	VADDPD ymm0, ymm0, ymm4
	VMULPD ymm14, ymm14, ymm12
	VADDPD ymm14, ymm14, ymm4
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c37]
	VMULPD ymm15, ymm15, ymm8
	VADDPD ymm15, ymm15, ymm4
	VMULPD ymm7, ymm7, ymm9
	VADDPD ymm7, ymm7, ymm4
	VMULPD ymm6, ymm6, ymm10
	VADDPD ymm6, ymm6, ymm4
	VMULPD ymm5, ymm5, ymm11
	VADDPD ymm5, ymm5, ymm4
	VMULPD ymm13, ymm13, ymm12
	VADDPD ymm13, ymm13, ymm4
	VMULPD ymm3, ymm3, ymm8
	VMULPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1, ymm10
	VMULPD ymm0, ymm0, ymm11
	VMULPD ymm14, ymm14, ymm12
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c38]
	VMULPD ymm15, ymm15, ymm8
	VADDPD ymm15, ymm15, ymm4
	VMULPD ymm7, ymm7, ymm9
	VADDPD ymm7, ymm7, ymm4
	VMULPD ymm6, ymm6, ymm10
	VADDPD ymm6, ymm6, ymm4
	VMULPD ymm5, ymm5, ymm11
	VADDPD ymm5, ymm5, ymm4
	VMULPD ymm13, ymm13, ymm12
	VADDPD ymm13, ymm13, ymm4
	VMOVAPD ymm8,   [rsp + 160]
	VMULPD ymm3, ymm3, ymm8
	VADDPD ymm3, ymm3, ymm8
	VMOVAPD ymm8,   [rsp + 192]
	VMULPD ymm2, ymm2, ymm8
	VADDPD ymm2, ymm2, ymm8
	VMOVAPD ymm8,   [rsp + 224]
	VMULPD ymm1, ymm1, ymm8
	VADDPD ymm1, ymm1, ymm8
	VMOVAPD ymm8,   [rsp + 256]
	VMULPD ymm0, ymm0, ymm8
	VADDPD ymm0, ymm0, ymm8
	VMOVAPD ymm8,   [rsp + 288]
	VMULPD ymm14, ymm14, ymm8
	VADDPD ymm14, ymm14, ymm8
	VMOVAPS ymm8,  [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c39]
	VMOVAPD ymm9,   [rsp]
	VANDPD ymm10, ymm9, ymm8
	VANDNPD ymm9, ymm8, ymm9
	VCMPEQPD ymm9, ymm9, ymm10
	VBLENDVPD ymm9, ymm3, ymm15, ymm9
	VXORPD ymm9, ymm9, ymm10
	VMOVUPD [rsi], xmm9
	VEXTRACTF128 [byte rsi + 16], ymm9, 1
	VMOVAPD ymm9,   [rsp + 32]
	VANDPD ymm10, ymm9, ymm8
	VANDNPD ymm9, ymm8, ymm9
	VCMPEQPD ymm9, ymm9, ymm10
	VBLENDVPD ymm9, ymm2, ymm7, ymm9
	VXORPD ymm9, ymm9, ymm10
	VMOVUPD [byte rsi + 32], xmm9
	VEXTRACTF128 [byte rsi + 48], ymm9, 1
	VMOVAPD ymm9,   [rsp + 64]
	VANDPD ymm10, ymm9, ymm8
	VANDNPD ymm9, ymm8, ymm9
	VCMPEQPD ymm9, ymm9, ymm10
	VBLENDVPD ymm9, ymm1, ymm6, ymm9
	VXORPD ymm9, ymm9, ymm10
	VMOVUPD [byte rsi + 64], xmm9
	VEXTRACTF128 [byte rsi + 80], ymm9, 1
	VMOVAPD ymm9,   [rsp + 96]
	VANDPD ymm10, ymm9, ymm8
	VANDNPD ymm9, ymm8, ymm9
	VCMPEQPD ymm9, ymm9, ymm10
	VBLENDVPD ymm9, ymm0, ymm5, ymm9
	VXORPD ymm9, ymm9, ymm10
	VMOVUPD [byte rsi + 96], xmm9
	VEXTRACTF128 [byte rsi + 112], ymm9, 1
	VMOVAPD ymm9,   [rsp + 128]
	VANDPD ymm10, ymm9, ymm8
	VANDNPD ymm9, ymm8, ymm9
	VCMPEQPD ymm9, ymm9, ymm10
	VBLENDVPD ymm8, ymm14, ymm13, ymm9
	VXORPD ymm8, ymm8, ymm10
	VMOVUPD [dword rsi + 128], xmm8
	VEXTRACTF128 [dword rsi + 144], ymm8, 1
	ADD rdi, 160
	ADD rsi, 160
	SUB rdx, 20
	JAE .process_batch_full
	.process_restore:
	ADD rdx, 20
	JZ .return_ok
	.process_single:
	VMOVSD xmm8, [rdi]
	VMULSD xmm9, xmm8, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c0]
	VADDSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c1]
	VPSLLQ xmm10, xmm9, 62
	VSUBSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c1]
	VMULSD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c2]
	VADDSD xmm8, xmm8, xmm11
	VMOVAPS xmm11, xmm8
	VMULSD xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c3]
	VADDSD xmm8, xmm8, xmm12
	VSUBSD xmm13, xmm8, xmm11
	VSUBSD xmm12, xmm12, xmm13
	VMULSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c4]
	VADDSD xmm9, xmm9, xmm12
	VADDSD xmm8, xmm8, xmm9
	VMULSD xmm9, xmm8, xmm8
	VMOVSD xmm11, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c5]
	VMOVSD xmm12, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c6]
	VMULSD xmm11, xmm11, xmm9
	VADDSD xmm11, xmm11, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c7]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c8]
	VMULSD xmm11, xmm11, xmm9
	VADDSD xmm11, xmm11, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c9]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c10]
	VMULSD xmm11, xmm11, xmm9
	VADDSD xmm11, xmm11, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c11]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c12]
	VMULSD xmm11, xmm11, xmm9
	VADDSD xmm11, xmm11, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c13]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c14]
	VMULSD xmm11, xmm11, xmm9
	VADDSD xmm11, xmm11, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c15]
	VMULSD xmm12, xmm12, xmm9
	VADDSD xmm12, xmm12, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c16]
	VMULSD xmm11, xmm11, xmm9
	VADDSD xmm11, xmm11, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c17]
	VMULSD xmm12, xmm12, xmm9
	VMULSD xmm11, xmm11, xmm9
	VMULSD xmm12, xmm12, xmm8
	VADDSD xmm11, xmm11, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c18]
	VADDSD xmm12, xmm12, xmm8
	VMOVSD xmm8, [rel _yepMath_Cos_V64f_V64f_SandyBridge_constants.c19]
	VPAND xmm8, xmm8, xmm10
	VPADDQ xmm10, xmm10, xmm10
	VBLENDVPD xmm9, xmm11, xmm12, xmm10
	VXORPD xmm9, xmm9, xmm8
	VMOVSD [rsi], xmm9
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	MOV rsp, [dword rsp + 320]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.Bulldozer progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Cos_V64f_V64f_Bulldozer_constants:
	.c0: DQ 0x3FE45F306DC9C883
	.c1: DQ 0x4338000000000002
	.c2: DQ 0xBFF921FB54440000
	.c3: DQ 0xBD868C234C4C8000
	.c4: DQ 0x3B09D747F23E32ED
	.c5: DQ 0x3DA8FA87EF79AE3F
	.c6: DQ 0x3DE5D8711D281543
	.c7: DQ 0xBE21EE9DF6693F7E
	.c8: DQ 0xBE5AE5E38936D046
	.c9: DQ 0x3E927E4F7F65104F
	.c10: DQ 0x3EC71DE3535C8A8A
	.c11: DQ 0xBEFA01A019C94874
	.c12: DQ 0xBF2A01A019BB92C0
	.c13: DQ 0x3F56C16C16C15038
	.c14: DQ 0x3F8111111110F51E
	.c15: DQ 0xBFA555555555554B
	.c16: DQ 0xBFC5555555555546
	.c17: DQ 0x3FE0000000000000
	.c18: DQ 0xBFF0000000000000
	.c19: DQ 0x8000000000000000
	.c20: DQ 0x3FE45F306DC9C883, 0x3FE45F306DC9C883
	.c21: DQ 0x4338000000000002, 0x4338000000000002
	.c22: DQ 0xBFF921FB54440000, 0xBFF921FB54440000
	.c23: DQ 0xBD868C234C4C8000, 0xBD868C234C4C8000
	.c24: DQ 0x3B09D747F23E32ED, 0x3B09D747F23E32ED
	.c25: DQ 0x3DA8FA87EF79AE3F, 0x3DA8FA87EF79AE3F
	.c26: DQ 0xBE21EE9DF6693F7E, 0xBE21EE9DF6693F7E
	.c27: DQ 0x3DE5D8711D281543, 0x3DE5D8711D281543
	.c28: DQ 0xBE5AE5E38936D046, 0xBE5AE5E38936D046
	.c29: DQ 0x3E927E4F7F65104F, 0x3E927E4F7F65104F
	.c30: DQ 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A
	.c31: DQ 0xBEFA01A019C94874, 0xBEFA01A019C94874
	.c32: DQ 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0
	.c33: DQ 0x3F56C16C16C15038, 0x3F56C16C16C15038
	.c34: DQ 0x3F8111111110F51E, 0x3F8111111110F51E
	.c35: DQ 0xBFA555555555554B, 0xBFA555555555554B
	.c36: DQ 0xBFC5555555555546, 0xBFC5555555555546
	.c37: DQ 0x3FE0000000000000, 0x3FE0000000000000
	.c38: DQ 0xBFF0000000000000, 0xBFF0000000000000
	.c39: DQ 0x8000000000000000, 0x8000000000000000


%ifidn __OUTPUT_FORMAT__, elf64
section .text.Bulldozer progbits alloc exec nowrite align=16
global _yepMath_Cos_V64f_V64f_Bulldozer
_yepMath_Cos_V64f_V64f_Bulldozer:
%else
section .text
global __yepMath_Cos_V64f_V64f_Bulldozer
__yepMath_Cos_V64f_V64f_Bulldozer:
%endif
	.ENTRY:
	SUB rsp, 168
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 15
	JZ .source_16b_aligned
	.source_16b_misaligned:
	VMOVSD xmm8, [rdi]
	VMULSD xmm9, xmm8, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c0]
	VADDSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c1]
	VPSLLQ xmm10, xmm9, 62
	VSUBSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c1]
	VMULSD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c2]
	VADDSD xmm8, xmm8, xmm11
	VMOVAPS xmm11, xmm8
	VMULSD xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c3]
	VADDSD xmm8, xmm8, xmm12
	VSUBSD xmm13, xmm8, xmm11
	VSUBSD xmm12, xmm12, xmm13
	VMULSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c4]
	VADDSD xmm9, xmm9, xmm12
	VADDSD xmm8, xmm8, xmm9
	VMULSD xmm9, xmm8, xmm8
	VMOVSD xmm11, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c5]
	VMOVSD xmm12, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c6]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c7]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c8]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c9]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c10]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c11]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c12]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c13]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c14]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c15]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c16]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c17]
	VMULSD xmm12, xmm12, xmm9
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm12, xmm12, xmm8, xmm8
	VMOVSD xmm8, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c19]
	VPAND xmm8, xmm8, xmm10
	VPADDQ xmm10, xmm10, xmm10
	VBLENDVPD xmm9, xmm11, xmm12, xmm10
	VXORPD xmm9, xmm9, xmm8
	VMOVSD [rsi], xmm9
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 15
	JNZ .source_16b_misaligned
	.source_16b_aligned:
	SUB rdx, 10
	JB .process_restore
	align 32
	.process_batch_full:
	VMOVAPD xmm8,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c20]
	VMOVAPD xmm9,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c21]
	VMOVAPD xmm10, [rdi]
	VMULPD xmm11, xmm10, xmm8
	VADDPD xmm11, xmm11, xmm9
	VMOVAPD xmm12, [byte rdi + 16]
	VMULPD xmm13, xmm12, xmm8
	VADDPD xmm13, xmm13, xmm9
	VMOVAPD xmm14, [byte rdi + 32]
	VMULPD xmm15, xmm14, xmm8
	VADDPD xmm15, xmm15, xmm9
	VMOVAPD xmm7, [byte rdi + 48]
	VMULPD xmm6, xmm7, xmm8
	VADDPD xmm6, xmm6, xmm9
	VMOVAPD xmm5, [byte rdi + 64]
	VMULPD xmm8, xmm5, xmm8
	VADDPD xmm8, xmm8, xmm9
	VPSLLQ xmm4, xmm11, 62
	VMOVDQA   [rsp], xmm4
	VSUBPD xmm11, xmm11, xmm9
	VPSLLQ xmm4, xmm13, 62
	VMOVDQA   [rsp + 16], xmm4
	VSUBPD xmm13, xmm13, xmm9
	VPSLLQ xmm4, xmm15, 62
	VMOVDQA   [rsp + 32], xmm4
	VSUBPD xmm15, xmm15, xmm9
	VPSLLQ xmm4, xmm6, 62
	VMOVDQA   [rsp + 48], xmm4
	VSUBPD xmm6, xmm6, xmm9
	VPSLLQ xmm4, xmm8, 62
	VMOVDQA   [rsp + 64], xmm4
	VSUBPD xmm8, xmm8, xmm9
	VMULPD xmm9, xmm11,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c22]
	VADDPD xmm10, xmm10, xmm9
	VMULPD xmm9, xmm13,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c22]
	VADDPD xmm12, xmm12, xmm9
	VMULPD xmm9, xmm15,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c22]
	VADDPD xmm14, xmm14, xmm9
	VMULPD xmm9, xmm6,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c22]
	VADDPD xmm7, xmm7, xmm9
	VMULPD xmm9, xmm8,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c22]
	VADDPD xmm5, xmm5, xmm9
	VMULPD xmm9, xmm11,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c23]
	VADDPD xmm4, xmm10, xmm9
	VSUBPD xmm10, xmm4, xmm10
	VSUBPD xmm9, xmm9, xmm10
	VMULPD xmm11, xmm11,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c24]
	VADDPD xmm11, xmm11, xmm9
	VADDPD xmm4, xmm4, xmm11
	VMULPD xmm9, xmm13,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c23]
	VADDPD xmm10, xmm12, xmm9
	VSUBPD xmm11, xmm10, xmm12
	VSUBPD xmm9, xmm9, xmm11
	VMULPD xmm13, xmm13,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c24]
	VADDPD xmm13, xmm13, xmm9
	VADDPD xmm10, xmm10, xmm13
	VMULPD xmm9, xmm15,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c23]
	VADDPD xmm11, xmm14, xmm9
	VSUBPD xmm12, xmm11, xmm14
	VSUBPD xmm9, xmm9, xmm12
	VMULPD xmm15, xmm15,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c24]
	VADDPD xmm15, xmm15, xmm9
	VADDPD xmm11, xmm11, xmm15
	VMULPD xmm9, xmm6,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c23]
	VADDPD xmm12, xmm7, xmm9
	VSUBPD xmm13, xmm12, xmm7
	VSUBPD xmm9, xmm9, xmm13
	VMULPD xmm6, xmm6,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c24]
	VADDPD xmm6, xmm6, xmm9
	VADDPD xmm12, xmm12, xmm6
	VMULPD xmm9, xmm8,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c23]
	VADDPD xmm13, xmm5, xmm9
	VSUBPD xmm14, xmm13, xmm5
	VSUBPD xmm9, xmm9, xmm14
	VMULPD xmm8, xmm8,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c24]
	VADDPD xmm8, xmm8, xmm9
	VADDPD xmm13, xmm13, xmm8
	VMOVAPD   [rsp + 80], xmm4
	VMULPD xmm8, xmm4, xmm4
	VMOVAPD   [rsp + 96], xmm10
	VMULPD xmm9, xmm10, xmm10
	VMOVAPD   [rsp + 112], xmm11
	VMULPD xmm10, xmm11, xmm11
	VMOVAPD   [rsp + 128], xmm12
	VMULPD xmm11, xmm12, xmm12
	VMOVAPD   [rsp + 144], xmm13
	VMULPD xmm12, xmm13, xmm13
	VMOVAPD xmm13,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c25]
	VMOVAPD xmm14,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c26]
	VFMADDPD xmm15, xmm13, xmm8, xmm14
	VFMADDPD xmm7, xmm13, xmm9, xmm14
	VFMADDPD xmm6, xmm13, xmm10, xmm14
	VFMADDPD xmm5, xmm13, xmm11, xmm14
	VFMADDPD xmm13, xmm13, xmm12, xmm14
	VMOVAPD xmm14,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c27]
	VMOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c28]
	VFMADDPD xmm3, xmm14, xmm8, xmm4
	VFMADDPD xmm2, xmm14, xmm9, xmm4
	VFMADDPD xmm1, xmm14, xmm10, xmm4
	VFMADDPD xmm0, xmm14, xmm11, xmm4
	VFMADDPD xmm14, xmm14, xmm12, xmm4
	VMOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c29]
	VFMADDPD xmm15, xmm15, xmm8, xmm4
	VFMADDPD xmm7, xmm7, xmm9, xmm4
	VFMADDPD xmm6, xmm6, xmm10, xmm4
	VFMADDPD xmm5, xmm5, xmm11, xmm4
	VFMADDPD xmm13, xmm13, xmm12, xmm4
	VMOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c30]
	VFMADDPD xmm3, xmm3, xmm8, xmm4
	VFMADDPD xmm2, xmm2, xmm9, xmm4
	VFMADDPD xmm1, xmm1, xmm10, xmm4
	VFMADDPD xmm0, xmm0, xmm11, xmm4
	VFMADDPD xmm14, xmm14, xmm12, xmm4
	VMOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c31]
	VFMADDPD xmm15, xmm15, xmm8, xmm4
	VFMADDPD xmm7, xmm7, xmm9, xmm4
	VFMADDPD xmm6, xmm6, xmm10, xmm4
	VFMADDPD xmm5, xmm5, xmm11, xmm4
	VFMADDPD xmm13, xmm13, xmm12, xmm4
	VMOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c32]
	VFMADDPD xmm3, xmm3, xmm8, xmm4
	VFMADDPD xmm2, xmm2, xmm9, xmm4
	VFMADDPD xmm1, xmm1, xmm10, xmm4
	VFMADDPD xmm0, xmm0, xmm11, xmm4
	VFMADDPD xmm14, xmm14, xmm12, xmm4
	VMOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c33]
	VFMADDPD xmm15, xmm15, xmm8, xmm4
	VFMADDPD xmm7, xmm7, xmm9, xmm4
	VFMADDPD xmm6, xmm6, xmm10, xmm4
	VFMADDPD xmm5, xmm5, xmm11, xmm4
	VFMADDPD xmm13, xmm13, xmm12, xmm4
	VMOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c34]
	VFMADDPD xmm3, xmm3, xmm8, xmm4
	VFMADDPD xmm2, xmm2, xmm9, xmm4
	VFMADDPD xmm1, xmm1, xmm10, xmm4
	VFMADDPD xmm0, xmm0, xmm11, xmm4
	VFMADDPD xmm14, xmm14, xmm12, xmm4
	VMOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c35]
	VFMADDPD xmm15, xmm15, xmm8, xmm4
	VFMADDPD xmm7, xmm7, xmm9, xmm4
	VFMADDPD xmm6, xmm6, xmm10, xmm4
	VFMADDPD xmm5, xmm5, xmm11, xmm4
	VFMADDPD xmm13, xmm13, xmm12, xmm4
	VMOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c36]
	VFMADDPD xmm3, xmm3, xmm8, xmm4
	VFMADDPD xmm2, xmm2, xmm9, xmm4
	VFMADDPD xmm1, xmm1, xmm10, xmm4
	VFMADDPD xmm0, xmm0, xmm11, xmm4
	VFMADDPD xmm14, xmm14, xmm12, xmm4
	VMOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c37]
	VFMADDPD xmm15, xmm15, xmm8, xmm4
	VFMADDPD xmm7, xmm7, xmm9, xmm4
	VFMADDPD xmm6, xmm6, xmm10, xmm4
	VFMADDPD xmm5, xmm5, xmm11, xmm4
	VFMADDPD xmm13, xmm13, xmm12, xmm4
	VMULPD xmm3, xmm3, xmm8
	VMULPD xmm2, xmm2, xmm9
	VMULPD xmm1, xmm1, xmm10
	VMULPD xmm0, xmm0, xmm11
	VMULPD xmm14, xmm14, xmm12
	VMOVAPD xmm4,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c38]
	VFMADDPD xmm15, xmm15, xmm8, xmm4
	VFMADDPD xmm7, xmm7, xmm9, xmm4
	VFMADDPD xmm6, xmm6, xmm10, xmm4
	VFMADDPD xmm5, xmm5, xmm11, xmm4
	VFMADDPD xmm13, xmm13, xmm12, xmm4
	VMOVAPD xmm8,   [rsp + 80]
	VFMADDPD xmm3, xmm3, xmm8, xmm8
	VMOVAPD xmm8,   [rsp + 96]
	VFMADDPD xmm2, xmm2, xmm8, xmm8
	VMOVAPD xmm8,   [rsp + 112]
	VFMADDPD xmm1, xmm1, xmm8, xmm8
	VMOVAPD xmm8,   [rsp + 128]
	VFMADDPD xmm0, xmm0, xmm8, xmm8
	VMOVAPD xmm8,   [rsp + 144]
	VFMADDPD xmm14, xmm14, xmm8, xmm8
	VMOVAPD xmm8,  [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c39]
	VMOVAPD xmm9,   [rsp]
	VANDPD xmm10, xmm9, xmm8
	VPADDQ xmm9, xmm9, xmm9
	VBLENDVPD xmm9, xmm15, xmm3, xmm9
	VXORPD xmm9, xmm9, xmm10
	VMOVUPD [rsi], xmm9
	VMOVAPD xmm9,   [rsp + 16]
	VANDPD xmm10, xmm9, xmm8
	VPADDQ xmm9, xmm9, xmm9
	VBLENDVPD xmm9, xmm7, xmm2, xmm9
	VXORPD xmm9, xmm9, xmm10
	VMOVUPD [byte rsi + 16], xmm9
	VMOVAPD xmm9,   [rsp + 32]
	VANDPD xmm10, xmm9, xmm8
	VPADDQ xmm9, xmm9, xmm9
	VBLENDVPD xmm9, xmm6, xmm1, xmm9
	VXORPD xmm9, xmm9, xmm10
	VMOVUPD [byte rsi + 32], xmm9
	VMOVAPD xmm9,   [rsp + 48]
	VANDPD xmm10, xmm9, xmm8
	VPADDQ xmm9, xmm9, xmm9
	VBLENDVPD xmm9, xmm5, xmm0, xmm9
	VXORPD xmm9, xmm9, xmm10
	VMOVUPD [byte rsi + 48], xmm9
	VMOVAPD xmm9,   [rsp + 64]
	VANDPD xmm8, xmm9, xmm8
	VPADDQ xmm9, xmm9, xmm9
	VBLENDVPD xmm9, xmm13, xmm14, xmm9
	VXORPD xmm9, xmm9, xmm8
	VMOVUPD [byte rsi + 64], xmm9
	ADD rdi, 80
	ADD rsi, 80
	SUB rdx, 10
	JAE .process_batch_full
	.process_restore:
	ADD rdx, 10
	JZ .return_ok
	.process_single:
	VMOVSD xmm8, [rdi]
	VMULSD xmm9, xmm8, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c0]
	VADDSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c1]
	VPSLLQ xmm10, xmm9, 62
	VSUBSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c1]
	VMULSD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c2]
	VADDSD xmm8, xmm8, xmm11
	VMOVAPS xmm11, xmm8
	VMULSD xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c3]
	VADDSD xmm8, xmm8, xmm12
	VSUBSD xmm13, xmm8, xmm11
	VSUBSD xmm12, xmm12, xmm13
	VMULSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c4]
	VADDSD xmm9, xmm9, xmm12
	VADDSD xmm8, xmm8, xmm9
	VMULSD xmm9, xmm8, xmm8
	VMOVSD xmm11, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c5]
	VMOVSD xmm12, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c6]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c7]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c8]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c9]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c10]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c11]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c12]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c13]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c14]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c15]
	VFMADDSD xmm12, xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c16]
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c17]
	VMULSD xmm12, xmm12, xmm9
	VFMADDSD xmm11, xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c18]
	VFMADDSD xmm12, xmm12, xmm8, xmm8
	VMOVSD xmm8, [rel _yepMath_Cos_V64f_V64f_Bulldozer_constants.c19]
	VPAND xmm8, xmm8, xmm10
	VPADDQ xmm10, xmm10, xmm10
	VBLENDVPD xmm9, xmm11, xmm12, xmm10
	VXORPD xmm9, xmm9, xmm8
	VMOVSD [rsi], xmm9
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	ADD rsp, 168
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return

%ifidn __OUTPUT_FORMAT__, elf64
section .rodata.Haswell progbits alloc noexec nowrite align=32
%else
section .rodata align=32
%endif
_yepMath_Cos_V64f_V64f_Haswell_constants:
	.c0: DQ 0x3FE45F306DC9C883
	.c1: DQ 0x4338000000000002
	.c2: DQ 0xBFF921FB54440000
	.c3: DQ 0xBD868C234C4C8000
	.c4: DQ 0x3B09D747F23E32ED
	.c5: DQ 0x3DA8FA87EF79AE3F
	.c6: DQ 0x3DE5D8711D281543
	.c7: DQ 0xBE21EE9DF6693F7E
	.c8: DQ 0xBE5AE5E38936D046
	.c9: DQ 0x3E927E4F7F65104F
	.c10: DQ 0x3EC71DE3535C8A8A
	.c11: DQ 0xBEFA01A019C94874
	.c12: DQ 0xBF2A01A019BB92C0
	.c13: DQ 0x3F56C16C16C15038
	.c14: DQ 0x3F8111111110F51E
	.c15: DQ 0xBFA555555555554B
	.c16: DQ 0xBFC5555555555546
	.c17: DQ 0x3FE0000000000000
	.c18: DQ 0xBFF0000000000000
	.c19: DQ 0x8000000000000000
	.c20: DQ 0x3FE45F306DC9C883, 0x3FE45F306DC9C883, 0x3FE45F306DC9C883, 0x3FE45F306DC9C883
	.c21: DQ 0x4338000000000002, 0x4338000000000002, 0x4338000000000002, 0x4338000000000002
	.c22: DQ 0xBFF921FB54440000, 0xBFF921FB54440000, 0xBFF921FB54440000, 0xBFF921FB54440000
	.c23: DQ 0xBD868C234C4C8000, 0xBD868C234C4C8000, 0xBD868C234C4C8000, 0xBD868C234C4C8000
	.c24: DQ 0x3B09D747F23E32ED, 0x3B09D747F23E32ED, 0x3B09D747F23E32ED, 0x3B09D747F23E32ED
	.c25: DQ 0x3DA8FA87EF79AE3F, 0x3DA8FA87EF79AE3F, 0x3DA8FA87EF79AE3F, 0x3DA8FA87EF79AE3F
	.c26: DQ 0xBE21EE9DF6693F7E, 0xBE21EE9DF6693F7E, 0xBE21EE9DF6693F7E, 0xBE21EE9DF6693F7E
	.c27: DQ 0x3DE5D8711D281543, 0x3DE5D8711D281543, 0x3DE5D8711D281543, 0x3DE5D8711D281543
	.c28: DQ 0xBE5AE5E38936D046, 0xBE5AE5E38936D046, 0xBE5AE5E38936D046, 0xBE5AE5E38936D046
	.c29: DQ 0x3E927E4F7F65104F, 0x3E927E4F7F65104F, 0x3E927E4F7F65104F, 0x3E927E4F7F65104F
	.c30: DQ 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A, 0x3EC71DE3535C8A8A
	.c31: DQ 0xBEFA01A019C94874, 0xBEFA01A019C94874, 0xBEFA01A019C94874, 0xBEFA01A019C94874
	.c32: DQ 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0, 0xBF2A01A019BB92C0
	.c33: DQ 0x3F56C16C16C15038, 0x3F56C16C16C15038, 0x3F56C16C16C15038, 0x3F56C16C16C15038
	.c34: DQ 0x3F8111111110F51E, 0x3F8111111110F51E, 0x3F8111111110F51E, 0x3F8111111110F51E
	.c35: DQ 0xBFA555555555554B, 0xBFA555555555554B, 0xBFA555555555554B, 0xBFA555555555554B
	.c36: DQ 0xBFC5555555555546, 0xBFC5555555555546, 0xBFC5555555555546, 0xBFC5555555555546
	.c37: DQ 0x3FE0000000000000, 0x3FE0000000000000, 0x3FE0000000000000, 0x3FE0000000000000
	.c38: DQ 0xBFF0000000000000, 0xBFF0000000000000, 0xBFF0000000000000, 0xBFF0000000000000
	.c39: DQ 0x8000000000000000, 0x8000000000000000, 0x8000000000000000, 0x8000000000000000


%ifidn __OUTPUT_FORMAT__, elf64
section .text.Haswell progbits alloc exec nowrite align=16
global _yepMath_Cos_V64f_V64f_Haswell
_yepMath_Cos_V64f_V64f_Haswell:
%else
section .text
global __yepMath_Cos_V64f_V64f_Haswell
__yepMath_Cos_V64f_V64f_Haswell:
%endif
	.ENTRY:
	MOV rax, rsp
	SUB rsp, 8
	AND rsp, -32
	MOV [rsp], rax
	SUB rsp, 320
	TEST rdi, rdi
	JZ .return_null_pointer
	TEST rdi, 7
	JNZ .return_misaligned_pointer
	TEST rsi, rsi
	JZ .return_null_pointer
	TEST rsi, 7
	JNZ .return_misaligned_pointer
	TEST rdx, rdx
	JZ .return_ok
	TEST rdi, 31
	JZ .source_32b_aligned
	.source_32b_misaligned:
	VMOVSD xmm8, [rdi]
	VMULSD xmm9, xmm8, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c0]
	VADDSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c1]
	VPSLLQ xmm10, xmm9, 62
	VSUBSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c1]
	VMULSD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c2]
	VADDSD xmm8, xmm8, xmm11
	VMOVAPS xmm11, xmm8
	VMULSD xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c3]
	VADDSD xmm8, xmm8, xmm12
	VSUBSD xmm13, xmm8, xmm11
	VSUBSD xmm12, xmm12, xmm13
	VMULSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c4]
	VADDSD xmm9, xmm9, xmm12
	VADDSD xmm8, xmm8, xmm9
	VMULSD xmm9, xmm8, xmm8
	VMOVSD xmm11, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c5]
	VMOVSD xmm12, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c6]
	VFMADD213SD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c7]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c8]
	VFMADD213SD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c9]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c10]
	VFMADD213SD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c11]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c12]
	VFMADD213SD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c13]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c14]
	VFMADD213SD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c15]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c16]
	VFMADD213SD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c17]
	VMULSD xmm12, xmm12, xmm9
	VFMADD213SD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c18]
	VFMADD213SD xmm12, xmm8, xmm8
	VMOVSD xmm8, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c19]
	VPAND xmm8, xmm8, xmm10
	VPADDQ xmm10, xmm10, xmm10
	VBLENDVPD xmm9, xmm11, xmm12, xmm10
	VXORPD xmm9, xmm9, xmm8
	VMOVSD [rsi], xmm9
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JZ .return_ok
	TEST rdi, 31
	JNZ .source_32b_misaligned
	.source_32b_aligned:
	SUB rdx, 20
	JB .process_restore
	align 32
	.process_batch_full:
	VMOVAPS ymm8,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c20]
	VMOVAPS ymm9,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c21]
	VMOVAPD ymm10, [rdi]
	VMULPD ymm11, ymm10, ymm8
	VADDPD ymm11, ymm11, ymm9
	VMOVAPD ymm12, [byte rdi + 32]
	VMULPD ymm13, ymm12, ymm8
	VADDPD ymm13, ymm13, ymm9
	VMOVAPD ymm14, [byte rdi + 64]
	VMULPD ymm15, ymm14, ymm8
	VADDPD ymm15, ymm15, ymm9
	VMOVAPD ymm7, [byte rdi + 96]
	VMULPD ymm6, ymm7, ymm8
	VADDPD ymm6, ymm6, ymm9
	VMOVAPD ymm5, [dword rdi + 128]
	VMULPD ymm8, ymm5, ymm8
	VADDPD ymm8, ymm8, ymm9
	VEXTRACTF128 xmm4, ymm11, 1
	VPSLLQ xmm3, xmm11, 62
	VMOVDQA   [rsp], xmm3
	VPSLLQ xmm4, xmm4, 62
	VMOVDQA   [rsp + 16], xmm4
	VSUBPD ymm11, ymm11, ymm9
	VEXTRACTF128 xmm4, ymm13, 1
	VPSLLQ xmm3, xmm13, 62
	VMOVDQA   [rsp + 32], xmm3
	VPSLLQ xmm4, xmm4, 62
	VMOVDQA   [rsp + 48], xmm4
	VSUBPD ymm13, ymm13, ymm9
	VEXTRACTF128 xmm4, ymm15, 1
	VPSLLQ xmm3, xmm15, 62
	VMOVDQA   [rsp + 64], xmm3
	VPSLLQ xmm4, xmm4, 62
	VMOVDQA   [rsp + 80], xmm4
	VSUBPD ymm15, ymm15, ymm9
	VEXTRACTF128 xmm4, ymm6, 1
	VPSLLQ xmm3, xmm6, 62
	VMOVDQA   [rsp + 96], xmm3
	VPSLLQ xmm4, xmm4, 62
	VMOVDQA   [rsp + 112], xmm4
	VSUBPD ymm6, ymm6, ymm9
	VEXTRACTF128 xmm4, ymm8, 1
	VPSLLQ xmm3, xmm8, 62
	VMOVDQA   [rsp + 128], xmm3
	VPSLLQ xmm4, xmm4, 62
	VMOVDQA   [rsp + 144], xmm4
	VSUBPD ymm8, ymm8, ymm9
	VMULPD ymm9, ymm11,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c22]
	VADDPD ymm10, ymm10, ymm9
	VMULPD ymm9, ymm13,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c22]
	VADDPD ymm12, ymm12, ymm9
	VMULPD ymm9, ymm15,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c22]
	VADDPD ymm14, ymm14, ymm9
	VMULPD ymm9, ymm6,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c22]
	VADDPD ymm7, ymm7, ymm9
	VMULPD ymm9, ymm8,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c22]
	VADDPD ymm5, ymm5, ymm9
	VMULPD ymm9, ymm11,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c23]
	VADDPD ymm4, ymm10, ymm9
	VSUBPD ymm10, ymm4, ymm10
	VSUBPD ymm9, ymm9, ymm10
	VMULPD ymm11, ymm11,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c24]
	VADDPD ymm11, ymm11, ymm9
	VADDPD ymm4, ymm4, ymm11
	VMULPD ymm9, ymm13,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c23]
	VADDPD ymm10, ymm12, ymm9
	VSUBPD ymm11, ymm10, ymm12
	VSUBPD ymm9, ymm9, ymm11
	VMULPD ymm13, ymm13,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c24]
	VADDPD ymm13, ymm13, ymm9
	VADDPD ymm10, ymm10, ymm13
	VMULPD ymm9, ymm15,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c23]
	VADDPD ymm11, ymm14, ymm9
	VSUBPD ymm12, ymm11, ymm14
	VSUBPD ymm9, ymm9, ymm12
	VMULPD ymm15, ymm15,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c24]
	VADDPD ymm15, ymm15, ymm9
	VADDPD ymm11, ymm11, ymm15
	VMULPD ymm9, ymm6,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c23]
	VADDPD ymm12, ymm7, ymm9
	VSUBPD ymm13, ymm12, ymm7
	VSUBPD ymm9, ymm9, ymm13
	VMULPD ymm6, ymm6,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c24]
	VADDPD ymm6, ymm6, ymm9
	VADDPD ymm12, ymm12, ymm6
	VMULPD ymm9, ymm8,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c23]
	VADDPD ymm13, ymm5, ymm9
	VSUBPD ymm14, ymm13, ymm5
	VSUBPD ymm9, ymm9, ymm14
	VMULPD ymm8, ymm8,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c24]
	VADDPD ymm8, ymm8, ymm9
	VADDPD ymm13, ymm13, ymm8
	VMOVAPD   [rsp + 160], ymm4
	VMULPD ymm8, ymm4, ymm4
	VMOVAPD   [rsp + 192], ymm10
	VMULPD ymm9, ymm10, ymm10
	VMOVAPD   [rsp + 224], ymm11
	VMULPD ymm10, ymm11, ymm11
	VMOVAPD   [rsp + 256], ymm12
	VMULPD ymm11, ymm12, ymm12
	VMOVAPD   [rsp + 288], ymm13
	VMULPD ymm12, ymm13, ymm13
	VMOVAPS ymm13,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c25]
	VMOVAPS ymm14,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c26]
	VMOVAPD ymm15, ymm13
	VFMADD132PD ymm15, ymm14, ymm8
	VMOVAPD ymm7, ymm13
	VFMADD132PD ymm7, ymm14, ymm9
	VMOVAPD ymm6, ymm13
	VFMADD132PD ymm6, ymm14, ymm10
	VMOVAPD ymm5, ymm13
	VFMADD132PD ymm5, ymm14, ymm11
	VFMADD132PD ymm13, ymm14, ymm12
	VMOVAPS ymm14,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c27]
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c28]
	VMOVAPD ymm3, ymm14
	VFMADD132PD ymm3, ymm4, ymm8
	VMOVAPD ymm2, ymm14
	VFMADD132PD ymm2, ymm4, ymm9
	VMOVAPD ymm1, ymm14
	VFMADD132PD ymm1, ymm4, ymm10
	VMOVAPD ymm0, ymm14
	VFMADD132PD ymm0, ymm4, ymm11
	VFMADD132PD ymm14, ymm4, ymm12
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c29]
	VFMADD132PD ymm15, ymm4, ymm8
	VFMADD132PD ymm7, ymm4, ymm9
	VFMADD132PD ymm6, ymm4, ymm10
	VFMADD132PD ymm5, ymm4, ymm11
	VFMADD132PD ymm13, ymm4, ymm12
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c30]
	VFMADD132PD ymm3, ymm4, ymm8
	VFMADD132PD ymm2, ymm4, ymm9
	VFMADD132PD ymm1, ymm4, ymm10
	VFMADD132PD ymm0, ymm4, ymm11
	VFMADD132PD ymm14, ymm4, ymm12
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c31]
	VFMADD132PD ymm15, ymm4, ymm8
	VFMADD132PD ymm7, ymm4, ymm9
	VFMADD132PD ymm6, ymm4, ymm10
	VFMADD132PD ymm5, ymm4, ymm11
	VFMADD132PD ymm13, ymm4, ymm12
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c32]
	VFMADD132PD ymm3, ymm4, ymm8
	VFMADD132PD ymm2, ymm4, ymm9
	VFMADD132PD ymm1, ymm4, ymm10
	VFMADD132PD ymm0, ymm4, ymm11
	VFMADD132PD ymm14, ymm4, ymm12
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c33]
	VFMADD132PD ymm15, ymm4, ymm8
	VFMADD132PD ymm7, ymm4, ymm9
	VFMADD132PD ymm6, ymm4, ymm10
	VFMADD132PD ymm5, ymm4, ymm11
	VFMADD132PD ymm13, ymm4, ymm12
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c34]
	VFMADD132PD ymm3, ymm4, ymm8
	VFMADD132PD ymm2, ymm4, ymm9
	VFMADD132PD ymm1, ymm4, ymm10
	VFMADD132PD ymm0, ymm4, ymm11
	VFMADD132PD ymm14, ymm4, ymm12
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c35]
	VFMADD132PD ymm15, ymm4, ymm8
	VFMADD132PD ymm7, ymm4, ymm9
	VFMADD132PD ymm6, ymm4, ymm10
	VFMADD132PD ymm5, ymm4, ymm11
	VFMADD132PD ymm13, ymm4, ymm12
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c36]
	VFMADD132PD ymm3, ymm4, ymm8
	VFMADD132PD ymm2, ymm4, ymm9
	VFMADD132PD ymm1, ymm4, ymm10
	VFMADD132PD ymm0, ymm4, ymm11
	VFMADD132PD ymm14, ymm4, ymm12
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c37]
	VFMADD132PD ymm15, ymm4, ymm8
	VFMADD132PD ymm7, ymm4, ymm9
	VFMADD132PD ymm6, ymm4, ymm10
	VFMADD132PD ymm5, ymm4, ymm11
	VFMADD132PD ymm13, ymm4, ymm12
	VMULPD ymm3, ymm3, ymm8
	VMULPD ymm2, ymm2, ymm9
	VMULPD ymm1, ymm1, ymm10
	VMULPD ymm0, ymm0, ymm11
	VMULPD ymm14, ymm14, ymm12
	VMOVAPS ymm4,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c38]
	VFMADD132PD ymm15, ymm4, ymm8
	VFMADD132PD ymm7, ymm4, ymm9
	VFMADD132PD ymm6, ymm4, ymm10
	VFMADD132PD ymm5, ymm4, ymm11
	VFMADD132PD ymm13, ymm4, ymm12
	VMOVAPD ymm8,   [rsp + 160]
	VFMADD132PD ymm3, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 192]
	VFMADD132PD ymm2, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 224]
	VFMADD132PD ymm1, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 256]
	VFMADD132PD ymm0, ymm8, ymm8
	VMOVAPD ymm8,   [rsp + 288]
	VFMADD132PD ymm14, ymm8, ymm8
	VMOVAPS ymm8,  [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c39]
	VMOVAPD ymm9,   [rsp]
	VANDPD ymm10, ymm9, ymm8
	VPADDQ ymm9, ymm9, ymm9
	VBLENDVPD ymm9, ymm15, ymm3, ymm9
	VXORPD ymm9, ymm9, ymm10
	VMOVUPD [rsi], ymm9
	VMOVAPD ymm9,   [rsp + 32]
	VANDPD ymm10, ymm9, ymm8
	VPADDQ ymm9, ymm9, ymm9
	VBLENDVPD ymm9, ymm7, ymm2, ymm9
	VXORPD ymm9, ymm9, ymm10
	VMOVUPD [byte rsi + 32], ymm9
	VMOVAPD ymm9,   [rsp + 64]
	VANDPD ymm10, ymm9, ymm8
	VPADDQ ymm9, ymm9, ymm9
	VBLENDVPD ymm9, ymm6, ymm1, ymm9
	VXORPD ymm9, ymm9, ymm10
	VMOVUPD [byte rsi + 64], ymm9
	VMOVAPD ymm9,   [rsp + 96]
	VANDPD ymm10, ymm9, ymm8
	VPADDQ ymm9, ymm9, ymm9
	VBLENDVPD ymm9, ymm5, ymm0, ymm9
	VXORPD ymm9, ymm9, ymm10
	VMOVUPD [byte rsi + 96], ymm9
	VMOVAPD ymm9,   [rsp + 128]
	VANDPD ymm8, ymm9, ymm8
	VPADDQ ymm9, ymm9, ymm9
	VBLENDVPD ymm9, ymm13, ymm14, ymm9
	VXORPD ymm9, ymm9, ymm8
	VMOVUPD [dword rsi + 128], ymm9
	ADD rdi, 160
	ADD rsi, 160
	SUB rdx, 20
	JAE .process_batch_full
	.process_restore:
	ADD rdx, 20
	JZ .return_ok
	.process_single:
	VMOVSD xmm8, [rdi]
	VMULSD xmm9, xmm8, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c0]
	VADDSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c1]
	VPSLLQ xmm10, xmm9, 62
	VSUBSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c1]
	VMULSD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c2]
	VADDSD xmm8, xmm8, xmm11
	VMOVAPS xmm11, xmm8
	VMULSD xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c3]
	VADDSD xmm8, xmm8, xmm12
	VSUBSD xmm13, xmm8, xmm11
	VSUBSD xmm12, xmm12, xmm13
	VMULSD xmm9, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c4]
	VADDSD xmm9, xmm9, xmm12
	VADDSD xmm8, xmm8, xmm9
	VMULSD xmm9, xmm8, xmm8
	VMOVSD xmm11, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c5]
	VMOVSD xmm12, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c6]
	VFMADD213SD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c7]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c8]
	VFMADD213SD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c9]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c10]
	VFMADD213SD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c11]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c12]
	VFMADD213SD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c13]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c14]
	VFMADD213SD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c15]
	VFMADD213SD xmm12, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c16]
	VFMADD213SD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c17]
	VMULSD xmm12, xmm12, xmm9
	VFMADD213SD xmm11, xmm9, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c18]
	VFMADD213SD xmm12, xmm8, xmm8
	VMOVSD xmm8, [rel _yepMath_Cos_V64f_V64f_Haswell_constants.c19]
	VPAND xmm8, xmm8, xmm10
	VPADDQ xmm10, xmm10, xmm10
	VBLENDVPD xmm9, xmm11, xmm12, xmm10
	VXORPD xmm9, xmm9, xmm8
	VMOVSD [rsi], xmm9
	ADD rdi, 8
	ADD rsi, 8
	SUB rdx, 1
	JNZ .process_single
	.return_ok:
	XOR eax, eax
	.return:
	MOV rsp, [dword rsp + 320]
	VZEROUPPER
	RET
	.return_null_pointer:
	MOV eax, 1
	JMP .return
	.return_misaligned_pointer:
	MOV eax, 2
	JMP .return
