/*
 *                            Yeppp! library header
 *                   This file is auto-generated by Peach-Py,
 *        Portable Efficient Assembly Code-generator in Higher-level Python,
 *                    part of the Yeppp! library infrastrure
 * 
 * This file is part of Yeppp! library and licensed under the New BSD license.
 * 
 * Copyright (C) 2010-2012 Marat Dukhan
 * Copyright (C) 2012-2013 Georgia Institute of Technology
 * All rights reserved.
 *  
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Georgia Institute of Technology nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#pragma once

#include <core/Add.disp.h>
#include <core/Subtract.disp.h>
#include <core/Negate.disp.h>
#include <core/Multiply.disp.h>
#include <core/Min.disp.h>
#include <core/Max.disp.h>
#include <core/Sum.disp.h>
#include <core/SumAbs.disp.h>
#include <core/SumSquares.disp.h>
#include <core/DotProduct.disp.h>
inline static YepStatus _yepCore_Init() {
	YepStatus status;
	status = _yepCore_Add_Init();
	if YEP_UNLIKELY(status != YepStatusOk) {
		return status;
	}
	status = _yepCore_Subtract_Init();
	if YEP_UNLIKELY(status != YepStatusOk) {
		return status;
	}
	status = _yepCore_Negate_Init();
	if YEP_UNLIKELY(status != YepStatusOk) {
		return status;
	}
	status = _yepCore_Multiply_Init();
	if YEP_UNLIKELY(status != YepStatusOk) {
		return status;
	}
	status = _yepCore_Min_Init();
	if YEP_UNLIKELY(status != YepStatusOk) {
		return status;
	}
	status = _yepCore_Max_Init();
	if YEP_UNLIKELY(status != YepStatusOk) {
		return status;
	}
	status = _yepCore_Sum_Init();
	if YEP_UNLIKELY(status != YepStatusOk) {
		return status;
	}
	status = _yepCore_SumAbs_Init();
	if YEP_UNLIKELY(status != YepStatusOk) {
		return status;
	}
	status = _yepCore_SumSquares_Init();
	if YEP_UNLIKELY(status != YepStatusOk) {
		return status;
	}
	status = _yepCore_DotProduct_Init();
	if YEP_UNLIKELY(status != YepStatusOk) {
		return status;
	}
	return YepStatusOk;
}