/*
 *                       Yeppp! library implementation
 *                   This file is auto-generated by Peach-Py,
 *        Portable Efficient Assembly Code-generator in Higher-level Python,
 *                  part of the Yeppp! library infrastructure
 * This file is part of Yeppp! library and licensed under the New BSD license.
 * See LICENSE.txt for the full text of the license.
 */

#include <yepBuiltin.h>
#include <yepCore.h>


extern "C" YEP_LOCAL_SYMBOL YepStatus _yepCore_Negate_V8s_V8s_Default(const Yep8s *YEP_RESTRICT xPointer, Yep8s *YEP_RESTRICT yPointer, YepSize length) {
	if YEP_UNLIKELY(xPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	if YEP_UNLIKELY(yPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	while (length-- != 0) {
		const Yep8s x = *xPointer++;
		const Yep8s y = -x;
		*yPointer++ = y;
	}
	return YepStatusOk;
}

extern "C" YEP_LOCAL_SYMBOL YepStatus _yepCore_Negate_V16s_V16s_Default(const Yep16s *YEP_RESTRICT xPointer, Yep16s *YEP_RESTRICT yPointer, YepSize length) {
	if YEP_UNLIKELY(xPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	if YEP_UNLIKELY(yepBuiltin_GetPointerMisalignment(xPointer, sizeof(Yep16s)) != 0) {
		return YepStatusMisalignedPointer;
	}
	if YEP_UNLIKELY(yPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	if YEP_UNLIKELY(yepBuiltin_GetPointerMisalignment(yPointer, sizeof(Yep16s)) != 0) {
		return YepStatusMisalignedPointer;
	}
	while (length-- != 0) {
		const Yep16s x = *xPointer++;
		const Yep16s y = -x;
		*yPointer++ = y;
	}
	return YepStatusOk;
}

extern "C" YEP_LOCAL_SYMBOL YepStatus _yepCore_Negate_V32s_V32s_Default(const Yep32s *YEP_RESTRICT xPointer, Yep32s *YEP_RESTRICT yPointer, YepSize length) {
	if YEP_UNLIKELY(xPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	if YEP_UNLIKELY(yepBuiltin_GetPointerMisalignment(xPointer, sizeof(Yep32s)) != 0) {
		return YepStatusMisalignedPointer;
	}
	if YEP_UNLIKELY(yPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	if YEP_UNLIKELY(yepBuiltin_GetPointerMisalignment(yPointer, sizeof(Yep32s)) != 0) {
		return YepStatusMisalignedPointer;
	}
	while (length-- != 0) {
		const Yep32s x = *xPointer++;
		const Yep32s y = -x;
		*yPointer++ = y;
	}
	return YepStatusOk;
}

extern "C" YEP_LOCAL_SYMBOL YepStatus _yepCore_Negate_V64s_V64s_Default(const Yep64s *YEP_RESTRICT xPointer, Yep64s *YEP_RESTRICT yPointer, YepSize length) {
	if YEP_UNLIKELY(xPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	if YEP_UNLIKELY(yepBuiltin_GetPointerMisalignment(xPointer, sizeof(Yep64s)) != 0) {
		return YepStatusMisalignedPointer;
	}
	if YEP_UNLIKELY(yPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	if YEP_UNLIKELY(yepBuiltin_GetPointerMisalignment(yPointer, sizeof(Yep64s)) != 0) {
		return YepStatusMisalignedPointer;
	}
	while (length-- != 0) {
		const Yep64s x = *xPointer++;
		const Yep64s y = -x;
		*yPointer++ = y;
	}
	return YepStatusOk;
}

extern "C" YEP_LOCAL_SYMBOL YepStatus _yepCore_Negate_V32f_V32f_Default(const Yep32f *YEP_RESTRICT xPointer, Yep32f *YEP_RESTRICT yPointer, YepSize length) {
	if YEP_UNLIKELY(xPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	if YEP_UNLIKELY(yepBuiltin_GetPointerMisalignment(xPointer, sizeof(Yep32f)) != 0) {
		return YepStatusMisalignedPointer;
	}
	if YEP_UNLIKELY(yPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	if YEP_UNLIKELY(yepBuiltin_GetPointerMisalignment(yPointer, sizeof(Yep32f)) != 0) {
		return YepStatusMisalignedPointer;
	}
	while (length-- != 0) {
		const Yep32f x = *xPointer++;
		const Yep32f y = -x;
		*yPointer++ = y;
	}
	return YepStatusOk;
}

extern "C" YEP_LOCAL_SYMBOL YepStatus _yepCore_Negate_V64f_V64f_Default(const Yep64f *YEP_RESTRICT xPointer, Yep64f *YEP_RESTRICT yPointer, YepSize length) {
	if YEP_UNLIKELY(xPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	if YEP_UNLIKELY(yepBuiltin_GetPointerMisalignment(xPointer, sizeof(Yep64f)) != 0) {
		return YepStatusMisalignedPointer;
	}
	if YEP_UNLIKELY(yPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	if YEP_UNLIKELY(yepBuiltin_GetPointerMisalignment(yPointer, sizeof(Yep64f)) != 0) {
		return YepStatusMisalignedPointer;
	}
	while (length-- != 0) {
		const Yep64f x = *xPointer++;
		const Yep64f y = -x;
		*yPointer++ = y;
	}
	return YepStatusOk;
}

extern "C" YEP_LOCAL_SYMBOL YepStatus _yepCore_Negate_IV8s_IV8s_Default(Yep8s *YEP_RESTRICT vPointer, YepSize length) {
	if YEP_UNLIKELY(vPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	while (length-- != 0) {
		const Yep8s v = *vPointer;
		const Yep8s minusV = -v;
		*vPointer++ = minusV;
	}
	return YepStatusOk;
}

extern "C" YEP_LOCAL_SYMBOL YepStatus _yepCore_Negate_IV16s_IV16s_Default(Yep16s *YEP_RESTRICT vPointer, YepSize length) {
	if YEP_UNLIKELY(vPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	if YEP_UNLIKELY(yepBuiltin_GetPointerMisalignment(vPointer, sizeof(Yep16s)) != 0) {
		return YepStatusMisalignedPointer;
	}
	while (length-- != 0) {
		const Yep16s v = *vPointer;
		const Yep16s minusV = -v;
		*vPointer++ = minusV;
	}
	return YepStatusOk;
}

extern "C" YEP_LOCAL_SYMBOL YepStatus _yepCore_Negate_IV32s_IV32s_Default(Yep32s *YEP_RESTRICT vPointer, YepSize length) {
	if YEP_UNLIKELY(vPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	if YEP_UNLIKELY(yepBuiltin_GetPointerMisalignment(vPointer, sizeof(Yep32s)) != 0) {
		return YepStatusMisalignedPointer;
	}
	while (length-- != 0) {
		const Yep32s v = *vPointer;
		const Yep32s minusV = -v;
		*vPointer++ = minusV;
	}
	return YepStatusOk;
}

extern "C" YEP_LOCAL_SYMBOL YepStatus _yepCore_Negate_IV64s_IV64s_Default(Yep64s *YEP_RESTRICT vPointer, YepSize length) {
	if YEP_UNLIKELY(vPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	if YEP_UNLIKELY(yepBuiltin_GetPointerMisalignment(vPointer, sizeof(Yep64s)) != 0) {
		return YepStatusMisalignedPointer;
	}
	while (length-- != 0) {
		const Yep64s v = *vPointer;
		const Yep64s minusV = -v;
		*vPointer++ = minusV;
	}
	return YepStatusOk;
}

extern "C" YEP_LOCAL_SYMBOL YepStatus _yepCore_Negate_IV32f_IV32f_Default(Yep32f *YEP_RESTRICT vPointer, YepSize length) {
	if YEP_UNLIKELY(vPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	if YEP_UNLIKELY(yepBuiltin_GetPointerMisalignment(vPointer, sizeof(Yep32f)) != 0) {
		return YepStatusMisalignedPointer;
	}
	while (length-- != 0) {
		const Yep32f v = *vPointer;
		const Yep32f minusV = -v;
		*vPointer++ = minusV;
	}
	return YepStatusOk;
}

extern "C" YEP_LOCAL_SYMBOL YepStatus _yepCore_Negate_IV64f_IV64f_Default(Yep64f *YEP_RESTRICT vPointer, YepSize length) {
	if YEP_UNLIKELY(vPointer == YEP_NULL_POINTER) {
		return YepStatusNullPointer;
	}
	if YEP_UNLIKELY(yepBuiltin_GetPointerMisalignment(vPointer, sizeof(Yep64f)) != 0) {
		return YepStatusMisalignedPointer;
	}
	while (length-- != 0) {
		const Yep64f v = *vPointer;
		const Yep64f minusV = -v;
		*vPointer++ = minusV;
	}
	return YepStatusOk;
}
