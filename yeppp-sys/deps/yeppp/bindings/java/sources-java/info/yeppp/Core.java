/*
 *                       Yeppp! library implementation
 *                   This file is auto-generated by Peach-Py,
 *        Portable Efficient Assembly Code-generator in Higher-level Python,
 *                  part of the Yeppp! library infrastructure
 * This file is part of Yeppp! library and licensed under the New BSD license.
 * See LICENSE.txt for the full text of the license.
 */

package info.yeppp;

/** @brief	Basic arithmetic operations. */
public class Core {
	static {
		Library.load();
	}

	/** @name	Addition */
	/**@{*/
	/**
	 * @brief	Adds corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 8-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Add_V8sV8s_V8s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, byte[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 16-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Add_V8sV8s_V16s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, short[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two unsigned 8-bit integer arrays. Produces an array of unsigned 16-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Add_V8uV8u_V16u(byte[] xArray, int xOffset, byte[] yArray, int yOffset, short[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 16-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Add_V16sV16s_V16s(short[] xArray, int xOffset, short[] yArray, int yOffset, short[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 32-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Add_V16sV16s_V32s(short[] xArray, int xOffset, short[] yArray, int yOffset, int[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two unsigned 16-bit integer arrays. Produces an array of unsigned 32-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Add_V16uV16u_V32u(short[] xArray, int xOffset, short[] yArray, int yOffset, int[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 32-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Add_V32sV32s_V32s(int[] xArray, int xOffset, int[] yArray, int yOffset, int[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 64-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     		</table>
	 */
	public static native void Add_V32sV32s_V64s(int[] xArray, int xOffset, int[] yArray, int yOffset, long[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two unsigned 32-bit integer arrays. Produces an array of unsigned 64-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     		</table>
	 */
	public static native void Add_V32uV32u_V64u(int[] xArray, int xOffset, int[] yArray, int yOffset, long[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two signed 64-bit integer arrays. Produces an array of signed 64-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Add_V64sV64s_V64s(long[] xArray, int xOffset, long[] yArray, int yOffset, long[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two single precision (32-bit) floating-point arrays. Produces an array of single precision (32-bit) floating-point elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Add_V32fV32f_V32f(float[] xArray, int xOffset, float[] yArray, int yOffset, float[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two double precision (64-bit) floating-point arrays. Produces an array of double precision (64-bit) floating-point elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2</td></tr>
	 *     		</table>
	 */
	public static native void Add_V64fV64f_V64f(double[] xArray, int xOffset, double[] yArray, int yOffset, double[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds a constant to signed 8-bit integer array elements. Produces an array of signed 8-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 */
	public static native void Add_V8sS8s_V8s(byte[] xArray, int xOffset, byte y, byte[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds a constant to signed 8-bit integer array elements. Produces an array of signed 16-bit integer elements.
	 * @throws	NullPointerException	If @a xArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>SSE2, AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     		</table>
	 */
	public static native void Add_V8sS8s_V16s(byte[] xArray, int xOffset, byte y, short[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds a constant to unsigned 8-bit integer array elements. Produces an array of unsigned 16-bit integer elements.
	 * @throws	NullPointerException	If @a xArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>SSE2, AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     		</table>
	 */
	public static native void Add_V8uS8u_V16u(byte[] xArray, int xOffset, byte y, short[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds a constant to signed 16-bit integer array elements. Produces an array of signed 16-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 */
	public static native void Add_V16sS16s_V16s(short[] xArray, int xOffset, short y, short[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds a constant to signed 16-bit integer array elements. Produces an array of signed 32-bit integer elements.
	 * @throws	NullPointerException	If @a xArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>SSE2, AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     		</table>
	 */
	public static native void Add_V16sS16s_V32s(short[] xArray, int xOffset, short y, int[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds a constant to unsigned 16-bit integer array elements. Produces an array of unsigned 32-bit integer elements.
	 * @throws	NullPointerException	If @a xArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>SSE2, AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     		</table>
	 */
	public static native void Add_V16uS16u_V32u(short[] xArray, int xOffset, short y, int[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds a constant to signed 32-bit integer array elements. Produces an array of signed 32-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 */
	public static native void Add_V32sS32s_V32s(int[] xArray, int xOffset, int y, int[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds a constant to unsigned 32-bit integer array elements. Produces an array of unsigned 64-bit integer elements.
	 * @throws	NullPointerException	If @a xArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>SSE2, AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     		</table>
	 */
	public static native void Add_V32uS32u_V64u(int[] xArray, int xOffset, int y, long[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds a constant to signed 32-bit integer array elements. Produces an array of signed 64-bit integer elements.
	 * @throws	NullPointerException	If @a xArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>SSE2, AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     		</table>
	 */
	public static native void Add_V32sS32s_V64s(int[] xArray, int xOffset, int y, long[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds a constant to signed 64-bit integer array elements. Produces an array of signed 64-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 */
	public static native void Add_V64sS64s_V64s(long[] xArray, int xOffset, long y, long[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds a constant to single precision (32-bit) floating-point array elements. Produces an array of single precision (32-bit) floating-point elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 */
	public static native void Add_V32fS32f_V32f(float[] xArray, int xOffset, float y, float[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds a constant to double precision (64-bit) floating-point array elements. Produces an array of double precision (64-bit) floating-point elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a sumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a sumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a sumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a sumOffset + @a length exceeds the length of @a sumArray.
	 */
	public static native void Add_V64fS64f_V64f(double[] xArray, int xOffset, double y, double[] sumArray, int sumOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Add_IV8sV8s_IV8s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Add_IV16sV16s_IV16s(short[] xArray, int xOffset, short[] yArray, int yOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Add_IV32sV32s_IV32s(int[] xArray, int xOffset, int[] yArray, int yOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Add_IV64sV64s_IV64s(long[] xArray, int xOffset, long[] yArray, int yOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Add_IV32fV32f_IV32f(float[] xArray, int xOffset, float[] yArray, int yOffset, int length);
	/**
	 * @brief	Adds corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Add_IV64fV64f_IV64f(double[] xArray, int xOffset, double[] yArray, int yOffset, int length);
	/**
	 * @brief	Adds a constant to signed 8-bit integer array elements and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Add_IV8sS8s_IV8s(byte[] xArray, int xOffset, byte y, int length);
	/**
	 * @brief	Adds a constant to signed 16-bit integer array elements and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Add_IV16sS16s_IV16s(short[] xArray, int xOffset, short y, int length);
	/**
	 * @brief	Adds a constant to signed 32-bit integer array elements and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Add_IV32sS32s_IV32s(int[] xArray, int xOffset, int y, int length);
	/**
	 * @brief	Adds a constant to signed 64-bit integer array elements and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Add_IV64sS64s_IV64s(long[] xArray, int xOffset, long y, int length);
	/**
	 * @brief	Adds a constant to single precision (32-bit) floating-point array elements and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Add_IV32fS32f_IV32f(float[] xArray, int xOffset, float y, int length);
	/**
	 * @brief	Adds a constant to double precision (64-bit) floating-point array elements and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Add_IV64fS64f_IV64f(double[] xArray, int xOffset, double y, int length);
	/**@}*/


	/** @name	Subtraction */
	/**@{*/
	/**
	 * @brief	Subtracts corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 8-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Subtract_V8sV8s_V8s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, byte[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 16-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Subtract_V8sV8s_V16s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, short[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two unsigned 8-bit integer arrays. Produces an array of unsigned 16-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Subtract_V8uV8u_V16u(byte[] xArray, int xOffset, byte[] yArray, int yOffset, short[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 16-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Subtract_V16sV16s_V16s(short[] xArray, int xOffset, short[] yArray, int yOffset, short[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 32-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Subtract_V16sV16s_V32s(short[] xArray, int xOffset, short[] yArray, int yOffset, int[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two unsigned 16-bit integer arrays. Produces an array of unsigned 32-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Subtract_V16uV16u_V32u(short[] xArray, int xOffset, short[] yArray, int yOffset, int[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 32-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Subtract_V32sV32s_V32s(int[] xArray, int xOffset, int[] yArray, int yOffset, int[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 64-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     		</table>
	 */
	public static native void Subtract_V32sV32s_V64s(int[] xArray, int xOffset, int[] yArray, int yOffset, long[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two unsigned 32-bit integer arrays. Produces an array of unsigned 64-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     		</table>
	 */
	public static native void Subtract_V32uV32u_V64u(int[] xArray, int xOffset, int[] yArray, int yOffset, long[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 64-bit integer arrays. Produces an array of signed 64-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Subtract_V64sV64s_V64s(long[] xArray, int xOffset, long[] yArray, int yOffset, long[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two single precision (32-bit) floating-point arrays. Produces an array of single precision (32-bit) floating-point elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Subtract_V32fV32f_V32f(float[] xArray, int xOffset, float[] yArray, int yOffset, float[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two double precision (64-bit) floating-point arrays. Produces an array of double precision (64-bit) floating-point elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2</td></tr>
	 *     		</table>
	 */
	public static native void Subtract_V64fV64f_V64f(double[] xArray, int xOffset, double[] yArray, int yOffset, double[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 8-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_V8sS8s_V8s(byte[] xArray, int xOffset, byte y, byte[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 16-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_V8sS8s_V16s(byte[] xArray, int xOffset, byte y, short[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two unsigned 8-bit integer arrays. Produces an array of unsigned 16-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_V8uS8u_V16u(byte[] xArray, int xOffset, byte y, short[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 16-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_V16sS16s_V16s(short[] xArray, int xOffset, short y, short[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 32-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_V16sS16s_V32s(short[] xArray, int xOffset, short y, int[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two unsigned 16-bit integer arrays. Produces an array of unsigned 32-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_V16uS16u_V32u(short[] xArray, int xOffset, short y, int[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 32-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_V32sS32s_V32s(int[] xArray, int xOffset, int y, int[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 64-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_V32sS32s_V64s(int[] xArray, int xOffset, int y, long[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two unsigned 32-bit integer arrays. Produces an array of unsigned 64-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_V32uS32u_V64u(int[] xArray, int xOffset, int y, long[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 64-bit integer arrays. Produces an array of signed 64-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_V64sS64s_V64s(long[] xArray, int xOffset, long y, long[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two single precision (32-bit) floating-point arrays. Produces an array of single precision (32-bit) floating-point elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_V32fS32f_V32f(float[] xArray, int xOffset, float y, float[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two double precision (64-bit) floating-point arrays. Produces an array of double precision (64-bit) floating-point elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_V64fS64f_V64f(double[] xArray, int xOffset, double y, double[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts signed 8-bit integer array elements from a constant. Produces an array of signed 8-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_S8sV8s_V8s(byte x, byte[] yArray, int yOffset, byte[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts signed 8-bit integer array elements from a constant. Produces an array of signed 16-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_S8sV8s_V16s(byte x, byte[] yArray, int yOffset, short[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts unsigned 8-bit integer array elements from a constant. Produces an array of unsigned 16-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_S8uV8u_V16u(byte x, byte[] yArray, int yOffset, short[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts signed 16-bit integer array elements from a constant. Produces an array of signed 16-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_S16sV16s_V16s(short x, short[] yArray, int yOffset, short[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts signed 16-bit integer array elements from a constant. Produces an array of signed 32-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_S16sV16s_V32s(short x, short[] yArray, int yOffset, int[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts unsigned 16-bit integer array elements from a constant. Produces an array of unsigned 32-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_S16uV16u_V32u(short x, short[] yArray, int yOffset, int[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts signed 32-bit integer array elements from a constant. Produces an array of signed 32-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_S32sV32s_V32s(int x, int[] yArray, int yOffset, int[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts signed 32-bit integer array elements from a constant. Produces an array of signed 64-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_S32sV32s_V64s(int x, int[] yArray, int yOffset, long[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts unsigned 32-bit integer array elements from a constant. Produces an array of unsigned 64-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_S32uV32u_V64u(int x, int[] yArray, int yOffset, long[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts signed 64-bit integer array elements from a constant. Produces an array of signed 64-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_S64sV64s_V64s(long x, long[] yArray, int yOffset, long[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts single precision (32-bit) floating-point array elements from a constant. Produces an array of single precision (32-bit) floating-point elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_S32fV32f_V32f(float x, float[] yArray, int yOffset, float[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts double precision (64-bit) floating-point array elements from a constant. Produces an array of double precision (64-bit) floating-point elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray or @a diffArray is null.
	 * @throws	MisalignedPointerError	If @a yArray or @a diffArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset or @a diffOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray or @a diffOffset + @a length exceeds the length of @a diffArray.
	 */
	public static native void Subtract_S64fV64f_V64f(double x, double[] yArray, int yOffset, double[] diffArray, int diffOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_IV8sV8s_IV8s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_IV16sV16s_IV16s(short[] xArray, int xOffset, short[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_IV32sV32s_IV32s(int[] xArray, int xOffset, int[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_IV64sV64s_IV64s(long[] xArray, int xOffset, long[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_IV32fV32f_IV32f(float[] xArray, int xOffset, float[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_IV64fV64f_IV64f(double[] xArray, int xOffset, double[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 8-bit integer arrays and writes the result to the second array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_V8sIV8s_IV8s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 16-bit integer arrays and writes the result to the second array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_V16sIV16s_IV16s(short[] xArray, int xOffset, short[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 32-bit integer arrays and writes the result to the second array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_V32sIV32s_IV32s(int[] xArray, int xOffset, int[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two signed 64-bit integer arrays and writes the result to the second array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_V64sIV64s_IV64s(long[] xArray, int xOffset, long[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the second array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_V32fIV32f_IV32f(float[] xArray, int xOffset, float[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the second array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_V64fIV64f_IV64f(double[] xArray, int xOffset, double[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts a constant from signed 8-bit integer array elements and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Subtract_IV8sS8s_IV8s(byte[] xArray, int xOffset, byte y, int length);
	/**
	 * @brief	Subtracts a constant from signed 16-bit integer array elements and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Subtract_IV16sS16s_IV16s(short[] xArray, int xOffset, short y, int length);
	/**
	 * @brief	Subtracts a constant from signed 32-bit integer array elements and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Subtract_IV32sS32s_IV32s(int[] xArray, int xOffset, int y, int length);
	/**
	 * @brief	Subtracts a constant from signed 64-bit integer array elements and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Subtract_IV64sS64s_IV64s(long[] xArray, int xOffset, long y, int length);
	/**
	 * @brief	Subtracts a constant from single precision (32-bit) floating-point array elements and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Subtract_IV32fS32f_IV32f(float[] xArray, int xOffset, float y, int length);
	/**
	 * @brief	Subtracts a constant from double precision (64-bit) floating-point array elements and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Subtract_IV64fS64f_IV64f(double[] xArray, int xOffset, double y, int length);
	/**
	 * @brief	Subtracts signed 8-bit integer array elements from a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray is null.
	 * @throws	MisalignedPointerError	If @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_S8sIV8s_IV8s(byte x, byte[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts signed 16-bit integer array elements from a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray is null.
	 * @throws	MisalignedPointerError	If @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_S16sIV16s_IV16s(short x, short[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts signed 32-bit integer array elements from a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray is null.
	 * @throws	MisalignedPointerError	If @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_S32sIV32s_IV32s(int x, int[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts signed 64-bit integer array elements from a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray is null.
	 * @throws	MisalignedPointerError	If @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_S64sIV64s_IV64s(long x, long[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts single precision (32-bit) floating-point array elements from a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray is null.
	 * @throws	MisalignedPointerError	If @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_S32fIV32f_IV32f(float x, float[] yArray, int yOffset, int length);
	/**
	 * @brief	Subtracts double precision (64-bit) floating-point array elements from a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a yArray is null.
	 * @throws	MisalignedPointerError	If @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Subtract_S64fIV64f_IV64f(double x, double[] yArray, int yOffset, int length);
	/**@}*/


	/** @name	Negation */
	/**@{*/
	/**
	 * @brief	Negates elements in signed 8-bit integer array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Negate_V8s_V8s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, int length);
	/**
	 * @brief	Negates elements in signed 16-bit integer array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Negate_V16s_V16s(short[] xArray, int xOffset, short[] yArray, int yOffset, int length);
	/**
	 * @brief	Negates elements in signed 32-bit integer array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Negate_V32s_V32s(int[] xArray, int xOffset, int[] yArray, int yOffset, int length);
	/**
	 * @brief	Negates elements in signed 64-bit integer array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Negate_V64s_V64s(long[] xArray, int xOffset, long[] yArray, int yOffset, int length);
	/**
	 * @brief	Negates elements in single precision (32-bit) floating-point array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Negate_V32f_V32f(float[] xArray, int xOffset, float[] yArray, int yOffset, int length);
	/**
	 * @brief	Negates elements in double precision (64-bit) floating-point array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Negate_V64f_V64f(double[] xArray, int xOffset, double[] yArray, int yOffset, int length);
	/**
	 * @brief	Negates elements in signed 8-bit integer array and writes the results to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native void Negate_IV8s_IV8s(byte[] vArray, int vOffset, int length);
	/**
	 * @brief	Negates elements in signed 16-bit integer array and writes the results to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native void Negate_IV16s_IV16s(short[] vArray, int vOffset, int length);
	/**
	 * @brief	Negates elements in signed 32-bit integer array and writes the results to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native void Negate_IV32s_IV32s(int[] vArray, int vOffset, int length);
	/**
	 * @brief	Negates elements in signed 64-bit integer array and writes the results to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native void Negate_IV64s_IV64s(long[] vArray, int vOffset, int length);
	/**
	 * @brief	Negates elements in single precision (32-bit) floating-point array and writes the results to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native void Negate_IV32f_IV32f(float[] vArray, int vOffset, int length);
	/**
	 * @brief	Negates elements in double precision (64-bit) floating-point array and writes the results to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native void Negate_IV64f_IV64f(double[] vArray, int vOffset, int length);
	/**@}*/


	/** @name	Multiplication */
	/**@{*/
	/**
	 * @brief	Multiples corresponding elements in two signed 8-bit integer arrays, producing an array of signed 8-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a productOffset + @a length exceeds the length of @a productArray.
	 */
	public static native void Multiply_V8sV8s_V8s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, byte[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiples corresponding elements in two signed 8-bit integer arrays, producing an array of signed 16-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a productOffset + @a length exceeds the length of @a productArray.
	 */
	public static native void Multiply_V8sV8s_V16s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, short[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiples corresponding elements in two unsigned 8-bit integer arrays, producing an array of unsigned 16-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a productOffset + @a length exceeds the length of @a productArray.
	 */
	public static native void Multiply_V8uV8u_V16u(byte[] xArray, int xOffset, byte[] yArray, int yOffset, short[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiples corresponding elements in two signed 16-bit integer arrays, producing an array of signed 16-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a productOffset + @a length exceeds the length of @a productArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     		</table>
	 */
	public static native void Multiply_V16sV16s_V16s(short[] xArray, int xOffset, short[] yArray, int yOffset, short[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiples corresponding elements in two signed 16-bit integer arrays, producing an array of signed 32-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a productOffset + @a length exceeds the length of @a productArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX</td></tr>
	 *     		</table>
	 */
	public static native void Multiply_V16sV16s_V32s(short[] xArray, int xOffset, short[] yArray, int yOffset, int[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiples corresponding elements in two unsigned 16-bit integer arrays, producing an array of unsigned 32-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a productOffset + @a length exceeds the length of @a productArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX</td></tr>
	 *     		</table>
	 */
	public static native void Multiply_V16uV16u_V32u(short[] xArray, int xOffset, short[] yArray, int yOffset, int[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiples corresponding elements in two signed 32-bit integer arrays, producing an array of signed 32-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a productOffset + @a length exceeds the length of @a productArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     		</table>
	 */
	public static native void Multiply_V32sV32s_V32s(int[] xArray, int xOffset, int[] yArray, int yOffset, int[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiples corresponding elements in two signed 32-bit integer arrays, producing an array of signed 64-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a productOffset + @a length exceeds the length of @a productArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     		</table>
	 */
	public static native void Multiply_V32sV32s_V64s(int[] xArray, int xOffset, int[] yArray, int yOffset, long[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiples corresponding elements in two unsigned 32-bit integer arrays, producing an array of unsigned 64-bit integer elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a productOffset + @a length exceeds the length of @a productArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2, SSE4.1</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, AVX2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD K10</td><td>SSE2</td></tr>
	 *     		</table>
	 */
	public static native void Multiply_V32uV32u_V64u(int[] xArray, int xOffset, int[] yArray, int yOffset, long[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiples corresponding elements in two signed 64-bit integer arrays, producing an array of signed 64-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a productOffset + @a length exceeds the length of @a productArray.
	 */
	public static native void Multiply_V64sV64s_V64s(long[] xArray, int xOffset, long[] yArray, int yOffset, long[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiples corresponding elements in two single precision (32-bit) floating-point arrays, producing an array of single precision (32-bit) floating-point elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a productOffset + @a length exceeds the length of @a productArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     		</table>
	 */
	public static native void Multiply_V32fV32f_V32f(float[] xArray, int xOffset, float[] yArray, int yOffset, float[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiples corresponding elements in two double precision (64-bit) floating-point arrays, producing an array of double precision (64-bit) floating-point elements.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a productOffset + @a length exceeds the length of @a productArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2</td></tr>
	 *     		</table>
	 */
	public static native void Multiply_V64fV64f_V64f(double[] xArray, int xOffset, double[] yArray, int yOffset, double[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiplies signed 8-bit integer array elements by a constant. Produces an array of signed 8-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a productOffset + @a length exceeds the length of @a productArray.
	 */
	public static native void Multiply_V8sS8s_V8s(byte[] xArray, int xOffset, byte y, byte[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiplies signed 8-bit integer array elements by a constant. Produces an array of signed 16-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a productOffset + @a length exceeds the length of @a productArray.
	 */
	public static native void Multiply_V8sS8s_V16s(byte[] xArray, int xOffset, byte y, short[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiplies unsigned 8-bit integer array elements by a constant. Produces an array of unsigned 16-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a productOffset + @a length exceeds the length of @a productArray.
	 */
	public static native void Multiply_V8uS8u_V16u(byte[] xArray, int xOffset, byte y, short[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiplies signed 16-bit integer array elements by a constant. Produces an array of signed 16-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a productOffset + @a length exceeds the length of @a productArray.
	 */
	public static native void Multiply_V16sS16s_V16s(short[] xArray, int xOffset, short y, short[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiplies signed 16-bit integer array elements by a constant. Produces an array of signed 32-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a productOffset + @a length exceeds the length of @a productArray.
	 */
	public static native void Multiply_V16sS16s_V32s(short[] xArray, int xOffset, short y, int[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiplies unsigned 16-bit integer array elements by a constant. Produces an array of unsigned 32-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a productOffset + @a length exceeds the length of @a productArray.
	 */
	public static native void Multiply_V16uS16u_V32u(short[] xArray, int xOffset, short y, int[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiplies signed 32-bit integer array elements by a constant. Produces an array of signed 32-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a productOffset + @a length exceeds the length of @a productArray.
	 */
	public static native void Multiply_V32sS32s_V32s(int[] xArray, int xOffset, int y, int[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiplies signed 32-bit integer array elements by a constant. Produces an array of signed 64-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a productOffset + @a length exceeds the length of @a productArray.
	 */
	public static native void Multiply_V32sS32s_V64s(int[] xArray, int xOffset, int y, long[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiplies unsigned 32-bit integer array elements by a constant. Produces an array of unsigned 64-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a productOffset + @a length exceeds the length of @a productArray.
	 */
	public static native void Multiply_V32uS32u_V64u(int[] xArray, int xOffset, int y, long[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiplies signed 64-bit integer array elements by a constant. Produces an array of signed 64-bit integer elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a productOffset + @a length exceeds the length of @a productArray.
	 */
	public static native void Multiply_V64sS64s_V64s(long[] xArray, int xOffset, long y, long[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiplies single precision (32-bit) floating-point array elements by a constant. Produces an array of single precision (32-bit) floating-point elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a productOffset + @a length exceeds the length of @a productArray.
	 */
	public static native void Multiply_V32fS32f_V32f(float[] xArray, int xOffset, float y, float[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiplies double precision (64-bit) floating-point array elements by a constant. Produces an array of double precision (64-bit) floating-point elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a productArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a productArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a productOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a productOffset + @a length exceeds the length of @a productArray.
	 */
	public static native void Multiply_V64fS64f_V64f(double[] xArray, int xOffset, double y, double[] productArray, int productOffset, int length);
	/**
	 * @brief	Multiplies corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Multiply_IV8sV8s_IV8s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, int length);
	/**
	 * @brief	Multiplies corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Multiply_IV16sV16s_IV16s(short[] xArray, int xOffset, short[] yArray, int yOffset, int length);
	/**
	 * @brief	Multiplies corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Multiply_IV32sV32s_IV32s(int[] xArray, int xOffset, int[] yArray, int yOffset, int length);
	/**
	 * @brief	Multiplies corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Multiply_IV64sV64s_IV64s(long[] xArray, int xOffset, long[] yArray, int yOffset, int length);
	/**
	 * @brief	Multiplies corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Multiply_IV32fV32f_IV32f(float[] xArray, int xOffset, float[] yArray, int yOffset, int length);
	/**
	 * @brief	Multiplies corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Multiply_IV64fV64f_IV64f(double[] xArray, int xOffset, double[] yArray, int yOffset, int length);
	/**
	 * @brief	Multiplies signed 8-bit integer array elements by a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Multiply_IV8sS8s_IV8s(byte[] xArray, int xOffset, byte y, int length);
	/**
	 * @brief	Multiplies signed 16-bit integer array elements by a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Multiply_IV16sS16s_IV16s(short[] xArray, int xOffset, short y, int length);
	/**
	 * @brief	Multiplies signed 32-bit integer array elements by a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Multiply_IV32sS32s_IV32s(int[] xArray, int xOffset, int y, int length);
	/**
	 * @brief	Multiplies signed 64-bit integer array elements by a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Multiply_IV64sS64s_IV64s(long[] xArray, int xOffset, long y, int length);
	/**
	 * @brief	Multiplies single precision (32-bit) floating-point array elements by a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Multiply_IV32fS32f_IV32f(float[] xArray, int xOffset, float y, int length);
	/**
	 * @brief	Multiplies double precision (64-bit) floating-point array elements by a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Multiply_IV64fS64f_IV64f(double[] xArray, int xOffset, double y, int length);
	/**@}*/


	/** @name	Minimum */
	/**@{*/
	/**
	 * @brief	Computes the minimum of signed 8-bit integer array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native byte Min_V8s_S8s(byte[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the minimum of unsigned 8-bit integer array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native byte Min_V8u_S8u(byte[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the minimum of signed 16-bit integer array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native short Min_V16s_S16s(short[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the minimum of unsigned 16-bit integer array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native short Min_V16u_S16u(short[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the minimum of signed 32-bit integer array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native int Min_V32s_S32s(int[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the minimum of unsigned 32-bit integer array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native int Min_V32u_S32u(int[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the minimum of signed 64-bit integer array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native long Min_V64s_S64s(long[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the minimum of unsigned 64-bit integer array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native long Min_V64u_S64u(long[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the minimum of single precision (32-bit) floating-point array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native float Min_V32f_S32f(float[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the minimum of double precision (64-bit) floating-point array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native double Min_V64f_S64f(double[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two signed 8-bit integer arrays.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Min_V8sV8s_V8s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, byte[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two unsigned 8-bit integer arrays.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Min_V8uV8u_V8u(byte[] xArray, int xOffset, byte[] yArray, int yOffset, byte[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two signed 16-bit integer arrays.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Min_V16sV16s_V16s(short[] xArray, int xOffset, short[] yArray, int yOffset, short[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two unsigned 16-bit integer arrays.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Min_V16uV16u_V16u(short[] xArray, int xOffset, short[] yArray, int yOffset, short[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two signed 32-bit integer arrays.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Min_V32sV32s_V32s(int[] xArray, int xOffset, int[] yArray, int yOffset, int[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two unsigned 32-bit integer arrays.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Min_V32uV32u_V32u(int[] xArray, int xOffset, int[] yArray, int yOffset, int[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two signed 64-bit integer arrays.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 */
	public static native void Min_V64sV32s_V64s(long[] xArray, int xOffset, int[] yArray, int yOffset, long[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two unsigned 64-bit integer arrays.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 */
	public static native void Min_V64uV32u_V64u(long[] xArray, int xOffset, int[] yArray, int yOffset, long[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two single precision (32-bit) floating-point arrays.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     		</table>
	 */
	public static native void Min_V32fV32f_V32f(float[] xArray, int xOffset, float[] yArray, int yOffset, float[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two double precision (64-bit) floating-point arrays.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     		</table>
	 */
	public static native void Min_V64fV64f_V64f(double[] xArray, int xOffset, double[] yArray, int yOffset, double[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of signed 8-bit integer array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 */
	public static native void Min_V8sS8s_V8s(byte[] xArray, int xOffset, byte y, byte[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of unsigned 8-bit integer array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 */
	public static native void Min_V8uS8u_V8u(byte[] xArray, int xOffset, byte y, byte[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of signed 16-bit integer array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 */
	public static native void Min_V16sS16s_V16s(short[] xArray, int xOffset, short y, short[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of unsigned 16-bit integer array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 */
	public static native void Min_V16uS16u_V16u(short[] xArray, int xOffset, short y, short[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of signed 32-bit integer array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 */
	public static native void Min_V32sS32s_V32s(int[] xArray, int xOffset, int y, int[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of unsigned 32-bit integer array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 */
	public static native void Min_V32uS32u_V32u(int[] xArray, int xOffset, int y, int[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of signed 64-bit integer array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 */
	public static native void Min_V64sS32s_V64s(long[] xArray, int xOffset, int y, long[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of unsigned 64-bit integer array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 */
	public static native void Min_V64uS32u_V64u(long[] xArray, int xOffset, int y, long[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of single precision (32-bit) floating-point array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 */
	public static native void Min_V32fS32f_V32f(float[] xArray, int xOffset, float y, float[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of double precision (64-bit) floating-point array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a minimumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a minimumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a minimumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a minimumOffset + @a length exceeds the length of @a minimumArray.
	 */
	public static native void Min_V64fS64f_V64f(double[] xArray, int xOffset, double y, double[] minimumArray, int minimumOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Min_IV8sV8s_IV8s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two unsigned 8-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Min_IV8uV8u_IV8u(byte[] xArray, int xOffset, byte[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Min_IV16sV16s_IV16s(short[] xArray, int xOffset, short[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two unsigned 16-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Min_IV16uV16u_IV16u(short[] xArray, int xOffset, short[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Min_IV32sV32s_IV32s(int[] xArray, int xOffset, int[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two unsigned 32-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Min_IV32uV32u_IV32u(int[] xArray, int xOffset, int[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Min_IV64sV32s_IV64s(long[] xArray, int xOffset, int[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two unsigned 64-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Min_IV64uV32u_IV64u(long[] xArray, int xOffset, int[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Min_IV32fV32f_IV32f(float[] xArray, int xOffset, float[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise minima of corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Min_IV64fV64f_IV64f(double[] xArray, int xOffset, double[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise minima of signed 8-bit integer array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Min_IV8sS8s_IV8s(byte[] xArray, int xOffset, byte y, int length);
	/**
	 * @brief	Computes pairwise minima of unsigned 8-bit integer array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Min_IV8uS8u_IV8u(byte[] xArray, int xOffset, byte y, int length);
	/**
	 * @brief	Computes pairwise minima of signed 16-bit integer array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Min_IV16sS16s_IV16s(short[] xArray, int xOffset, short y, int length);
	/**
	 * @brief	Computes pairwise minima of unsigned 16-bit integer array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Min_IV16uS16u_IV16u(short[] xArray, int xOffset, short y, int length);
	/**
	 * @brief	Computes pairwise minima of signed 32-bit integer array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Min_IV32sS32s_IV32s(int[] xArray, int xOffset, int y, int length);
	/**
	 * @brief	Computes pairwise minima of unsigned 32-bit integer array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Min_IV32uS32u_IV32u(int[] xArray, int xOffset, int y, int length);
	/**
	 * @brief	Computes pairwise minima of signed 64-bit integer array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Min_IV64sS32s_IV64s(long[] xArray, int xOffset, int y, int length);
	/**
	 * @brief	Computes pairwise minima of unsigned 64-bit integer array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Min_IV64uS32u_IV64u(long[] xArray, int xOffset, int y, int length);
	/**
	 * @brief	Computes pairwise minima of single precision (32-bit) floating-point array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Min_IV32fS32f_IV32f(float[] xArray, int xOffset, float y, int length);
	/**
	 * @brief	Computes pairwise minima of double precision (64-bit) floating-point array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Min_IV64fS64f_IV64f(double[] xArray, int xOffset, double y, int length);
	/**@}*/


	/** @name	Maximum */
	/**@{*/
	/**
	 * @brief	Computes the maximum of signed 8-bit integer array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native byte Max_V8s_S8s(byte[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the maximum of unsigned 8-bit integer array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native byte Max_V8u_S8u(byte[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the maximum of signed 16-bit integer array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native short Max_V16s_S16s(short[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the maximum of unsigned 16-bit integer array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native short Max_V16u_S16u(short[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the maximum of signed 32-bit integer array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native int Max_V32s_S32s(int[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the maximum of unsigned 32-bit integer array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native int Max_V32u_S32u(int[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the maximum of signed 64-bit integer array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native long Max_V64s_S64s(long[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the maximum of unsigned 64-bit integer array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native long Max_V64u_S64u(long[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the maximum of single precision (32-bit) floating-point array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native float Max_V32f_S32f(float[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the maximum of double precision (64-bit) floating-point array elements.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative or @a length is zero.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 */
	public static native double Max_V64f_S64f(double[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two signed 8-bit integer arrays.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Max_V8sV8s_V8s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, byte[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two unsigned 8-bit integer arrays.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Max_V8uV8u_V8u(byte[] xArray, int xOffset, byte[] yArray, int yOffset, byte[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two signed 16-bit integer arrays.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Max_V16sV16s_V16s(short[] xArray, int xOffset, short[] yArray, int yOffset, short[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two unsigned 16-bit integer arrays.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Max_V16uV16u_V16u(short[] xArray, int xOffset, short[] yArray, int yOffset, short[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two signed 32-bit integer arrays.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Max_V32sV32s_V32s(int[] xArray, int xOffset, int[] yArray, int yOffset, int[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two unsigned 32-bit integer arrays.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>ARM</td><td>ARM Cortex-A9</td><td>VFP2, NEON</td></tr>
	 *     		</table>
	 */
	public static native void Max_V32uV32u_V32u(int[] xArray, int xOffset, int[] yArray, int yOffset, int[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two signed 64-bit integer arrays.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 */
	public static native void Max_V64sV32s_V64s(long[] xArray, int xOffset, int[] yArray, int yOffset, long[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two unsigned 64-bit integer arrays.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 */
	public static native void Max_V64uV32u_V64u(long[] xArray, int xOffset, int[] yArray, int yOffset, long[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two single precision (32-bit) floating-point arrays.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     		</table>
	 */
	public static native void Max_V32fV32f_V32f(float[] xArray, int xOffset, float[] yArray, int yOffset, float[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two double precision (64-bit) floating-point arrays.
	 * @throws	NullPointerException	If @a xArray, @a yArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray, @a yArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset, @a yOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray, @a yOffset + @a length exceeds the length of @a yArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     		</table>
	 */
	public static native void Max_V64fV64f_V64f(double[] xArray, int xOffset, double[] yArray, int yOffset, double[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of signed 8-bit integer array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 */
	public static native void Max_V8sS8s_V8s(byte[] xArray, int xOffset, byte y, byte[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of unsigned 8-bit integer array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 */
	public static native void Max_V8uS8u_V8u(byte[] xArray, int xOffset, byte y, byte[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of signed 16-bit integer array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 */
	public static native void Max_V16sS16s_V16s(short[] xArray, int xOffset, short y, short[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of unsigned 16-bit integer array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 */
	public static native void Max_V16uS16u_V16u(short[] xArray, int xOffset, short y, short[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of signed 32-bit integer array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 */
	public static native void Max_V32sS32s_V32s(int[] xArray, int xOffset, int y, int[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of unsigned 32-bit integer array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 */
	public static native void Max_V32uS32u_V32u(int[] xArray, int xOffset, int y, int[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of signed 64-bit integer array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 */
	public static native void Max_V64sS32s_V64s(long[] xArray, int xOffset, int y, long[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of unsigned 64-bit integer array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 */
	public static native void Max_V64uS32u_V64u(long[] xArray, int xOffset, int y, long[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of single precision (32-bit) floating-point array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 */
	public static native void Max_V32fS32f_V32f(float[] xArray, int xOffset, float y, float[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of double precision (64-bit) floating-point array elements and a constant.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a maximumArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a maximumArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a maximumOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a maximumOffset + @a length exceeds the length of @a maximumArray.
	 */
	public static native void Max_V64fS64f_V64f(double[] xArray, int xOffset, double y, double[] maximumArray, int maximumOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Max_IV8sV8s_IV8s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two unsigned 8-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Max_IV8uV8u_IV8u(byte[] xArray, int xOffset, byte[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Max_IV16sV16s_IV16s(short[] xArray, int xOffset, short[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two unsigned 16-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Max_IV16uV16u_IV16u(short[] xArray, int xOffset, short[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Max_IV32sV32s_IV32s(int[] xArray, int xOffset, int[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two unsigned 32-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Max_IV32uV32u_IV32u(int[] xArray, int xOffset, int[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Max_IV64sV32s_IV64s(long[] xArray, int xOffset, int[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two unsigned 64-bit integer arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Max_IV64uV32u_IV64u(long[] xArray, int xOffset, int[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Max_IV32fV32f_IV32f(float[] xArray, int xOffset, float[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 */
	public static native void Max_IV64fV64f_IV64f(double[] xArray, int xOffset, double[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes pairwise maxima of signed 8-bit integer array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Max_IV8sS8s_IV8s(byte[] xArray, int xOffset, byte y, int length);
	/**
	 * @brief	Computes pairwise maxima of unsigned 8-bit integer array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Max_IV8uS8u_IV8u(byte[] xArray, int xOffset, byte y, int length);
	/**
	 * @brief	Computes pairwise maxima of signed 16-bit integer array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Max_IV16sS16s_IV16s(short[] xArray, int xOffset, short y, int length);
	/**
	 * @brief	Computes pairwise maxima of unsigned 16-bit integer array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Max_IV16uS16u_IV16u(short[] xArray, int xOffset, short y, int length);
	/**
	 * @brief	Computes pairwise maxima of signed 32-bit integer array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Max_IV32sS32s_IV32s(int[] xArray, int xOffset, int y, int length);
	/**
	 * @brief	Computes pairwise maxima of unsigned 32-bit integer array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Max_IV32uS32u_IV32u(int[] xArray, int xOffset, int y, int length);
	/**
	 * @brief	Computes pairwise maxima of signed 64-bit integer array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Max_IV64sS32s_IV64s(long[] xArray, int xOffset, int y, int length);
	/**
	 * @brief	Computes pairwise maxima of unsigned 64-bit integer array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Max_IV64uS32u_IV64u(long[] xArray, int xOffset, int y, int length);
	/**
	 * @brief	Computes pairwise maxima of single precision (32-bit) floating-point array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Max_IV32fS32f_IV32f(float[] xArray, int xOffset, float y, int length);
	/**
	 * @brief	Computes pairwise maxima of double precision (64-bit) floating-point array elements and a constant and writes the result to the same array.
	 * @warning	This version of @Yeppp does not include optimized implementations for this function
	 * @throws	NullPointerException	If @a xArray is null.
	 * @throws	MisalignedPointerError	If @a xArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray.
	 */
	public static native void Max_IV64fS64f_IV64f(double[] xArray, int xOffset, double y, int length);
	/**@}*/


	/** @name	Sum */
	/**@{*/
	/**
	 * @brief	Computes the sum of single precision (32-bit) floating-point array elements.
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE, SSE3</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX</td></tr>
	 *     		</table>
	 */
	public static native float Sum_V32f_S32f(float[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the sum of double precision (64-bit) floating-point array elements.
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE, SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX</td></tr>
	 *     		</table>
	 */
	public static native double Sum_V64f_S64f(double[] vArray, int vOffset, int length);
	/**@}*/


	/** @name	Sum of absolute values */
	/**@{*/
	/**
	 * @brief	Computes the sum of absolute values of single precision (32-bit) floating-point array elements.
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE, SSE2, SSE3</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX</td></tr>
	 *     		</table>
	 */
	public static native float SumAbs_V32f_S32f(float[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the sum of absolute values of double precision (64-bit) floating-point array elements.
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE, SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX</td></tr>
	 *     		</table>
	 */
	public static native double SumAbs_V64f_S64f(double[] vArray, int vOffset, int length);
	/**@}*/


	/** @name	Sum of squares (squared L2 norm) */
	/**@{*/
	/**
	 * @brief	Computes the sum of squares of single precision (32-bit) floating-point array elements.
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE, SSE3</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, FMA3</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX, FMA4</td></tr>
	 *     		</table>
	 */
	public static native float SumSquares_V32f_S32f(float[] vArray, int vOffset, int length);
	/**
	 * @brief	Computes the sum of squares of double precision (64-bit) floating-point array elements.
	 * @throws	NullPointerException	If @a vArray is null.
	 * @throws	MisalignedPointerError	If @a vArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a vOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a vOffset + @a length exceeds the length of @a vArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE, SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, FMA3</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX, FMA4</td></tr>
	 *     		</table>
	 */
	public static native double SumSquares_V64f_S64f(double[] vArray, int vOffset, int length);
	/**@}*/


	/** @name	Dot product */
	/**@{*/
	/**
	 * @brief	Computes the dot product of two vectors of single precision (32-bit) floating-point elements.
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE, SSE3</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, FMA3</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX, FMA4</td></tr>
	 *     		</table>
	 */
	public static native float DotProduct_V32fV32f_S32f(float[] xArray, int xOffset, float[] yArray, int yOffset, int length);
	/**
	 * @brief	Computes the dot product of two vectors of double precision (64-bit) floating-point elements.
	 * @throws	NullPointerException	If @a xArray or @a yArray is null.
	 * @throws	MisalignedPointerError	If @a xArray or @a yArray is not naturally aligned.
	 * @throws	InvalidArgumentException	If @a xOffset or @a yOffset is negative.
	 * @throws	NegativeArraySizeException	If @a length is negative.
	 * @throws	IndexOutOfBoundsException	If @a xOffset + @a length exceeds the length of @a xArray or @a yOffset + @a length exceeds the length of @a yArray.
	 * @par	Optimized implementations
	 *     		<table>
	 *     			<tr><th>Architecture</th><th>Target microarchitecture</th><th>Required instruction extensions</th></tr>
	 *     			<tr><td>x86-64</td><td>Intel Nehalem</td><td>SSE, SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Sandy Bridge</td><td>AVX</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Haswell</td><td>AVX, FMA3</td></tr>
	 *     			<tr><td>x86-64</td><td>Intel Bonnell</td><td>SSE, SSE2</td></tr>
	 *     			<tr><td>x86-64</td><td>AMD Bulldozer</td><td>AVX, FMA4</td></tr>
	 *     		</table>
	 */
	public static native double DotProduct_V64fV64f_S64f(double[] xArray, int xOffset, double[] yArray, int yOffset, int length);
	/**@}*/


}
